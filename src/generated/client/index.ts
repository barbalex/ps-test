import { z } from 'zod';
import type { Prisma } from './prismaClient';
import { type TableSchema, DbSchema, Relation, ElectricClient, type HKT } from 'electric-sql/client/model';
import migrations from './migrations';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null;


export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue)),
]);

export type JsonValueType = z.infer<typeof JsonValue>;

export const NullableJsonValue = JsonValue
  .nullable();

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable())),
]);

export type InputJsonValueType = z.infer<typeof InputJsonValue>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const AccountsScalarFieldEnumSchema = z.enum(['account_id','user_id','type','period_start','period_end','projects_label_by','label']);

export const Field_typesScalarFieldEnumSchema = z.enum(['field_type_id','name','sort','comment','label_replace_by_generated_column','deleted']);

export const Gbif_occurrence_downloadsScalarFieldEnumSchema = z.enum(['gbif_occurrence_download_id','account_id','project_id','subproject_id','gbif_table','filters','created_time','download_key','error','inserted_time','inserted_count','attribution','deleted']);

export const Gbif_occurrencesScalarFieldEnumSchema = z.enum(['gbif_occurrence_id','account_id','project_id','subproject_id','gbif_data','label']);

export const Gbif_taxaScalarFieldEnumSchema = z.enum(['gbif_taxon_id','account_id','project_id','gbif_data','label']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]);

export const ListsScalarFieldEnumSchema = z.enum(['list_id','account_id','project_id','name','data','obsolete','label_replace_by_generated_column','deleted']);

export const MessagesScalarFieldEnumSchema = z.enum(['message_id','label_replace_by_generated_column','date','message']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',])

export const PersonsScalarFieldEnumSchema = z.enum(['person_id','project_id','account_id','email','data','label_replace_by_generated_column','deleted']);

export const Place_levelsScalarFieldEnumSchema = z.enum(['place_level_id','account_id','project_id','level','name_singular','name_plural','name_short','reports','report_values','actions','action_values','action_reports','checks','check_values','check_taxa','observations','label_replace_by_generated_column','deleted']);

export const Project_usersScalarFieldEnumSchema = z.enum(['project_user_id','account_id','project_id','user_id','role','label','deleted']);

export const ProjectsScalarFieldEnumSchema = z.enum(['project_id','account_id','name','label','type','subproject_name_singular','subproject_name_plural','subproject_order_by','places_label_by','places_order_by','persons_label_by','persons_order_by','goal_reports_label_by','goal_reports_order_by','values_on_multiple_levels','multiple_action_values_on_same_level','multiple_check_values_on_same_level','data','files_offline','files_active_projects','files_active_subprojects','files_active_places','files_active_actions','files_active_checks','deleted']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const SubprojectsScalarFieldEnumSchema = z.enum(['subproject_id','account_id','project_id','name','label_replace_by_generated_column','start_year','end_year','data','deleted']);

export const TaxaScalarFieldEnumSchema = z.enum(['taxon_id','account_id','taxonomy_id','name','id_in_source','url','label','deleted']);

export const TaxonomiesScalarFieldEnumSchema = z.enum(['taxonomy_id','account_id','project_id','type','name','url','obsolete','data','label_replace_by_generated_column','deleted']);

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const Ui_optionsScalarFieldEnumSchema = z.enum(['user_id','account_id','designing','breadcrumbs_overflowing','navs_overflowing','tabs','show_map','map_bounds','local_map_show','tile_layer_sorter','vector_layer_sorter','editing_place_geometry','editing_check_geometry','editing_action_geometry','label']);

export const User_messagesScalarFieldEnumSchema = z.enum(['user_message_id','account_id','user_id','message_id','label_replace_by_generated_column','read']);

export const UsersScalarFieldEnumSchema = z.enum(['user_id','email','auth_id','label_replace_by_generated_column','deleted']);

export const Widget_typesScalarFieldEnumSchema = z.enum(['widget_type_id','name','needs_list','sort','comment','label_replace_by_generated_column','deleted']);

export const Widgets_for_fieldsScalarFieldEnumSchema = z.enum(['widget_for_field_id','field_type_id','widget_type_id','label','deleted']);

export const gbif_tableSchema = z.enum(['gbif_taxa','gbif_occurrences']);

export type gbif_tableType = `${z.infer<typeof gbif_tableSchema>}`

export const project_typeSchema = z.enum(['species','biotope']);

export type project_typeType = `${z.infer<typeof project_typeSchema>}`

export const taxonomy_typeSchema = z.enum(['species','biotope']);

export type taxonomy_typeType = `${z.infer<typeof taxonomy_typeSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNTS SCHEMA
/////////////////////////////////////////

export const AccountsSchema = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().nullable(),
  type: z.string().nullable(),
  period_start: z.coerce.date().nullable(),
  period_end: z.coerce.date().nullable(),
  projects_label_by: z.string().nullable(),
  label: z.string().nullable(),
})

export type Accounts = z.infer<typeof AccountsSchema>

/////////////////////////////////////////
// FIELD TYPES SCHEMA
/////////////////////////////////////////

export const Field_typesSchema = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  comment: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Field_types = z.infer<typeof Field_typesSchema>

/////////////////////////////////////////
// GBIF OCCURRENCE DOWNLOADS SCHEMA
/////////////////////////////////////////

export const Gbif_occurrence_downloadsSchema = z.object({
  gbif_table: gbif_tableSchema.nullable(),
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  filters: NullableJsonValue.optional(),
  created_time: z.coerce.date().nullable(),
  download_key: z.string().nullable(),
  error: z.string().nullable(),
  inserted_time: z.coerce.date().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  attribution: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Gbif_occurrence_downloads = z.infer<typeof Gbif_occurrence_downloadsSchema>

/////////////////////////////////////////
// GBIF OCCURRENCES SCHEMA
/////////////////////////////////////////

export const Gbif_occurrencesSchema = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  gbif_data: NullableJsonValue.optional(),
  label: z.string().nullable(),
})

export type Gbif_occurrences = z.infer<typeof Gbif_occurrencesSchema>

/////////////////////////////////////////
// GBIF TAXA SCHEMA
/////////////////////////////////////////

export const Gbif_taxaSchema = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  gbif_data: NullableJsonValue.optional(),
  label: z.string().nullable(),
})

export type Gbif_taxa = z.infer<typeof Gbif_taxaSchema>

/////////////////////////////////////////
// LISTS SCHEMA
/////////////////////////////////////////

export const ListsSchema = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  data: NullableJsonValue.optional(),
  obsolete: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Lists = z.infer<typeof ListsSchema>

/////////////////////////////////////////
// MESSAGES SCHEMA
/////////////////////////////////////////

export const MessagesSchema = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().nullable(),
  date: z.coerce.date().nullable(),
  message: z.string().nullable(),
})

export type Messages = z.infer<typeof MessagesSchema>

/////////////////////////////////////////
// PERSONS SCHEMA
/////////////////////////////////////////

export const PersonsSchema = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().nullable(),
  account_id: z.string().uuid().nullable(),
  email: z.string().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Persons = z.infer<typeof PersonsSchema>

/////////////////////////////////////////
// PLACE LEVELS SCHEMA
/////////////////////////////////////////

export const Place_levelsSchema = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  name_singular: z.string().nullable(),
  name_plural: z.string().nullable(),
  name_short: z.string().nullable(),
  reports: z.boolean().nullable(),
  report_values: z.boolean().nullable(),
  actions: z.boolean().nullable(),
  action_values: z.boolean().nullable(),
  action_reports: z.boolean().nullable(),
  checks: z.boolean().nullable(),
  check_values: z.boolean().nullable(),
  check_taxa: z.boolean().nullable(),
  observations: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Place_levels = z.infer<typeof Place_levelsSchema>

/////////////////////////////////////////
// PROJECT USERS SCHEMA
/////////////////////////////////////////

export const Project_usersSchema = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  user_id: z.string().uuid().nullable(),
  role: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Project_users = z.infer<typeof Project_usersSchema>

/////////////////////////////////////////
// PROJECTS SCHEMA
/////////////////////////////////////////

export const ProjectsSchema = z.object({
  type: project_typeSchema.nullable(),
  project_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  label: z.string().nullable(),
  subproject_name_singular: z.string().nullable(),
  subproject_name_plural: z.string().nullable(),
  subproject_order_by: z.string().nullable(),
  places_label_by: z.string().nullable(),
  places_order_by: NullableJsonValue.optional(),
  persons_label_by: z.string().nullable(),
  persons_order_by: z.string().nullable(),
  goal_reports_label_by: z.string().nullable(),
  goal_reports_order_by: z.string().nullable(),
  values_on_multiple_levels: z.string().nullable(),
  multiple_action_values_on_same_level: z.string().nullable(),
  multiple_check_values_on_same_level: z.string().nullable(),
  data: NullableJsonValue.optional(),
  files_offline: z.boolean().nullable(),
  files_active_projects: z.boolean().nullable(),
  files_active_subprojects: z.boolean().nullable(),
  files_active_places: z.boolean().nullable(),
  files_active_actions: z.boolean().nullable(),
  files_active_checks: z.boolean().nullable(),
  deleted: z.boolean().nullable(),
})

export type Projects = z.infer<typeof ProjectsSchema>

/////////////////////////////////////////
// SUBPROJECTS SCHEMA
/////////////////////////////////////////

export const SubprojectsSchema = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  data: NullableJsonValue.optional(),
  deleted: z.boolean().nullable(),
})

export type Subprojects = z.infer<typeof SubprojectsSchema>

/////////////////////////////////////////
// TAXA SCHEMA
/////////////////////////////////////////

export const TaxaSchema = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  taxonomy_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  id_in_source: z.string().nullable(),
  url: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Taxa = z.infer<typeof TaxaSchema>

/////////////////////////////////////////
// TAXONOMIES SCHEMA
/////////////////////////////////////////

export const TaxonomiesSchema = z.object({
  type: taxonomy_typeSchema.nullable(),
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  url: z.string().nullable(),
  obsolete: z.boolean().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Taxonomies = z.infer<typeof TaxonomiesSchema>

/////////////////////////////////////////
// UI OPTIONS SCHEMA
/////////////////////////////////////////

export const Ui_optionsSchema = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  designing: z.boolean().nullable(),
  breadcrumbs_overflowing: z.boolean().nullable(),
  navs_overflowing: z.boolean().nullable(),
  tabs: NullableJsonValue.optional(),
  show_map: z.boolean().nullable(),
  map_bounds: NullableJsonValue.optional(),
  local_map_show: NullableJsonValue.optional(),
  tile_layer_sorter: z.string().nullable(),
  vector_layer_sorter: z.string().nullable(),
  editing_place_geometry: z.string().uuid().nullable(),
  editing_check_geometry: z.string().uuid().nullable(),
  editing_action_geometry: z.string().uuid().nullable(),
  label: z.string().nullable(),
})

export type Ui_options = z.infer<typeof Ui_optionsSchema>

/////////////////////////////////////////
// USER MESSAGES SCHEMA
/////////////////////////////////////////

export const User_messagesSchema = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  user_id: z.string().uuid().nullable(),
  message_id: z.string().uuid().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  read: z.boolean().nullable(),
})

export type User_messages = z.infer<typeof User_messagesSchema>

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

export const UsersSchema = z.object({
  user_id: z.string().uuid(),
  email: z.string().nullable(),
  auth_id: z.string().uuid().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Users = z.infer<typeof UsersSchema>

/////////////////////////////////////////
// WIDGET TYPES SCHEMA
/////////////////////////////////////////

export const Widget_typesSchema = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().nullable(),
  needs_list: z.boolean().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  comment: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Widget_types = z.infer<typeof Widget_typesSchema>

/////////////////////////////////////////
// WIDGETS FOR FIELDS SCHEMA
/////////////////////////////////////////

export const Widgets_for_fieldsSchema = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().nullable(),
  widget_type_id: z.string().uuid().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Widgets_for_fields = z.infer<typeof Widgets_for_fieldsSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNTS
//------------------------------------------------------

export const AccountsIncludeSchema: z.ZodType<Prisma.AccountsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsFindManyArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AccountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AccountsArgsSchema: z.ZodType<Prisma.AccountsArgs> = z.object({
  select: z.lazy(() => AccountsSelectSchema).optional(),
  include: z.lazy(() => AccountsIncludeSchema).optional(),
}).strict();

export const AccountsCountOutputTypeArgsSchema: z.ZodType<Prisma.AccountsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => AccountsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AccountsCountOutputTypeSelectSchema: z.ZodType<Prisma.AccountsCountOutputTypeSelect> = z.object({
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
  gbif_taxa: z.boolean().optional(),
  lists: z.boolean().optional(),
  persons: z.boolean().optional(),
  place_levels: z.boolean().optional(),
  project_users: z.boolean().optional(),
  projects: z.boolean().optional(),
  subprojects: z.boolean().optional(),
  taxa: z.boolean().optional(),
  taxonomies: z.boolean().optional(),
  ui_options: z.boolean().optional(),
  user_messages: z.boolean().optional(),
}).strict();

export const AccountsSelectSchema: z.ZodType<Prisma.AccountsSelect> = z.object({
  account_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  type: z.boolean().optional(),
  period_start: z.boolean().optional(),
  period_end: z.boolean().optional(),
  projects_label_by: z.boolean().optional(),
  label: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsFindManyArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AccountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FIELD TYPES
//------------------------------------------------------

export const Field_typesIncludeSchema: z.ZodType<Prisma.Field_typesInclude> = z.object({
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Field_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Field_typesArgsSchema: z.ZodType<Prisma.Field_typesArgs> = z.object({
  select: z.lazy(() => Field_typesSelectSchema).optional(),
  include: z.lazy(() => Field_typesIncludeSchema).optional(),
}).strict();

export const Field_typesCountOutputTypeArgsSchema: z.ZodType<Prisma.Field_typesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Field_typesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Field_typesCountOutputTypeSelectSchema: z.ZodType<Prisma.Field_typesCountOutputTypeSelect> = z.object({
  widgets_for_fields: z.boolean().optional(),
}).strict();

export const Field_typesSelectSchema: z.ZodType<Prisma.Field_typesSelect> = z.object({
  field_type_id: z.boolean().optional(),
  name: z.boolean().optional(),
  sort: z.boolean().optional(),
  comment: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Field_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// GBIF OCCURRENCE DOWNLOADS
//------------------------------------------------------

export const Gbif_occurrence_downloadsIncludeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

export const Gbif_occurrence_downloadsArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsArgs> = z.object({
  select: z.lazy(() => Gbif_occurrence_downloadsSelectSchema).optional(),
  include: z.lazy(() => Gbif_occurrence_downloadsIncludeSchema).optional(),
}).strict();

export const Gbif_occurrence_downloadsSelectSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsSelect> = z.object({
  gbif_occurrence_download_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  gbif_table: z.boolean().optional(),
  filters: z.boolean().optional(),
  created_time: z.boolean().optional(),
  download_key: z.boolean().optional(),
  error: z.boolean().optional(),
  inserted_time: z.boolean().optional(),
  inserted_count: z.boolean().optional(),
  attribution: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

// GBIF OCCURRENCES
//------------------------------------------------------

export const Gbif_occurrencesIncludeSchema: z.ZodType<Prisma.Gbif_occurrencesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

export const Gbif_occurrencesArgsSchema: z.ZodType<Prisma.Gbif_occurrencesArgs> = z.object({
  select: z.lazy(() => Gbif_occurrencesSelectSchema).optional(),
  include: z.lazy(() => Gbif_occurrencesIncludeSchema).optional(),
}).strict();

export const Gbif_occurrencesSelectSchema: z.ZodType<Prisma.Gbif_occurrencesSelect> = z.object({
  gbif_occurrence_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  gbif_data: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

// GBIF TAXA
//------------------------------------------------------

export const Gbif_taxaIncludeSchema: z.ZodType<Prisma.Gbif_taxaInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const Gbif_taxaArgsSchema: z.ZodType<Prisma.Gbif_taxaArgs> = z.object({
  select: z.lazy(() => Gbif_taxaSelectSchema).optional(),
  include: z.lazy(() => Gbif_taxaIncludeSchema).optional(),
}).strict();

export const Gbif_taxaSelectSchema: z.ZodType<Prisma.Gbif_taxaSelect> = z.object({
  gbif_taxon_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  gbif_data: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// LISTS
//------------------------------------------------------

export const ListsIncludeSchema: z.ZodType<Prisma.ListsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const ListsArgsSchema: z.ZodType<Prisma.ListsArgs> = z.object({
  select: z.lazy(() => ListsSelectSchema).optional(),
  include: z.lazy(() => ListsIncludeSchema).optional(),
}).strict();

export const ListsSelectSchema: z.ZodType<Prisma.ListsSelect> = z.object({
  list_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  name: z.boolean().optional(),
  data: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// MESSAGES
//------------------------------------------------------

export const MessagesIncludeSchema: z.ZodType<Prisma.MessagesInclude> = z.object({
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessagesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MessagesArgsSchema: z.ZodType<Prisma.MessagesArgs> = z.object({
  select: z.lazy(() => MessagesSelectSchema).optional(),
  include: z.lazy(() => MessagesIncludeSchema).optional(),
}).strict();

export const MessagesCountOutputTypeArgsSchema: z.ZodType<Prisma.MessagesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => MessagesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MessagesCountOutputTypeSelectSchema: z.ZodType<Prisma.MessagesCountOutputTypeSelect> = z.object({
  user_messages: z.boolean().optional(),
}).strict();

export const MessagesSelectSchema: z.ZodType<Prisma.MessagesSelect> = z.object({
  message_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  date: z.boolean().optional(),
  message: z.boolean().optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessagesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PERSONS
//------------------------------------------------------

export const PersonsIncludeSchema: z.ZodType<Prisma.PersonsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const PersonsArgsSchema: z.ZodType<Prisma.PersonsArgs> = z.object({
  select: z.lazy(() => PersonsSelectSchema).optional(),
  include: z.lazy(() => PersonsIncludeSchema).optional(),
}).strict();

export const PersonsSelectSchema: z.ZodType<Prisma.PersonsSelect> = z.object({
  person_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  email: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// PLACE LEVELS
//------------------------------------------------------

export const Place_levelsIncludeSchema: z.ZodType<Prisma.Place_levelsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const Place_levelsArgsSchema: z.ZodType<Prisma.Place_levelsArgs> = z.object({
  select: z.lazy(() => Place_levelsSelectSchema).optional(),
  include: z.lazy(() => Place_levelsIncludeSchema).optional(),
}).strict();

export const Place_levelsSelectSchema: z.ZodType<Prisma.Place_levelsSelect> = z.object({
  place_level_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  level: z.boolean().optional(),
  name_singular: z.boolean().optional(),
  name_plural: z.boolean().optional(),
  name_short: z.boolean().optional(),
  reports: z.boolean().optional(),
  report_values: z.boolean().optional(),
  actions: z.boolean().optional(),
  action_values: z.boolean().optional(),
  action_reports: z.boolean().optional(),
  checks: z.boolean().optional(),
  check_values: z.boolean().optional(),
  check_taxa: z.boolean().optional(),
  observations: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// PROJECT USERS
//------------------------------------------------------

export const Project_usersIncludeSchema: z.ZodType<Prisma.Project_usersInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Project_usersArgsSchema: z.ZodType<Prisma.Project_usersArgs> = z.object({
  select: z.lazy(() => Project_usersSelectSchema).optional(),
  include: z.lazy(() => Project_usersIncludeSchema).optional(),
}).strict();

export const Project_usersSelectSchema: z.ZodType<Prisma.Project_usersSelect> = z.object({
  project_user_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  role: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// PROJECTS
//------------------------------------------------------

export const ProjectsIncludeSchema: z.ZodType<Prisma.ProjectsInclude> = z.object({
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectsArgsSchema: z.ZodType<Prisma.ProjectsArgs> = z.object({
  select: z.lazy(() => ProjectsSelectSchema).optional(),
  include: z.lazy(() => ProjectsIncludeSchema).optional(),
}).strict();

export const ProjectsCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ProjectsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectsCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectsCountOutputTypeSelect> = z.object({
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
  gbif_taxa: z.boolean().optional(),
  lists: z.boolean().optional(),
  persons: z.boolean().optional(),
  place_levels: z.boolean().optional(),
  project_users: z.boolean().optional(),
  subprojects: z.boolean().optional(),
  taxonomies: z.boolean().optional(),
}).strict();

export const ProjectsSelectSchema: z.ZodType<Prisma.ProjectsSelect> = z.object({
  project_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  name: z.boolean().optional(),
  label: z.boolean().optional(),
  type: z.boolean().optional(),
  subproject_name_singular: z.boolean().optional(),
  subproject_name_plural: z.boolean().optional(),
  subproject_order_by: z.boolean().optional(),
  places_label_by: z.boolean().optional(),
  places_order_by: z.boolean().optional(),
  persons_label_by: z.boolean().optional(),
  persons_order_by: z.boolean().optional(),
  goal_reports_label_by: z.boolean().optional(),
  goal_reports_order_by: z.boolean().optional(),
  values_on_multiple_levels: z.boolean().optional(),
  multiple_action_values_on_same_level: z.boolean().optional(),
  multiple_check_values_on_same_level: z.boolean().optional(),
  data: z.boolean().optional(),
  files_offline: z.boolean().optional(),
  files_active_projects: z.boolean().optional(),
  files_active_subprojects: z.boolean().optional(),
  files_active_places: z.boolean().optional(),
  files_active_actions: z.boolean().optional(),
  files_active_checks: z.boolean().optional(),
  deleted: z.boolean().optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SUBPROJECTS
//------------------------------------------------------

export const SubprojectsIncludeSchema: z.ZodType<Prisma.SubprojectsInclude> = z.object({
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubprojectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SubprojectsArgsSchema: z.ZodType<Prisma.SubprojectsArgs> = z.object({
  select: z.lazy(() => SubprojectsSelectSchema).optional(),
  include: z.lazy(() => SubprojectsIncludeSchema).optional(),
}).strict();

export const SubprojectsCountOutputTypeArgsSchema: z.ZodType<Prisma.SubprojectsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => SubprojectsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SubprojectsCountOutputTypeSelectSchema: z.ZodType<Prisma.SubprojectsCountOutputTypeSelect> = z.object({
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
}).strict();

export const SubprojectsSelectSchema: z.ZodType<Prisma.SubprojectsSelect> = z.object({
  subproject_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  name: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  start_year: z.boolean().optional(),
  end_year: z.boolean().optional(),
  data: z.boolean().optional(),
  deleted: z.boolean().optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubprojectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAXA
//------------------------------------------------------

export const TaxaIncludeSchema: z.ZodType<Prisma.TaxaInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesArgsSchema)]).optional(),
}).strict()

export const TaxaArgsSchema: z.ZodType<Prisma.TaxaArgs> = z.object({
  select: z.lazy(() => TaxaSelectSchema).optional(),
  include: z.lazy(() => TaxaIncludeSchema).optional(),
}).strict();

export const TaxaSelectSchema: z.ZodType<Prisma.TaxaSelect> = z.object({
  taxon_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  taxonomy_id: z.boolean().optional(),
  name: z.boolean().optional(),
  id_in_source: z.boolean().optional(),
  url: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesArgsSchema)]).optional(),
}).strict()

// TAXONOMIES
//------------------------------------------------------

export const TaxonomiesIncludeSchema: z.ZodType<Prisma.TaxonomiesInclude> = z.object({
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxonomiesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaxonomiesArgsSchema: z.ZodType<Prisma.TaxonomiesArgs> = z.object({
  select: z.lazy(() => TaxonomiesSelectSchema).optional(),
  include: z.lazy(() => TaxonomiesIncludeSchema).optional(),
}).strict();

export const TaxonomiesCountOutputTypeArgsSchema: z.ZodType<Prisma.TaxonomiesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaxonomiesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaxonomiesCountOutputTypeSelectSchema: z.ZodType<Prisma.TaxonomiesCountOutputTypeSelect> = z.object({
  taxa: z.boolean().optional(),
}).strict();

export const TaxonomiesSelectSchema: z.ZodType<Prisma.TaxonomiesSelect> = z.object({
  taxonomy_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  type: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxonomiesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// UI OPTIONS
//------------------------------------------------------

export const Ui_optionsIncludeSchema: z.ZodType<Prisma.Ui_optionsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Ui_optionsArgsSchema: z.ZodType<Prisma.Ui_optionsArgs> = z.object({
  select: z.lazy(() => Ui_optionsSelectSchema).optional(),
  include: z.lazy(() => Ui_optionsIncludeSchema).optional(),
}).strict();

export const Ui_optionsSelectSchema: z.ZodType<Prisma.Ui_optionsSelect> = z.object({
  user_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  designing: z.boolean().optional(),
  breadcrumbs_overflowing: z.boolean().optional(),
  navs_overflowing: z.boolean().optional(),
  tabs: z.boolean().optional(),
  show_map: z.boolean().optional(),
  map_bounds: z.boolean().optional(),
  local_map_show: z.boolean().optional(),
  tile_layer_sorter: z.boolean().optional(),
  vector_layer_sorter: z.boolean().optional(),
  editing_place_geometry: z.boolean().optional(),
  editing_check_geometry: z.boolean().optional(),
  editing_action_geometry: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USER MESSAGES
//------------------------------------------------------

export const User_messagesIncludeSchema: z.ZodType<Prisma.User_messagesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessagesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const User_messagesArgsSchema: z.ZodType<Prisma.User_messagesArgs> = z.object({
  select: z.lazy(() => User_messagesSelectSchema).optional(),
  include: z.lazy(() => User_messagesIncludeSchema).optional(),
}).strict();

export const User_messagesSelectSchema: z.ZodType<Prisma.User_messagesSelect> = z.object({
  user_message_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  message_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  read: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessagesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USERS
//------------------------------------------------------

export const UsersIncludeSchema: z.ZodType<Prisma.UsersInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UsersArgsSchema: z.ZodType<Prisma.UsersArgs> = z.object({
  select: z.lazy(() => UsersSelectSchema).optional(),
  include: z.lazy(() => UsersIncludeSchema).optional(),
}).strict();

export const UsersCountOutputTypeArgsSchema: z.ZodType<Prisma.UsersCountOutputTypeArgs> = z.object({
  select: z.lazy(() => UsersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UsersCountOutputTypeSelectSchema: z.ZodType<Prisma.UsersCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  project_users: z.boolean().optional(),
  user_messages: z.boolean().optional(),
}).strict();

export const UsersSelectSchema: z.ZodType<Prisma.UsersSelect> = z.object({
  user_id: z.boolean().optional(),
  email: z.boolean().optional(),
  auth_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WIDGET TYPES
//------------------------------------------------------

export const Widget_typesIncludeSchema: z.ZodType<Prisma.Widget_typesInclude> = z.object({
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Widget_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Widget_typesArgsSchema: z.ZodType<Prisma.Widget_typesArgs> = z.object({
  select: z.lazy(() => Widget_typesSelectSchema).optional(),
  include: z.lazy(() => Widget_typesIncludeSchema).optional(),
}).strict();

export const Widget_typesCountOutputTypeArgsSchema: z.ZodType<Prisma.Widget_typesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Widget_typesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Widget_typesCountOutputTypeSelectSchema: z.ZodType<Prisma.Widget_typesCountOutputTypeSelect> = z.object({
  widgets_for_fields: z.boolean().optional(),
}).strict();

export const Widget_typesSelectSchema: z.ZodType<Prisma.Widget_typesSelect> = z.object({
  widget_type_id: z.boolean().optional(),
  name: z.boolean().optional(),
  needs_list: z.boolean().optional(),
  sort: z.boolean().optional(),
  comment: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Widget_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WIDGETS FOR FIELDS
//------------------------------------------------------

export const Widgets_for_fieldsIncludeSchema: z.ZodType<Prisma.Widgets_for_fieldsInclude> = z.object({
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()

export const Widgets_for_fieldsArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsArgs> = z.object({
  select: z.lazy(() => Widgets_for_fieldsSelectSchema).optional(),
  include: z.lazy(() => Widgets_for_fieldsIncludeSchema).optional(),
}).strict();

export const Widgets_for_fieldsSelectSchema: z.ZodType<Prisma.Widgets_for_fieldsSelect> = z.object({
  widget_for_field_id: z.boolean().optional(),
  field_type_id: z.boolean().optional(),
  widget_type_id: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountsWhereInputSchema: z.ZodType<Prisma.AccountsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsWhereInputSchema),z.lazy(() => AccountsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsWhereInputSchema),z.lazy(() => AccountsWhereInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListsListRelationFilterSchema).optional(),
  persons: z.lazy(() => PersonsListRelationFilterSchema).optional(),
  place_levels: z.lazy(() => Place_levelsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectsListRelationFilterSchema).optional(),
  subprojects: z.lazy(() => SubprojectsListRelationFilterSchema).optional(),
  taxa: z.lazy(() => TaxaListRelationFilterSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesListRelationFilterSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsListRelationFilterSchema).optional(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional()
}).strict();

export const AccountsOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountsOrderByWithRelationInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaOrderByRelationAggregateInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByRelationAggregateInputSchema).optional(),
  persons: z.lazy(() => PersonsOrderByRelationAggregateInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByRelationAggregateInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByRelationAggregateInputSchema).optional(),
  taxa: z.lazy(() => TaxaOrderByRelationAggregateInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByRelationAggregateInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsOrderByRelationAggregateInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AccountsWhereUniqueInputSchema: z.ZodType<Prisma.AccountsWhereUniqueInput> = z.object({
  account_id: z.string().uuid().optional()
}).strict();

export const AccountsOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountsOrderByWithAggregationInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountsMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Field_typesWhereInputSchema: z.ZodType<Prisma.Field_typesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Field_typesWhereInputSchema),z.lazy(() => Field_typesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Field_typesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Field_typesWhereInputSchema),z.lazy(() => Field_typesWhereInputSchema).array() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsListRelationFilterSchema).optional()
}).strict();

export const Field_typesOrderByWithRelationInputSchema: z.ZodType<Prisma.Field_typesOrderByWithRelationInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Field_typesWhereUniqueInputSchema: z.ZodType<Prisma.Field_typesWhereUniqueInput> = z.object({
  field_type_id: z.string().uuid().optional()
}).strict();

export const Field_typesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Field_typesOrderByWithAggregationInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Field_typesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Field_typesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Field_typesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Field_typesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Field_typesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Field_typesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Field_typesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsWhereInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByWithRelationInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsWhereUniqueInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid().optional()
}).strict();

export const Gbif_occurrence_downloadsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByWithAggregationInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_occurrence_downloadsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Gbif_occurrence_downloadsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_occurrence_downloadsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_occurrence_downloadsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Gbif_occurrence_downloadsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableWithAggregatesFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesWhereInputSchema: z.ZodType<Prisma.Gbif_occurrencesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesWhereInputSchema),z.lazy(() => Gbif_occurrencesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesWhereInputSchema),z.lazy(() => Gbif_occurrencesWhereInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByWithRelationInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_occurrencesWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_occurrencesWhereUniqueInput> = z.object({
  gbif_occurrence_id: z.string().uuid().optional()
}).strict();

export const Gbif_occurrencesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByWithAggregationInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_occurrencesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_occurrencesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_occurrencesMinOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_occurrencesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_occurrencesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Gbif_taxaWhereInputSchema: z.ZodType<Prisma.Gbif_taxaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaWhereInputSchema),z.lazy(() => Gbif_taxaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaWhereInputSchema),z.lazy(() => Gbif_taxaWhereInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByWithRelationInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_taxaWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_taxaWhereUniqueInput> = z.object({
  gbif_taxon_id: z.string().uuid().optional()
}).strict();

export const Gbif_taxaOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByWithAggregationInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_taxaCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_taxaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_taxaMinOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_taxaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_taxaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListsWhereInputSchema: z.ZodType<Prisma.ListsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListsWhereInputSchema),z.lazy(() => ListsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsWhereInputSchema),z.lazy(() => ListsWhereInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ListsOrderByWithRelationInputSchema: z.ZodType<Prisma.ListsOrderByWithRelationInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const ListsWhereUniqueInputSchema: z.ZodType<Prisma.ListsWhereUniqueInput> = z.object({
  list_id: z.string().uuid().optional()
}).strict();

export const ListsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListsOrderByWithAggregationInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ListsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ListsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListsScalarWhereWithAggregatesInputSchema),z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsScalarWhereWithAggregatesInputSchema),z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const MessagesWhereInputSchema: z.ZodType<Prisma.MessagesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessagesWhereInputSchema),z.lazy(() => MessagesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessagesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessagesWhereInputSchema),z.lazy(() => MessagesWhereInputSchema).array() ]).optional(),
  message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional()
}).strict();

export const MessagesOrderByWithRelationInputSchema: z.ZodType<Prisma.MessagesOrderByWithRelationInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MessagesWhereUniqueInputSchema: z.ZodType<Prisma.MessagesWhereUniqueInput> = z.object({
  message_id: z.string().uuid().optional()
}).strict();

export const MessagesOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessagesOrderByWithAggregationInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessagesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessagesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessagesMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessagesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessagesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema),z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema),z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  message_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const PersonsWhereInputSchema: z.ZodType<Prisma.PersonsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsWhereInputSchema),z.lazy(() => PersonsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsWhereInputSchema),z.lazy(() => PersonsWhereInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsOrderByWithRelationInputSchema: z.ZodType<Prisma.PersonsOrderByWithRelationInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const PersonsWhereUniqueInputSchema: z.ZodType<Prisma.PersonsWhereUniqueInput> = z.object({
  person_id: z.string().uuid().optional()
}).strict();

export const PersonsOrderByWithAggregationInputSchema: z.ZodType<Prisma.PersonsOrderByWithAggregationInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PersonsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PersonsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PersonsMinOrderByAggregateInputSchema).optional()
}).strict();

export const PersonsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PersonsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema),z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema),z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Place_levelsWhereInputSchema: z.ZodType<Prisma.Place_levelsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsWhereInputSchema),z.lazy(() => Place_levelsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsWhereInputSchema),z.lazy(() => Place_levelsWhereInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsOrderByWithRelationInputSchema: z.ZodType<Prisma.Place_levelsOrderByWithRelationInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Place_levelsWhereUniqueInputSchema: z.ZodType<Prisma.Place_levelsWhereUniqueInput> = z.object({
  place_level_id: z.string().uuid().optional()
}).strict();

export const Place_levelsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Place_levelsOrderByWithAggregationInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Place_levelsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Place_levelsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Place_levelsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Place_levelsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Place_levelsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Place_levelsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Place_levelsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema),z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema),z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_usersWhereInputSchema: z.ZodType<Prisma.Project_usersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersWhereInputSchema),z.lazy(() => Project_usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersWhereInputSchema),z.lazy(() => Project_usersWhereInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersOrderByWithRelationInputSchema: z.ZodType<Prisma.Project_usersOrderByWithRelationInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Project_usersWhereUniqueInputSchema: z.ZodType<Prisma.Project_usersWhereUniqueInput> = z.object({
  project_user_id: z.string().uuid().optional()
}).strict();

export const Project_usersOrderByWithAggregationInputSchema: z.ZodType<Prisma.Project_usersOrderByWithAggregationInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Project_usersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Project_usersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Project_usersMinOrderByAggregateInputSchema).optional()
}).strict();

export const Project_usersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Project_usersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ProjectsWhereInputSchema: z.ZodType<Prisma.ProjectsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsWhereInputSchema),z.lazy(() => ProjectsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsWhereInputSchema),z.lazy(() => ProjectsWhereInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListsListRelationFilterSchema).optional(),
  persons: z.lazy(() => PersonsListRelationFilterSchema).optional(),
  place_levels: z.lazy(() => Place_levelsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.lazy(() => SubprojectsListRelationFilterSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesListRelationFilterSchema).optional()
}).strict();

export const ProjectsOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectsOrderByWithRelationInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaOrderByRelationAggregateInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByRelationAggregateInputSchema).optional(),
  persons: z.lazy(() => PersonsOrderByRelationAggregateInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByRelationAggregateInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectsWhereUniqueInputSchema: z.ZodType<Prisma.ProjectsWhereUniqueInput> = z.object({
  project_id: z.string().uuid().optional()
}).strict();

export const ProjectsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectsOrderByWithAggregationInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableWithAggregatesFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SubprojectsWhereInputSchema: z.ZodType<Prisma.SubprojectsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsWhereInputSchema),z.lazy(() => SubprojectsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsWhereInputSchema),z.lazy(() => SubprojectsWhereInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsOrderByWithRelationInputSchema: z.ZodType<Prisma.SubprojectsOrderByWithRelationInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const SubprojectsWhereUniqueInputSchema: z.ZodType<Prisma.SubprojectsWhereUniqueInput> = z.object({
  subproject_id: z.string().uuid().optional()
}).strict();

export const SubprojectsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SubprojectsOrderByWithAggregationInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SubprojectsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SubprojectsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SubprojectsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SubprojectsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SubprojectsSumOrderByAggregateInputSchema).optional()
}).strict();

export const SubprojectsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SubprojectsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema),z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema),z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxaWhereInputSchema: z.ZodType<Prisma.TaxaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaWhereInputSchema),z.lazy(() => TaxaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaWhereInputSchema),z.lazy(() => TaxaWhereInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  taxonomies: z.union([ z.lazy(() => TaxonomiesRelationFilterSchema),z.lazy(() => TaxonomiesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaOrderByWithRelationInputSchema: z.ZodType<Prisma.TaxaOrderByWithRelationInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByWithRelationInputSchema).optional()
}).strict();

export const TaxaWhereUniqueInputSchema: z.ZodType<Prisma.TaxaWhereUniqueInput> = z.object({
  taxon_id: z.string().uuid().optional()
}).strict();

export const TaxaOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaxaOrderByWithAggregationInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaxaCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaxaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaxaMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaxaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaxaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxonomiesWhereInputSchema: z.ZodType<Prisma.TaxonomiesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesWhereInputSchema),z.lazy(() => TaxonomiesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesWhereInputSchema),z.lazy(() => TaxonomiesWhereInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  taxa: z.lazy(() => TaxaListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesOrderByWithRelationInputSchema: z.ZodType<Prisma.TaxonomiesOrderByWithRelationInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  taxa: z.lazy(() => TaxaOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const TaxonomiesWhereUniqueInputSchema: z.ZodType<Prisma.TaxonomiesWhereUniqueInput> = z.object({
  taxonomy_id: z.string().uuid().optional()
}).strict();

export const TaxonomiesOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaxonomiesOrderByWithAggregationInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaxonomiesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaxonomiesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaxonomiesMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaxonomiesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaxonomiesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableWithAggregatesFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Ui_optionsWhereInputSchema: z.ZodType<Prisma.Ui_optionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsWhereInputSchema),z.lazy(() => Ui_optionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsWhereInputSchema),z.lazy(() => Ui_optionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const Ui_optionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Ui_optionsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Ui_optionsWhereUniqueInputSchema: z.ZodType<Prisma.Ui_optionsWhereUniqueInput> = z.object({
  user_id: z.string().uuid().optional()
}).strict();

export const Ui_optionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Ui_optionsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Ui_optionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Ui_optionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Ui_optionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Ui_optionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Ui_optionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const User_messagesWhereInputSchema: z.ZodType<Prisma.User_messagesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesWhereInputSchema),z.lazy(() => User_messagesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesWhereInputSchema),z.lazy(() => User_messagesWhereInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => MessagesRelationFilterSchema),z.lazy(() => MessagesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesOrderByWithRelationInputSchema: z.ZodType<Prisma.User_messagesOrderByWithRelationInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  messages: z.lazy(() => MessagesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const User_messagesWhereUniqueInputSchema: z.ZodType<Prisma.User_messagesWhereUniqueInput> = z.object({
  user_message_id: z.string().uuid().optional()
}).strict();

export const User_messagesOrderByWithAggregationInputSchema: z.ZodType<Prisma.User_messagesOrderByWithAggregationInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => User_messagesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => User_messagesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => User_messagesMinOrderByAggregateInputSchema).optional()
}).strict();

export const User_messagesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.User_messagesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema),z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema),z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const UsersWhereInputSchema: z.ZodType<Prisma.UsersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  ui_options: z.union([ z.lazy(() => Ui_optionsRelationFilterSchema),z.lazy(() => Ui_optionsWhereInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional()
}).strict();

export const UsersOrderByWithRelationInputSchema: z.ZodType<Prisma.UsersOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsOrderByWithRelationInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UsersWhereUniqueInputSchema: z.ZodType<Prisma.UsersWhereUniqueInput> = z.object({
  user_id: z.string().uuid().optional()
}).strict();

export const UsersOrderByWithAggregationInputSchema: z.ZodType<Prisma.UsersOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UsersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UsersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UsersMinOrderByAggregateInputSchema).optional()
}).strict();

export const UsersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UsersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  auth_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Widget_typesWhereInputSchema: z.ZodType<Prisma.Widget_typesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widget_typesWhereInputSchema),z.lazy(() => Widget_typesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widget_typesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widget_typesWhereInputSchema),z.lazy(() => Widget_typesWhereInputSchema).array() ]).optional(),
  widget_type_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  needs_list: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsListRelationFilterSchema).optional()
}).strict();

export const Widget_typesOrderByWithRelationInputSchema: z.ZodType<Prisma.Widget_typesOrderByWithRelationInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Widget_typesWhereUniqueInputSchema: z.ZodType<Prisma.Widget_typesWhereUniqueInput> = z.object({
  widget_type_id: z.string().uuid().optional()
}).strict();

export const Widget_typesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Widget_typesOrderByWithAggregationInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Widget_typesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Widget_typesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Widget_typesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Widget_typesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Widget_typesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Widget_typesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Widget_typesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  widget_type_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  needs_list: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsWhereInputSchema: z.ZodType<Prisma.Widgets_for_fieldsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsWhereInputSchema),z.lazy(() => Widgets_for_fieldsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsWhereInputSchema),z.lazy(() => Widgets_for_fieldsWhereInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  field_types: z.union([ z.lazy(() => Field_typesRelationFilterSchema),z.lazy(() => Field_typesWhereInputSchema) ]).optional().nullable(),
  widget_types: z.union([ z.lazy(() => Widget_typesRelationFilterSchema),z.lazy(() => Widget_typesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsOrderByWithRelationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByWithRelationInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  field_types: z.lazy(() => Field_typesOrderByWithRelationInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesOrderByWithRelationInputSchema).optional()
}).strict();

export const Widgets_for_fieldsWhereUniqueInputSchema: z.ZodType<Prisma.Widgets_for_fieldsWhereUniqueInput> = z.object({
  widget_for_field_id: z.string().uuid().optional()
}).strict();

export const Widgets_for_fieldsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByWithAggregationInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Widgets_for_fieldsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Widgets_for_fieldsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Widgets_for_fieldsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Widgets_for_fieldsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const AccountsCreateInputSchema: z.ZodType<Prisma.AccountsCreateInput> = z.object({
  account_id: z.string().uuid(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateInput> = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUpdateInputSchema: z.ZodType<Prisma.AccountsUpdateInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsCreateManyInputSchema: z.ZodType<Prisma.AccountsCreateManyInput> = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const AccountsUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountsUpdateManyMutationInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Field_typesCreateInputSchema: z.ZodType<Prisma.Field_typesCreateInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUncheckedCreateInputSchema: z.ZodType<Prisma.Field_typesUncheckedCreateInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUpdateInputSchema: z.ZodType<Prisma.Field_typesUpdateInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesUncheckedUpdateInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesCreateManyInputSchema: z.ZodType<Prisma.Field_typesCreateManyInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Field_typesUpdateManyMutationInputSchema: z.ZodType<Prisma.Field_typesUpdateManyMutationInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Field_typesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateManyInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateManyInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyMutationInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesCreateInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesCreateManyInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyMutationInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaCreateInputSchema: z.ZodType<Prisma.Gbif_taxaCreateInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_taxaInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaUpdateInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_taxaNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaCreateManyInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyMutationInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsCreateInputSchema: z.ZodType<Prisma.ListsCreateInput> = z.object({
  list_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateInputSchema: z.ZodType<Prisma.ListsUncheckedCreateInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsUpdateInputSchema: z.ZodType<Prisma.ListsUpdateInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsCreateManyInputSchema: z.ZodType<Prisma.ListsCreateManyInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsUpdateManyMutationInputSchema: z.ZodType<Prisma.ListsUpdateManyMutationInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesCreateInputSchema: z.ZodType<Prisma.MessagesCreateInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutMessagesInputSchema).optional()
}).strict();

export const MessagesUncheckedCreateInputSchema: z.ZodType<Prisma.MessagesUncheckedCreateInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutMessagesInputSchema).optional()
}).strict();

export const MessagesUpdateInputSchema: z.ZodType<Prisma.MessagesUpdateInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessagesUncheckedUpdateInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessagesCreateManyInputSchema: z.ZodType<Prisma.MessagesCreateManyInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesUpdateManyMutationInputSchema: z.ZodType<Prisma.MessagesUpdateManyMutationInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateManyInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsCreateInputSchema: z.ZodType<Prisma.PersonsCreateInput> = z.object({
  person_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPersonsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsUpdateInputSchema: z.ZodType<Prisma.PersonsUpdateInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPersonsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsCreateManyInputSchema: z.ZodType<Prisma.PersonsCreateManyInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsUpdateManyMutationInputSchema: z.ZodType<Prisma.PersonsUpdateManyMutationInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsCreateInputSchema: z.ZodType<Prisma.Place_levelsCreateInput> = z.object({
  place_level_id: z.string().uuid(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlace_levelsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsUpdateInputSchema: z.ZodType<Prisma.Place_levelsUpdateInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlace_levelsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsCreateManyInputSchema: z.ZodType<Prisma.Place_levelsCreateManyInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsUpdateManyMutationInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyMutationInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersCreateInputSchema: z.ZodType<Prisma.Project_usersCreateInput> = z.object({
  project_user_id: z.string().uuid(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersUpdateInputSchema: z.ZodType<Prisma.Project_usersUpdateInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersCreateManyInputSchema: z.ZodType<Prisma.Project_usersCreateManyInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersUpdateManyMutationInputSchema: z.ZodType<Prisma.Project_usersUpdateManyMutationInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsCreateInputSchema: z.ZodType<Prisma.ProjectsCreateInput> = z.object({
  project_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateInput> = z.object({
  project_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUpdateInputSchema: z.ZodType<Prisma.ProjectsUpdateInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsCreateManyInputSchema: z.ZodType<Prisma.ProjectsCreateManyInput> = z.object({
  project_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ProjectsUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectsUpdateManyMutationInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsCreateInputSchema: z.ZodType<Prisma.SubprojectsCreateInput> = z.object({
  subproject_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUpdateInputSchema: z.ZodType<Prisma.SubprojectsUpdateInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsCreateManyInputSchema: z.ZodType<Prisma.SubprojectsCreateManyInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsUpdateManyMutationInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyMutationInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateInputSchema: z.ZodType<Prisma.TaxaCreateInput> = z.object({
  taxon_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxaInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaUpdateInputSchema: z.ZodType<Prisma.TaxaUpdateInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxaNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateManyInputSchema: z.ZodType<Prisma.TaxaCreateManyInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaUpdateManyMutationInputSchema: z.ZodType<Prisma.TaxaUpdateManyMutationInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesCreateInputSchema: z.ZodType<Prisma.TaxonomiesCreateInput> = z.object({
  taxonomy_id: z.string().uuid(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUpdateInputSchema: z.ZodType<Prisma.TaxonomiesUpdateInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesCreateManyInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesUpdateManyMutationInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyMutationInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsCreateInputSchema: z.ZodType<Prisma.Ui_optionsCreateInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUi_optionsInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUi_optionsInputSchema)
}).strict();

export const Ui_optionsUncheckedCreateInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateInput> = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsUpdateInputSchema: z.ZodType<Prisma.Ui_optionsUpdateInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUi_optionsNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsCreateManyInputSchema: z.ZodType<Prisma.Ui_optionsCreateManyInput> = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyMutationInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesCreateInputSchema: z.ZodType<Prisma.User_messagesCreateInput> = z.object({
  user_message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateInputSchema: z.ZodType<Prisma.User_messagesUpdateInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesCreateManyInputSchema: z.ZodType<Prisma.User_messagesCreateManyInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateManyMutationInputSchema: z.ZodType<Prisma.User_messagesUpdateManyMutationInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersCreateInputSchema: z.ZodType<Prisma.UsersCreateInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateInputSchema: z.ZodType<Prisma.UsersUncheckedCreateInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUpdateInputSchema: z.ZodType<Prisma.UsersUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersCreateManyInputSchema: z.ZodType<Prisma.UsersCreateManyInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const UsersUpdateManyMutationInputSchema: z.ZodType<Prisma.UsersUpdateManyMutationInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesCreateInputSchema: z.ZodType<Prisma.Widget_typesCreateInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUncheckedCreateInputSchema: z.ZodType<Prisma.Widget_typesUncheckedCreateInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUpdateInputSchema: z.ZodType<Prisma.Widget_typesUpdateInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesUncheckedUpdateInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesCreateManyInputSchema: z.ZodType<Prisma.Widget_typesCreateManyInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widget_typesUpdateManyMutationInputSchema: z.ZodType<Prisma.Widget_typesUpdateManyMutationInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateManyInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateManyInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateManyMutationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyMutationInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UsersRelationFilterSchema: z.ZodType<Prisma.UsersRelationFilter> = z.object({
  is: z.lazy(() => UsersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UsersWhereInputSchema).optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsListRelationFilterSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional()
}).strict();

export const Gbif_occurrencesListRelationFilterSchema: z.ZodType<Prisma.Gbif_occurrencesListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional()
}).strict();

export const Gbif_taxaListRelationFilterSchema: z.ZodType<Prisma.Gbif_taxaListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_taxaWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_taxaWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_taxaWhereInputSchema).optional()
}).strict();

export const ListsListRelationFilterSchema: z.ZodType<Prisma.ListsListRelationFilter> = z.object({
  every: z.lazy(() => ListsWhereInputSchema).optional(),
  some: z.lazy(() => ListsWhereInputSchema).optional(),
  none: z.lazy(() => ListsWhereInputSchema).optional()
}).strict();

export const PersonsListRelationFilterSchema: z.ZodType<Prisma.PersonsListRelationFilter> = z.object({
  every: z.lazy(() => PersonsWhereInputSchema).optional(),
  some: z.lazy(() => PersonsWhereInputSchema).optional(),
  none: z.lazy(() => PersonsWhereInputSchema).optional()
}).strict();

export const Place_levelsListRelationFilterSchema: z.ZodType<Prisma.Place_levelsListRelationFilter> = z.object({
  every: z.lazy(() => Place_levelsWhereInputSchema).optional(),
  some: z.lazy(() => Place_levelsWhereInputSchema).optional(),
  none: z.lazy(() => Place_levelsWhereInputSchema).optional()
}).strict();

export const Project_usersListRelationFilterSchema: z.ZodType<Prisma.Project_usersListRelationFilter> = z.object({
  every: z.lazy(() => Project_usersWhereInputSchema).optional(),
  some: z.lazy(() => Project_usersWhereInputSchema).optional(),
  none: z.lazy(() => Project_usersWhereInputSchema).optional()
}).strict();

export const ProjectsListRelationFilterSchema: z.ZodType<Prisma.ProjectsListRelationFilter> = z.object({
  every: z.lazy(() => ProjectsWhereInputSchema).optional(),
  some: z.lazy(() => ProjectsWhereInputSchema).optional(),
  none: z.lazy(() => ProjectsWhereInputSchema).optional()
}).strict();

export const SubprojectsListRelationFilterSchema: z.ZodType<Prisma.SubprojectsListRelationFilter> = z.object({
  every: z.lazy(() => SubprojectsWhereInputSchema).optional(),
  some: z.lazy(() => SubprojectsWhereInputSchema).optional(),
  none: z.lazy(() => SubprojectsWhereInputSchema).optional()
}).strict();

export const TaxaListRelationFilterSchema: z.ZodType<Prisma.TaxaListRelationFilter> = z.object({
  every: z.lazy(() => TaxaWhereInputSchema).optional(),
  some: z.lazy(() => TaxaWhereInputSchema).optional(),
  none: z.lazy(() => TaxaWhereInputSchema).optional()
}).strict();

export const TaxonomiesListRelationFilterSchema: z.ZodType<Prisma.TaxonomiesListRelationFilter> = z.object({
  every: z.lazy(() => TaxonomiesWhereInputSchema).optional(),
  some: z.lazy(() => TaxonomiesWhereInputSchema).optional(),
  none: z.lazy(() => TaxonomiesWhereInputSchema).optional()
}).strict();

export const Ui_optionsListRelationFilterSchema: z.ZodType<Prisma.Ui_optionsListRelationFilter> = z.object({
  every: z.lazy(() => Ui_optionsWhereInputSchema).optional(),
  some: z.lazy(() => Ui_optionsWhereInputSchema).optional(),
  none: z.lazy(() => Ui_optionsWhereInputSchema).optional()
}).strict();

export const User_messagesListRelationFilterSchema: z.ZodType<Prisma.User_messagesListRelationFilter> = z.object({
  every: z.lazy(() => User_messagesWhereInputSchema).optional(),
  some: z.lazy(() => User_messagesWhereInputSchema).optional(),
  none: z.lazy(() => User_messagesWhereInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PersonsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Place_levelsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Project_usersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SubprojectsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaxaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaxonomiesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Ui_optionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.User_messagesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsCountOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsMaxOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsMinOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsListRelationFilterSchema: z.ZodType<Prisma.Widgets_for_fieldsListRelationFilter> = z.object({
  every: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional(),
  some: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional(),
  none: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional()
}).strict();

export const Widgets_for_fieldsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesCountOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesMaxOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesMinOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const Enumgbif_tableNullableFilterSchema: z.ZodType<Prisma.Enumgbif_tableNullableFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const AccountsRelationFilterSchema: z.ZodType<Prisma.AccountsRelationFilter> = z.object({
  is: z.lazy(() => AccountsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AccountsWhereInputSchema).optional().nullable()
}).strict();

export const ProjectsRelationFilterSchema: z.ZodType<Prisma.ProjectsRelationFilter> = z.object({
  is: z.lazy(() => ProjectsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProjectsWhereInputSchema).optional().nullable()
}).strict();

export const SubprojectsRelationFilterSchema: z.ZodType<Prisma.SubprojectsRelationFilter> = z.object({
  is: z.lazy(() => SubprojectsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SubprojectsWhereInputSchema).optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCountOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsAvgOrderByAggregateInput> = z.object({
  inserted_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsMaxOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsMinOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsSumOrderByAggregateInput> = z.object({
  inserted_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumgbif_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumgbif_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const Gbif_occurrencesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesCountOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesMaxOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesMinOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaCountOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaMaxOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaMinOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListsCountOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListsMaxOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListsMinOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesCountOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesMaxOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesMinOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsCountOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsCountOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsMaxOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsMinOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsMinOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsCountOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsMaxOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsMinOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersCountOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersCountOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersMaxOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersMinOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersMinOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumproject_typeNullableFilterSchema: z.ZodType<Prisma.Enumproject_typeNullableFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ProjectsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsCountOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsMaxOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsMinOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumproject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumproject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional()
}).strict();

export const SubprojectsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsCountOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsAvgOrderByAggregateInput> = z.object({
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsMaxOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsMinOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsSumOrderByAggregateInput> = z.object({
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesRelationFilterSchema: z.ZodType<Prisma.TaxonomiesRelationFilter> = z.object({
  is: z.lazy(() => TaxonomiesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaxonomiesWhereInputSchema).optional().nullable()
}).strict();

export const TaxaCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaCountOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaMaxOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaMinOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtaxonomy_typeNullableFilterSchema: z.ZodType<Prisma.Enumtaxonomy_typeNullableFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesCountOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesMaxOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesMinOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtaxonomy_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumtaxonomy_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional()
}).strict();

export const Ui_optionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesRelationFilterSchema: z.ZodType<Prisma.MessagesRelationFilter> = z.object({
  is: z.lazy(() => MessagesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MessagesWhereInputSchema).optional().nullable()
}).strict();

export const User_messagesCountOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesCountOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesMaxOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesMinOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesMinOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsListRelationFilterSchema: z.ZodType<Prisma.AccountsListRelationFilter> = z.object({
  every: z.lazy(() => AccountsWhereInputSchema).optional(),
  some: z.lazy(() => AccountsWhereInputSchema).optional(),
  none: z.lazy(() => AccountsWhereInputSchema).optional()
}).strict();

export const Ui_optionsRelationFilterSchema: z.ZodType<Prisma.Ui_optionsRelationFilter> = z.object({
  is: z.lazy(() => Ui_optionsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Ui_optionsWhereInputSchema).optional().nullable()
}).strict();

export const AccountsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCountOrderByAggregateInputSchema: z.ZodType<Prisma.UsersCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMinOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesCountOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesMaxOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesMinOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesRelationFilterSchema: z.ZodType<Prisma.Field_typesRelationFilter> = z.object({
  is: z.lazy(() => Field_typesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Field_typesWhereInputSchema).optional().nullable()
}).strict();

export const Widget_typesRelationFilterSchema: z.ZodType<Prisma.Widget_typesRelationFilter> = z.object({
  is: z.lazy(() => Widget_typesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Widget_typesWhereInputSchema).optional().nullable()
}).strict();

export const Widgets_for_fieldsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCountOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widgets_for_fieldsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsMaxOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widgets_for_fieldsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsMinOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxaCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const UsersUpdateOneWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutAccountsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ListsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxaUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumgbif_tableFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumgbif_tableFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => gbif_tableSchema).optional().nullable()
}).strict();

export const AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_taxaInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_taxaInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutGbif_taxaNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_taxaInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutListsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutListsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutListsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutListsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutListsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutListsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutListsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutListsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutListsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutListsInputSchema) ]).optional(),
}).strict();

export const User_messagesCreateNestedManyWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutMessagesNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutMessagesNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutPersonsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPersonsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutPersonsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPersonsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutPersonsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutPersonsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPersonsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutPersonsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPersonsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutPersonsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutPersonsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPersonsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutPersonsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPersonsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutPlace_levelsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutPlace_levelsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutPlace_levelsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutPlace_levelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutPlace_levelsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlace_levelsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutPlace_levelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutPlace_levelsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumproject_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumproject_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => project_typeSchema).optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ListsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutProjectsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProjectsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutProjectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProjectsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutSubprojectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubprojectsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutSubprojectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutSubprojectsInputSchema) ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxaInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const TaxonomiesCreateNestedOneWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedOneWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxonomiesCreateOrConnectWithoutTaxaInputSchema).optional(),
  connect: z.lazy(() => TaxonomiesWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutTaxaNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxaInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutTaxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxaInputSchema) ]).optional(),
}).strict();

export const TaxonomiesUpdateOneWithoutTaxaNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateOneWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxonomiesCreateOrConnectWithoutTaxaInputSchema).optional(),
  upsert: z.lazy(() => TaxonomiesUpsertWithoutTaxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaxonomiesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutTaxaInputSchema) ]).optional(),
}).strict();

export const TaxaCreateNestedManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateNestedManyWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateNestedManyWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumtaxonomy_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => taxonomy_typeSchema).optional().nullable()
}).strict();

export const TaxaUpdateManyWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutTaxonomiesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxonomiesInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutTaxonomiesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema) ]).optional(),
}).strict();

export const TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutUi_optionsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUi_optionsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutUi_optionsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutUi_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutUi_optionsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUi_optionsInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUi_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUi_optionsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const MessagesCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessagesCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => MessagesWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const MessagesUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.MessagesUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessagesCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => MessagesUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => MessagesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MessagesUpdateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional()
}).strict();

export const User_messagesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.Ui_optionsUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => Ui_optionsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => Ui_optionsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateNestedOneWithoutWidgets_for_fieldsInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional()
}).strict();

export const Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional()
}).strict();

export const Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema: z.ZodType<Prisma.Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  upsert: z.lazy(() => Field_typesUpsertWithoutWidgets_for_fieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
}).strict();

export const Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema: z.ZodType<Prisma.Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  upsert: z.lazy(() => Widget_typesUpsertWithoutWidgets_for_fieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedEnumgbif_tableNullableFilterSchema: z.ZodType<Prisma.NestedEnumgbif_tableNullableFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumgbif_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumgbif_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional()
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const NestedEnumproject_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumproject_typeNullableFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumproject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumproject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional()
}).strict();

export const NestedEnumtaxonomy_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumtaxonomy_typeNullableFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumtaxonomy_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional()
}).strict();

export const UsersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.string(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_taxaCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.string(),
  project_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_taxaCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_taxaCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateWithoutAccountsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutAccountsInput> = z.object({
  list_id: z.string(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ListsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ListsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PersonsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateWithoutAccountsInput> = z.object({
  person_id: z.string(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateWithoutAccountsInput> = z.object({
  person_id: z.string(),
  project_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.PersonsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => PersonsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Place_levelsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateWithoutAccountsInput> = z.object({
  place_level_id: z.string(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateWithoutAccountsInput> = z.object({
  place_level_id: z.string(),
  project_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Place_levelsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Place_levelsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutAccountsInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutAccountsInput> = z.object({
  project_user_id: z.string(),
  project_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutAccountsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutAccountsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ProjectsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ProjectsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SubprojectsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutAccountsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutAccountsInput> = z.object({
  subproject_id: z.string(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.SubprojectsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => SubprojectsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxaCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateWithoutAccountsInput> = z.object({
  taxon_id: z.string(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateWithoutAccountsInput> = z.object({
  taxon_id: z.string(),
  taxonomy_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.TaxaCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => TaxaCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxonomiesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutAccountsInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutAccountsInput> = z.object({
  taxonomy_id: z.string(),
  project_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.TaxonomiesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => TaxonomiesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Ui_optionsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateWithoutAccountsInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUi_optionsInputSchema)
}).strict();

export const Ui_optionsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Ui_optionsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Ui_optionsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const User_messagesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutAccountsInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutAccountsInput> = z.object({
  user_message_id: z.string(),
  user_id: z.string().optional().nullable(),
  message_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UsersUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsScalarWhereInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const Gbif_occurrencesScalarWhereInputSchema: z.ZodType<Prisma.Gbif_occurrencesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateManyMutationInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema) ]),
}).strict();

export const Gbif_taxaScalarWhereInputSchema: z.ZodType<Prisma.Gbif_taxaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const ListsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListsUpdateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateManyMutationInputSchema),z.lazy(() => ListsUncheckedUpdateManyWithoutListsInputSchema) ]),
}).strict();

export const ListsScalarWhereInputSchema: z.ZodType<Prisma.ListsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PersonsUpdateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateManyMutationInputSchema),z.lazy(() => PersonsUncheckedUpdateManyWithoutPersonsInputSchema) ]),
}).strict();

export const PersonsScalarWhereInputSchema: z.ZodType<Prisma.PersonsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateManyMutationInputSchema),z.lazy(() => Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema) ]),
}).strict();

export const Place_levelsScalarWhereInputSchema: z.ZodType<Prisma.Place_levelsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const Project_usersScalarWhereInputSchema: z.ZodType<Prisma.Project_usersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectsUpdateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectsUpdateManyMutationInputSchema),z.lazy(() => ProjectsUncheckedUpdateManyWithoutProjectsInputSchema) ]),
}).strict();

export const ProjectsScalarWhereInputSchema: z.ZodType<Prisma.ProjectsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateManyMutationInputSchema),z.lazy(() => SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema) ]),
}).strict();

export const SubprojectsScalarWhereInputSchema: z.ZodType<Prisma.SubprojectsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxaUpdateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateManyMutationInputSchema),z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxaInputSchema) ]),
}).strict();

export const TaxaScalarWhereInputSchema: z.ZodType<Prisma.TaxaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateManyMutationInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxonomiesScalarWhereInputSchema: z.ZodType<Prisma.TaxonomiesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Ui_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Ui_optionsUpdateManyMutationInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutUi_optionsInputSchema) ]),
}).strict();

export const Ui_optionsScalarWhereInputSchema: z.ZodType<Prisma.Ui_optionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const User_messagesScalarWhereInputSchema: z.ZodType<Prisma.User_messagesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.string(),
  widget_type_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateOrConnectWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyField_typesInputEnvelope> = z.object({
  data: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyMutationInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widgets_for_fieldsScalarWhereInputSchema: z.ZodType<Prisma.Widgets_for_fieldsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const AccountsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_taxaInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_taxaInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_taxaInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_taxaInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_taxaInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_taxaInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_taxaInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_taxaInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_taxaInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_taxaInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutListsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutListsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutListsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutListsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutListsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutListsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutListsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutListsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutListsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutListsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutListsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const User_messagesCreateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutMessagesInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutMessagesInput> = z.object({
  user_message_id: z.string(),
  account_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesCreateManyMessagesInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyMessagesInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyMessagesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsCreateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutPersonsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutPersonsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutPersonsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutPersonsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutPersonsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutPersonsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutPersonsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPersonsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutPersonsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutPersonsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutPersonsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPersonsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutPersonsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutPersonsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutPlace_levelsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutPlace_levelsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutPlace_levelsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutPlace_levelsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutPlace_levelsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutPlace_levelsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutPlace_levelsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlace_levelsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutPlace_levelsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutPlace_levelsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutPlace_levelsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutPlace_levelsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutPlace_levelsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutProject_usersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutProject_usersInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutProject_usersInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutProject_usersInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const UsersCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutProject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutProject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutProject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutProject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutProject_usersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutProject_usersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutProject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutProject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_taxaCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_taxaCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_taxaCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateWithoutProjectsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutProjectsInput> = z.object({
  list_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.ListsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => ListsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PersonsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateWithoutProjectsInput> = z.object({
  person_id: z.string(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateWithoutProjectsInput> = z.object({
  person_id: z.string(),
  account_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.PersonsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => PersonsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Place_levelsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateWithoutProjectsInput> = z.object({
  place_level_id: z.string(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateWithoutProjectsInput> = z.object({
  place_level_id: z.string(),
  account_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Place_levelsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Place_levelsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutProjectsInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutProjectsInput> = z.object({
  project_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutProjectsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutProjectsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutProjectsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutProjectsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.SubprojectsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => SubprojectsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxonomiesCreateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutProjectsInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutProjectsInput> = z.object({
  taxonomy_id: z.string(),
  account_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.TaxonomiesCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => TaxonomiesCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateManyMutationInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ListsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListsUpdateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateManyMutationInputSchema),z.lazy(() => ListsUncheckedUpdateManyWithoutListsInputSchema) ]),
}).strict();

export const PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PersonsUpdateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateManyMutationInputSchema),z.lazy(() => PersonsUncheckedUpdateManyWithoutPersonsInputSchema) ]),
}).strict();

export const Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateManyMutationInputSchema),z.lazy(() => Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema) ]),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutProjectsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutProjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutProjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateManyMutationInputSchema),z.lazy(() => SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema) ]),
}).strict();

export const TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateManyMutationInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutSubprojectsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutSubprojectsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutSubprojectsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutSubprojectsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutSubprojectsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutSubprojectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutSubprojectsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutSubprojectsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateWithoutTaxaInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutTaxaInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutTaxaInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const TaxonomiesCreateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutTaxaInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutTaxaInput> = z.object({
  taxonomy_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateOrConnectWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutTaxaInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutTaxaInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxaInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutTaxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutTaxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const TaxonomiesUpsertWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithoutTaxaInput> = z.object({
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutTaxaInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutTaxaInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutTaxaInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.string(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaCreateManyTaxonomiesInputEnvelopeSchema: z.ZodType<Prisma.TaxaCreateManyTaxonomiesInputEnvelope> = z.object({
  data: z.lazy(() => TaxaCreateManyTaxonomiesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutTaxonomiesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutTaxonomiesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutTaxonomiesInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutTaxonomiesInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpsertWithWhereUniqueWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxaUpdateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateWithWhereUniqueWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithWhereWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateManyMutationInputSchema),z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutTaxonomiesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutTaxonomiesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutTaxonomiesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutTaxonomiesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUi_optionsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUi_optionsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUi_optionsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const UsersCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateWithoutUi_optionsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUi_optionsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUi_optionsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutUi_optionsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUi_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUi_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUi_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUi_optionsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUi_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUser_messagesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUser_messagesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const MessagesCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateWithoutUser_messagesInput> = z.object({
  message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUncheckedCreateWithoutUser_messagesInput> = z.object({
  message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => MessagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const UsersCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateWithoutUser_messagesInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUser_messagesInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUser_messagesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUser_messagesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const MessagesUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => MessagesUpdateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const MessagesUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUpdateWithoutUser_messagesInput> = z.object({
  message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateWithoutUser_messagesInput> = z.object({
  message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUser_messagesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUser_messagesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUsersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUsersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.AccountsCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => AccountsCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutUsersInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutUsersInput> = z.object({
  project_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Ui_optionsCreateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateWithoutUsersInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUi_optionsInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateWithoutUsersInput> = z.object({
  account_id: z.string().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesCreateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutUsersInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutUsersInput> = z.object({
  user_message_id: z.string(),
  account_id: z.string().optional().nullable(),
  message_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountsUpdateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountsUpdateManyMutationInputSchema),z.lazy(() => AccountsUncheckedUpdateManyWithoutAccountsInputSchema) ]),
}).strict();

export const AccountsScalarWhereInputSchema: z.ZodType<Prisma.AccountsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const Ui_optionsUpsertWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Ui_optionsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithoutUsersInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.string(),
  field_type_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyWidget_typesInputEnvelope> = z.object({
  data: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyMutationInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedCreateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateOrConnectWithoutWidgets_for_fieldsInput> = z.object({
  where: z.lazy(() => Field_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widget_typesCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInput> = z.object({
  where: z.lazy(() => Widget_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesUpsertWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUpsertWithoutWidgets_for_fieldsInput> = z.object({
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUpdateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesUpsertWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUpsertWithoutWidgets_for_fieldsInput> = z.object({
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUpdateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyAccountsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyAccountsInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const ListsCreateManyAccountsInputSchema: z.ZodType<Prisma.ListsCreateManyAccountsInput> = z.object({
  list_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateManyAccountsInputSchema: z.ZodType<Prisma.PersonsCreateManyAccountsInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateManyAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateManyAccountsInput> = z.object({
  place_level_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateManyAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateManyAccountsInput> = z.object({
  project_user_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ProjectsCreateManyAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateManyAccountsInput> = z.object({
  project_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsCreateManyAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateManyAccountsInput> = z.object({
  subproject_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaCreateManyAccountsInputSchema: z.ZodType<Prisma.TaxaCreateManyAccountsInput> = z.object({
  taxon_id: z.string().uuid(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateManyAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyAccountsInput> = z.object({
  taxonomy_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Ui_optionsCreateManyAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateManyAccountsInput> = z.object({
  user_id: z.string().uuid(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const User_messagesCreateManyAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateManyAccountsInput> = z.object({
  user_message_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutAccountsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutAccountsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUncheckedUpdateManyWithoutListsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutListsInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateWithoutAccountsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateWithoutAccountsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutPersonsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutPersonsInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithoutAccountsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateWithoutAccountsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutPlace_levelsInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutAccountsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutAccountsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutProject_usersInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutAccountsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutAccountsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateManyWithoutProjectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyWithoutProjectsInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutAccountsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutAccountsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutSubprojectsInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateWithoutAccountsInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomies: z.lazy(() => TaxonomiesUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateWithoutAccountsInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxonomy_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaUncheckedUpdateManyWithoutTaxaInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutTaxaInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutAccountsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutAccountsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithoutAccountsInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUncheckedUpdateManyWithoutUi_optionsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutAccountsInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutAccountsInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutUser_messagesInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateManyField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyField_typesInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesCreateManyMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateManyMessagesInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutMessagesInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutMessagesInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyProjectsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyProjectsInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const ListsCreateManyProjectsInputSchema: z.ZodType<Prisma.ListsCreateManyProjectsInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateManyProjectsInputSchema: z.ZodType<Prisma.PersonsCreateManyProjectsInput> = z.object({
  person_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateManyProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateManyProjectsInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateManyProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateManyProjectsInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsCreateManyProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateManyProjectsInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateManyProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyProjectsInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutProjectsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutProjectsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateWithoutProjectsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateWithoutProjectsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithoutProjectsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateWithoutProjectsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutProjectsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutProjectsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutProjectsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutProjectsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const TaxonomiesUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutProjectsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutProjectsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsCreateManySubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManySubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManySubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManySubprojectsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateManyTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateManyTaxonomiesInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountsCreateManyUsersInputSchema: z.ZodType<Prisma.AccountsCreateManyUsersInput> = z.object({
  account_id: z.string().uuid(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Project_usersCreateManyUsersInputSchema: z.ZodType<Prisma.Project_usersCreateManyUsersInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateManyUsersInputSchema: z.ZodType<Prisma.User_messagesCreateManyUsersInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const AccountsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateManyWithoutAccountsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyWithoutAccountsInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutUsersInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutUsersInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutUsersInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutUsersInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateManyWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyWidget_typesInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountsFindFirstArgsSchema: z.ZodType<Prisma.AccountsFindFirstArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindFirstArgs>

export const AccountsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountsFindFirstOrThrowArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindFirstOrThrowArgs>

export const AccountsFindManyArgsSchema: z.ZodType<Prisma.AccountsFindManyArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindManyArgs>

export const AccountsAggregateArgsSchema: z.ZodType<Prisma.AccountsAggregateArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.AccountsAggregateArgs>

export const AccountsGroupByArgsSchema: z.ZodType<Prisma.AccountsGroupByArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithAggregationInputSchema.array(),AccountsOrderByWithAggregationInputSchema ]).optional(),
  by: AccountsScalarFieldEnumSchema.array(),
  having: AccountsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.AccountsGroupByArgs>

export const AccountsFindUniqueArgsSchema: z.ZodType<Prisma.AccountsFindUniqueArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsFindUniqueArgs>

export const AccountsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountsFindUniqueOrThrowArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsFindUniqueOrThrowArgs>

export const Field_typesFindFirstArgsSchema: z.ZodType<Prisma.Field_typesFindFirstArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindFirstArgs>

export const Field_typesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Field_typesFindFirstOrThrowArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindFirstOrThrowArgs>

export const Field_typesFindManyArgsSchema: z.ZodType<Prisma.Field_typesFindManyArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindManyArgs>

export const Field_typesAggregateArgsSchema: z.ZodType<Prisma.Field_typesAggregateArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Field_typesAggregateArgs>

export const Field_typesGroupByArgsSchema: z.ZodType<Prisma.Field_typesGroupByArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithAggregationInputSchema.array(),Field_typesOrderByWithAggregationInputSchema ]).optional(),
  by: Field_typesScalarFieldEnumSchema.array(),
  having: Field_typesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Field_typesGroupByArgs>

export const Field_typesFindUniqueArgsSchema: z.ZodType<Prisma.Field_typesFindUniqueArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesFindUniqueArgs>

export const Field_typesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Field_typesFindUniqueOrThrowArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesFindUniqueOrThrowArgs>

export const Gbif_occurrence_downloadsFindFirstArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstArgs>

export const Gbif_occurrence_downloadsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstOrThrowArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstOrThrowArgs>

export const Gbif_occurrence_downloadsFindManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindManyArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindManyArgs>

export const Gbif_occurrence_downloadsAggregateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsAggregateArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsAggregateArgs>

export const Gbif_occurrence_downloadsGroupByArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsGroupByArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithAggregationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_occurrence_downloadsScalarFieldEnumSchema.array(),
  having: Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsGroupByArgs>

export const Gbif_occurrence_downloadsFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueArgs>

export const Gbif_occurrence_downloadsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueOrThrowArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueOrThrowArgs>

export const Gbif_occurrencesFindFirstArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindFirstArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindFirstArgs>

export const Gbif_occurrencesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindFirstOrThrowArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindFirstOrThrowArgs>

export const Gbif_occurrencesFindManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindManyArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindManyArgs>

export const Gbif_occurrencesAggregateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesAggregateArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesAggregateArgs>

export const Gbif_occurrencesGroupByArgsSchema: z.ZodType<Prisma.Gbif_occurrencesGroupByArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithAggregationInputSchema.array(),Gbif_occurrencesOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_occurrencesScalarFieldEnumSchema.array(),
  having: Gbif_occurrencesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesGroupByArgs>

export const Gbif_occurrencesFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindUniqueArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindUniqueArgs>

export const Gbif_occurrencesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindUniqueOrThrowArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindUniqueOrThrowArgs>

export const Gbif_taxaFindFirstArgsSchema: z.ZodType<Prisma.Gbif_taxaFindFirstArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindFirstArgs>

export const Gbif_taxaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_taxaFindFirstOrThrowArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindFirstOrThrowArgs>

export const Gbif_taxaFindManyArgsSchema: z.ZodType<Prisma.Gbif_taxaFindManyArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindManyArgs>

export const Gbif_taxaAggregateArgsSchema: z.ZodType<Prisma.Gbif_taxaAggregateArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaAggregateArgs>

export const Gbif_taxaGroupByArgsSchema: z.ZodType<Prisma.Gbif_taxaGroupByArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithAggregationInputSchema.array(),Gbif_taxaOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_taxaScalarFieldEnumSchema.array(),
  having: Gbif_taxaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaGroupByArgs>

export const Gbif_taxaFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_taxaFindUniqueArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaFindUniqueArgs>

export const Gbif_taxaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_taxaFindUniqueOrThrowArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaFindUniqueOrThrowArgs>

export const ListsFindFirstArgsSchema: z.ZodType<Prisma.ListsFindFirstArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindFirstArgs>

export const ListsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListsFindFirstOrThrowArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindFirstOrThrowArgs>

export const ListsFindManyArgsSchema: z.ZodType<Prisma.ListsFindManyArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindManyArgs>

export const ListsAggregateArgsSchema: z.ZodType<Prisma.ListsAggregateArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ListsAggregateArgs>

export const ListsGroupByArgsSchema: z.ZodType<Prisma.ListsGroupByArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithAggregationInputSchema.array(),ListsOrderByWithAggregationInputSchema ]).optional(),
  by: ListsScalarFieldEnumSchema.array(),
  having: ListsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ListsGroupByArgs>

export const ListsFindUniqueArgsSchema: z.ZodType<Prisma.ListsFindUniqueArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsFindUniqueArgs>

export const ListsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListsFindUniqueOrThrowArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsFindUniqueOrThrowArgs>

export const MessagesFindFirstArgsSchema: z.ZodType<Prisma.MessagesFindFirstArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindFirstArgs>

export const MessagesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessagesFindFirstOrThrowArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindFirstOrThrowArgs>

export const MessagesFindManyArgsSchema: z.ZodType<Prisma.MessagesFindManyArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindManyArgs>

export const MessagesAggregateArgsSchema: z.ZodType<Prisma.MessagesAggregateArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.MessagesAggregateArgs>

export const MessagesGroupByArgsSchema: z.ZodType<Prisma.MessagesGroupByArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithAggregationInputSchema.array(),MessagesOrderByWithAggregationInputSchema ]).optional(),
  by: MessagesScalarFieldEnumSchema.array(),
  having: MessagesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.MessagesGroupByArgs>

export const MessagesFindUniqueArgsSchema: z.ZodType<Prisma.MessagesFindUniqueArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesFindUniqueArgs>

export const MessagesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessagesFindUniqueOrThrowArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesFindUniqueOrThrowArgs>

export const PersonsFindFirstArgsSchema: z.ZodType<Prisma.PersonsFindFirstArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindFirstArgs>

export const PersonsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PersonsFindFirstOrThrowArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindFirstOrThrowArgs>

export const PersonsFindManyArgsSchema: z.ZodType<Prisma.PersonsFindManyArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindManyArgs>

export const PersonsAggregateArgsSchema: z.ZodType<Prisma.PersonsAggregateArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PersonsAggregateArgs>

export const PersonsGroupByArgsSchema: z.ZodType<Prisma.PersonsGroupByArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithAggregationInputSchema.array(),PersonsOrderByWithAggregationInputSchema ]).optional(),
  by: PersonsScalarFieldEnumSchema.array(),
  having: PersonsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PersonsGroupByArgs>

export const PersonsFindUniqueArgsSchema: z.ZodType<Prisma.PersonsFindUniqueArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsFindUniqueArgs>

export const PersonsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PersonsFindUniqueOrThrowArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsFindUniqueOrThrowArgs>

export const Place_levelsFindFirstArgsSchema: z.ZodType<Prisma.Place_levelsFindFirstArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindFirstArgs>

export const Place_levelsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Place_levelsFindFirstOrThrowArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindFirstOrThrowArgs>

export const Place_levelsFindManyArgsSchema: z.ZodType<Prisma.Place_levelsFindManyArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindManyArgs>

export const Place_levelsAggregateArgsSchema: z.ZodType<Prisma.Place_levelsAggregateArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsAggregateArgs>

export const Place_levelsGroupByArgsSchema: z.ZodType<Prisma.Place_levelsGroupByArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithAggregationInputSchema.array(),Place_levelsOrderByWithAggregationInputSchema ]).optional(),
  by: Place_levelsScalarFieldEnumSchema.array(),
  having: Place_levelsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsGroupByArgs>

export const Place_levelsFindUniqueArgsSchema: z.ZodType<Prisma.Place_levelsFindUniqueArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsFindUniqueArgs>

export const Place_levelsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Place_levelsFindUniqueOrThrowArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsFindUniqueOrThrowArgs>

export const Project_usersFindFirstArgsSchema: z.ZodType<Prisma.Project_usersFindFirstArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindFirstArgs>

export const Project_usersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Project_usersFindFirstOrThrowArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindFirstOrThrowArgs>

export const Project_usersFindManyArgsSchema: z.ZodType<Prisma.Project_usersFindManyArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindManyArgs>

export const Project_usersAggregateArgsSchema: z.ZodType<Prisma.Project_usersAggregateArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_usersAggregateArgs>

export const Project_usersGroupByArgsSchema: z.ZodType<Prisma.Project_usersGroupByArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithAggregationInputSchema.array(),Project_usersOrderByWithAggregationInputSchema ]).optional(),
  by: Project_usersScalarFieldEnumSchema.array(),
  having: Project_usersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_usersGroupByArgs>

export const Project_usersFindUniqueArgsSchema: z.ZodType<Prisma.Project_usersFindUniqueArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersFindUniqueArgs>

export const Project_usersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Project_usersFindUniqueOrThrowArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersFindUniqueOrThrowArgs>

export const ProjectsFindFirstArgsSchema: z.ZodType<Prisma.ProjectsFindFirstArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindFirstArgs>

export const ProjectsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectsFindFirstOrThrowArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindFirstOrThrowArgs>

export const ProjectsFindManyArgsSchema: z.ZodType<Prisma.ProjectsFindManyArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindManyArgs>

export const ProjectsAggregateArgsSchema: z.ZodType<Prisma.ProjectsAggregateArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectsAggregateArgs>

export const ProjectsGroupByArgsSchema: z.ZodType<Prisma.ProjectsGroupByArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithAggregationInputSchema.array(),ProjectsOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectsScalarFieldEnumSchema.array(),
  having: ProjectsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectsGroupByArgs>

export const ProjectsFindUniqueArgsSchema: z.ZodType<Prisma.ProjectsFindUniqueArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsFindUniqueArgs>

export const ProjectsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectsFindUniqueOrThrowArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsFindUniqueOrThrowArgs>

export const SubprojectsFindFirstArgsSchema: z.ZodType<Prisma.SubprojectsFindFirstArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindFirstArgs>

export const SubprojectsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SubprojectsFindFirstOrThrowArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindFirstOrThrowArgs>

export const SubprojectsFindManyArgsSchema: z.ZodType<Prisma.SubprojectsFindManyArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindManyArgs>

export const SubprojectsAggregateArgsSchema: z.ZodType<Prisma.SubprojectsAggregateArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsAggregateArgs>

export const SubprojectsGroupByArgsSchema: z.ZodType<Prisma.SubprojectsGroupByArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithAggregationInputSchema.array(),SubprojectsOrderByWithAggregationInputSchema ]).optional(),
  by: SubprojectsScalarFieldEnumSchema.array(),
  having: SubprojectsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsGroupByArgs>

export const SubprojectsFindUniqueArgsSchema: z.ZodType<Prisma.SubprojectsFindUniqueArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsFindUniqueArgs>

export const SubprojectsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SubprojectsFindUniqueOrThrowArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsFindUniqueOrThrowArgs>

export const TaxaFindFirstArgsSchema: z.ZodType<Prisma.TaxaFindFirstArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindFirstArgs>

export const TaxaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaxaFindFirstOrThrowArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindFirstOrThrowArgs>

export const TaxaFindManyArgsSchema: z.ZodType<Prisma.TaxaFindManyArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindManyArgs>

export const TaxaAggregateArgsSchema: z.ZodType<Prisma.TaxaAggregateArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxaAggregateArgs>

export const TaxaGroupByArgsSchema: z.ZodType<Prisma.TaxaGroupByArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithAggregationInputSchema.array(),TaxaOrderByWithAggregationInputSchema ]).optional(),
  by: TaxaScalarFieldEnumSchema.array(),
  having: TaxaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxaGroupByArgs>

export const TaxaFindUniqueArgsSchema: z.ZodType<Prisma.TaxaFindUniqueArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaFindUniqueArgs>

export const TaxaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaxaFindUniqueOrThrowArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaFindUniqueOrThrowArgs>

export const TaxonomiesFindFirstArgsSchema: z.ZodType<Prisma.TaxonomiesFindFirstArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindFirstArgs>

export const TaxonomiesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaxonomiesFindFirstOrThrowArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindFirstOrThrowArgs>

export const TaxonomiesFindManyArgsSchema: z.ZodType<Prisma.TaxonomiesFindManyArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindManyArgs>

export const TaxonomiesAggregateArgsSchema: z.ZodType<Prisma.TaxonomiesAggregateArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesAggregateArgs>

export const TaxonomiesGroupByArgsSchema: z.ZodType<Prisma.TaxonomiesGroupByArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithAggregationInputSchema.array(),TaxonomiesOrderByWithAggregationInputSchema ]).optional(),
  by: TaxonomiesScalarFieldEnumSchema.array(),
  having: TaxonomiesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesGroupByArgs>

export const TaxonomiesFindUniqueArgsSchema: z.ZodType<Prisma.TaxonomiesFindUniqueArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesFindUniqueArgs>

export const TaxonomiesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaxonomiesFindUniqueOrThrowArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesFindUniqueOrThrowArgs>

export const Ui_optionsFindFirstArgsSchema: z.ZodType<Prisma.Ui_optionsFindFirstArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindFirstArgs>

export const Ui_optionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Ui_optionsFindFirstOrThrowArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindFirstOrThrowArgs>

export const Ui_optionsFindManyArgsSchema: z.ZodType<Prisma.Ui_optionsFindManyArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindManyArgs>

export const Ui_optionsAggregateArgsSchema: z.ZodType<Prisma.Ui_optionsAggregateArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsAggregateArgs>

export const Ui_optionsGroupByArgsSchema: z.ZodType<Prisma.Ui_optionsGroupByArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithAggregationInputSchema.array(),Ui_optionsOrderByWithAggregationInputSchema ]).optional(),
  by: Ui_optionsScalarFieldEnumSchema.array(),
  having: Ui_optionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsGroupByArgs>

export const Ui_optionsFindUniqueArgsSchema: z.ZodType<Prisma.Ui_optionsFindUniqueArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsFindUniqueArgs>

export const Ui_optionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Ui_optionsFindUniqueOrThrowArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsFindUniqueOrThrowArgs>

export const User_messagesFindFirstArgsSchema: z.ZodType<Prisma.User_messagesFindFirstArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindFirstArgs>

export const User_messagesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.User_messagesFindFirstOrThrowArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindFirstOrThrowArgs>

export const User_messagesFindManyArgsSchema: z.ZodType<Prisma.User_messagesFindManyArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindManyArgs>

export const User_messagesAggregateArgsSchema: z.ZodType<Prisma.User_messagesAggregateArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.User_messagesAggregateArgs>

export const User_messagesGroupByArgsSchema: z.ZodType<Prisma.User_messagesGroupByArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithAggregationInputSchema.array(),User_messagesOrderByWithAggregationInputSchema ]).optional(),
  by: User_messagesScalarFieldEnumSchema.array(),
  having: User_messagesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.User_messagesGroupByArgs>

export const User_messagesFindUniqueArgsSchema: z.ZodType<Prisma.User_messagesFindUniqueArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesFindUniqueArgs>

export const User_messagesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.User_messagesFindUniqueOrThrowArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesFindUniqueOrThrowArgs>

export const UsersFindFirstArgsSchema: z.ZodType<Prisma.UsersFindFirstArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindFirstArgs>

export const UsersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UsersFindFirstOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindFirstOrThrowArgs>

export const UsersFindManyArgsSchema: z.ZodType<Prisma.UsersFindManyArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindManyArgs>

export const UsersAggregateArgsSchema: z.ZodType<Prisma.UsersAggregateArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UsersAggregateArgs>

export const UsersGroupByArgsSchema: z.ZodType<Prisma.UsersGroupByArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithAggregationInputSchema.array(),UsersOrderByWithAggregationInputSchema ]).optional(),
  by: UsersScalarFieldEnumSchema.array(),
  having: UsersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UsersGroupByArgs>

export const UsersFindUniqueArgsSchema: z.ZodType<Prisma.UsersFindUniqueArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersFindUniqueArgs>

export const UsersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UsersFindUniqueOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersFindUniqueOrThrowArgs>

export const Widget_typesFindFirstArgsSchema: z.ZodType<Prisma.Widget_typesFindFirstArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindFirstArgs>

export const Widget_typesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Widget_typesFindFirstOrThrowArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindFirstOrThrowArgs>

export const Widget_typesFindManyArgsSchema: z.ZodType<Prisma.Widget_typesFindManyArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindManyArgs>

export const Widget_typesAggregateArgsSchema: z.ZodType<Prisma.Widget_typesAggregateArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesAggregateArgs>

export const Widget_typesGroupByArgsSchema: z.ZodType<Prisma.Widget_typesGroupByArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithAggregationInputSchema.array(),Widget_typesOrderByWithAggregationInputSchema ]).optional(),
  by: Widget_typesScalarFieldEnumSchema.array(),
  having: Widget_typesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesGroupByArgs>

export const Widget_typesFindUniqueArgsSchema: z.ZodType<Prisma.Widget_typesFindUniqueArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesFindUniqueArgs>

export const Widget_typesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Widget_typesFindUniqueOrThrowArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesFindUniqueOrThrowArgs>

export const Widgets_for_fieldsFindFirstArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindFirstArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindFirstArgs>

export const Widgets_for_fieldsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindFirstOrThrowArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindFirstOrThrowArgs>

export const Widgets_for_fieldsFindManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindManyArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindManyArgs>

export const Widgets_for_fieldsAggregateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsAggregateArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsAggregateArgs>

export const Widgets_for_fieldsGroupByArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsGroupByArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithAggregationInputSchema.array(),Widgets_for_fieldsOrderByWithAggregationInputSchema ]).optional(),
  by: Widgets_for_fieldsScalarFieldEnumSchema.array(),
  having: Widgets_for_fieldsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsGroupByArgs>

export const Widgets_for_fieldsFindUniqueArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindUniqueArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindUniqueArgs>

export const Widgets_for_fieldsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindUniqueOrThrowArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindUniqueOrThrowArgs>

export const AccountsCreateArgsSchema: z.ZodType<Prisma.AccountsCreateArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  data: z.union([ AccountsCreateInputSchema,AccountsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.AccountsCreateArgs>

export const AccountsUpsertArgsSchema: z.ZodType<Prisma.AccountsUpsertArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
  create: z.union([ AccountsCreateInputSchema,AccountsUncheckedCreateInputSchema ]),
  update: z.union([ AccountsUpdateInputSchema,AccountsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.AccountsUpsertArgs>

export const AccountsCreateManyArgsSchema: z.ZodType<Prisma.AccountsCreateManyArgs> = z.object({
  data: AccountsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.AccountsCreateManyArgs>

export const AccountsDeleteArgsSchema: z.ZodType<Prisma.AccountsDeleteArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsDeleteArgs>

export const AccountsUpdateArgsSchema: z.ZodType<Prisma.AccountsUpdateArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  data: z.union([ AccountsUpdateInputSchema,AccountsUncheckedUpdateInputSchema ]),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsUpdateArgs>

export const AccountsUpdateManyArgsSchema: z.ZodType<Prisma.AccountsUpdateManyArgs> = z.object({
  data: z.union([ AccountsUpdateManyMutationInputSchema,AccountsUncheckedUpdateManyInputSchema ]),
  where: AccountsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.AccountsUpdateManyArgs>

export const AccountsDeleteManyArgsSchema: z.ZodType<Prisma.AccountsDeleteManyArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.AccountsDeleteManyArgs>

export const Field_typesCreateArgsSchema: z.ZodType<Prisma.Field_typesCreateArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  data: z.union([ Field_typesCreateInputSchema,Field_typesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Field_typesCreateArgs>

export const Field_typesUpsertArgsSchema: z.ZodType<Prisma.Field_typesUpsertArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
  create: z.union([ Field_typesCreateInputSchema,Field_typesUncheckedCreateInputSchema ]),
  update: z.union([ Field_typesUpdateInputSchema,Field_typesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Field_typesUpsertArgs>

export const Field_typesCreateManyArgsSchema: z.ZodType<Prisma.Field_typesCreateManyArgs> = z.object({
  data: Field_typesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Field_typesCreateManyArgs>

export const Field_typesDeleteArgsSchema: z.ZodType<Prisma.Field_typesDeleteArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesDeleteArgs>

export const Field_typesUpdateArgsSchema: z.ZodType<Prisma.Field_typesUpdateArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  data: z.union([ Field_typesUpdateInputSchema,Field_typesUncheckedUpdateInputSchema ]),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesUpdateArgs>

export const Field_typesUpdateManyArgsSchema: z.ZodType<Prisma.Field_typesUpdateManyArgs> = z.object({
  data: z.union([ Field_typesUpdateManyMutationInputSchema,Field_typesUncheckedUpdateManyInputSchema ]),
  where: Field_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Field_typesUpdateManyArgs>

export const Field_typesDeleteManyArgsSchema: z.ZodType<Prisma.Field_typesDeleteManyArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Field_typesDeleteManyArgs>

export const Gbif_occurrence_downloadsCreateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  data: z.union([ Gbif_occurrence_downloadsCreateInputSchema,Gbif_occurrence_downloadsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsCreateArgs>

export const Gbif_occurrence_downloadsUpsertArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
  create: z.union([ Gbif_occurrence_downloadsCreateInputSchema,Gbif_occurrence_downloadsUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_occurrence_downloadsUpdateInputSchema,Gbif_occurrence_downloadsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertArgs>

export const Gbif_occurrence_downloadsCreateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyArgs> = z.object({
  data: Gbif_occurrence_downloadsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyArgs>

export const Gbif_occurrence_downloadsDeleteArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteArgs>

export const Gbif_occurrence_downloadsUpdateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  data: z.union([ Gbif_occurrence_downloadsUpdateInputSchema,Gbif_occurrence_downloadsUncheckedUpdateInputSchema ]),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateArgs>

export const Gbif_occurrence_downloadsUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyArgs> = z.object({
  data: z.union([ Gbif_occurrence_downloadsUpdateManyMutationInputSchema,Gbif_occurrence_downloadsUncheckedUpdateManyInputSchema ]),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyArgs>

export const Gbif_occurrence_downloadsDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteManyArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteManyArgs>

export const Gbif_occurrencesCreateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesCreateArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  data: z.union([ Gbif_occurrencesCreateInputSchema,Gbif_occurrencesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesCreateArgs>

export const Gbif_occurrencesUpsertArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
  create: z.union([ Gbif_occurrencesCreateInputSchema,Gbif_occurrencesUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_occurrencesUpdateInputSchema,Gbif_occurrencesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpsertArgs>

export const Gbif_occurrencesCreateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyArgs> = z.object({
  data: Gbif_occurrencesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesCreateManyArgs>

export const Gbif_occurrencesDeleteArgsSchema: z.ZodType<Prisma.Gbif_occurrencesDeleteArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesDeleteArgs>

export const Gbif_occurrencesUpdateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  data: z.union([ Gbif_occurrencesUpdateInputSchema,Gbif_occurrencesUncheckedUpdateInputSchema ]),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpdateArgs>

export const Gbif_occurrencesUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyArgs> = z.object({
  data: z.union([ Gbif_occurrencesUpdateManyMutationInputSchema,Gbif_occurrencesUncheckedUpdateManyInputSchema ]),
  where: Gbif_occurrencesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpdateManyArgs>

export const Gbif_occurrencesDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesDeleteManyArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesDeleteManyArgs>

export const Gbif_taxaCreateArgsSchema: z.ZodType<Prisma.Gbif_taxaCreateArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  data: z.union([ Gbif_taxaCreateInputSchema,Gbif_taxaUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_taxaCreateArgs>

export const Gbif_taxaUpsertArgsSchema: z.ZodType<Prisma.Gbif_taxaUpsertArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
  create: z.union([ Gbif_taxaCreateInputSchema,Gbif_taxaUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_taxaUpdateInputSchema,Gbif_taxaUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_taxaUpsertArgs>

export const Gbif_taxaCreateManyArgsSchema: z.ZodType<Prisma.Gbif_taxaCreateManyArgs> = z.object({
  data: Gbif_taxaCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaCreateManyArgs>

export const Gbif_taxaDeleteArgsSchema: z.ZodType<Prisma.Gbif_taxaDeleteArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaDeleteArgs>

export const Gbif_taxaUpdateArgsSchema: z.ZodType<Prisma.Gbif_taxaUpdateArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  data: z.union([ Gbif_taxaUpdateInputSchema,Gbif_taxaUncheckedUpdateInputSchema ]),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaUpdateArgs>

export const Gbif_taxaUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyArgs> = z.object({
  data: z.union([ Gbif_taxaUpdateManyMutationInputSchema,Gbif_taxaUncheckedUpdateManyInputSchema ]),
  where: Gbif_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaUpdateManyArgs>

export const Gbif_taxaDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_taxaDeleteManyArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaDeleteManyArgs>

export const ListsCreateArgsSchema: z.ZodType<Prisma.ListsCreateArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  data: z.union([ ListsCreateInputSchema,ListsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ListsCreateArgs>

export const ListsUpsertArgsSchema: z.ZodType<Prisma.ListsUpsertArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
  create: z.union([ ListsCreateInputSchema,ListsUncheckedCreateInputSchema ]),
  update: z.union([ ListsUpdateInputSchema,ListsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ListsUpsertArgs>

export const ListsCreateManyArgsSchema: z.ZodType<Prisma.ListsCreateManyArgs> = z.object({
  data: ListsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ListsCreateManyArgs>

export const ListsDeleteArgsSchema: z.ZodType<Prisma.ListsDeleteArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsDeleteArgs>

export const ListsUpdateArgsSchema: z.ZodType<Prisma.ListsUpdateArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  data: z.union([ ListsUpdateInputSchema,ListsUncheckedUpdateInputSchema ]),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsUpdateArgs>

export const ListsUpdateManyArgsSchema: z.ZodType<Prisma.ListsUpdateManyArgs> = z.object({
  data: z.union([ ListsUpdateManyMutationInputSchema,ListsUncheckedUpdateManyInputSchema ]),
  where: ListsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ListsUpdateManyArgs>

export const ListsDeleteManyArgsSchema: z.ZodType<Prisma.ListsDeleteManyArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ListsDeleteManyArgs>

export const MessagesCreateArgsSchema: z.ZodType<Prisma.MessagesCreateArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  data: z.union([ MessagesCreateInputSchema,MessagesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.MessagesCreateArgs>

export const MessagesUpsertArgsSchema: z.ZodType<Prisma.MessagesUpsertArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
  create: z.union([ MessagesCreateInputSchema,MessagesUncheckedCreateInputSchema ]),
  update: z.union([ MessagesUpdateInputSchema,MessagesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.MessagesUpsertArgs>

export const MessagesCreateManyArgsSchema: z.ZodType<Prisma.MessagesCreateManyArgs> = z.object({
  data: MessagesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.MessagesCreateManyArgs>

export const MessagesDeleteArgsSchema: z.ZodType<Prisma.MessagesDeleteArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesDeleteArgs>

export const MessagesUpdateArgsSchema: z.ZodType<Prisma.MessagesUpdateArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  data: z.union([ MessagesUpdateInputSchema,MessagesUncheckedUpdateInputSchema ]),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesUpdateArgs>

export const MessagesUpdateManyArgsSchema: z.ZodType<Prisma.MessagesUpdateManyArgs> = z.object({
  data: z.union([ MessagesUpdateManyMutationInputSchema,MessagesUncheckedUpdateManyInputSchema ]),
  where: MessagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.MessagesUpdateManyArgs>

export const MessagesDeleteManyArgsSchema: z.ZodType<Prisma.MessagesDeleteManyArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.MessagesDeleteManyArgs>

export const PersonsCreateArgsSchema: z.ZodType<Prisma.PersonsCreateArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  data: z.union([ PersonsCreateInputSchema,PersonsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.PersonsCreateArgs>

export const PersonsUpsertArgsSchema: z.ZodType<Prisma.PersonsUpsertArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
  create: z.union([ PersonsCreateInputSchema,PersonsUncheckedCreateInputSchema ]),
  update: z.union([ PersonsUpdateInputSchema,PersonsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.PersonsUpsertArgs>

export const PersonsCreateManyArgsSchema: z.ZodType<Prisma.PersonsCreateManyArgs> = z.object({
  data: PersonsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.PersonsCreateManyArgs>

export const PersonsDeleteArgsSchema: z.ZodType<Prisma.PersonsDeleteArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsDeleteArgs>

export const PersonsUpdateArgsSchema: z.ZodType<Prisma.PersonsUpdateArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  data: z.union([ PersonsUpdateInputSchema,PersonsUncheckedUpdateInputSchema ]),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsUpdateArgs>

export const PersonsUpdateManyArgsSchema: z.ZodType<Prisma.PersonsUpdateManyArgs> = z.object({
  data: z.union([ PersonsUpdateManyMutationInputSchema,PersonsUncheckedUpdateManyInputSchema ]),
  where: PersonsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PersonsUpdateManyArgs>

export const PersonsDeleteManyArgsSchema: z.ZodType<Prisma.PersonsDeleteManyArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PersonsDeleteManyArgs>

export const Place_levelsCreateArgsSchema: z.ZodType<Prisma.Place_levelsCreateArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  data: z.union([ Place_levelsCreateInputSchema,Place_levelsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Place_levelsCreateArgs>

export const Place_levelsUpsertArgsSchema: z.ZodType<Prisma.Place_levelsUpsertArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
  create: z.union([ Place_levelsCreateInputSchema,Place_levelsUncheckedCreateInputSchema ]),
  update: z.union([ Place_levelsUpdateInputSchema,Place_levelsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Place_levelsUpsertArgs>

export const Place_levelsCreateManyArgsSchema: z.ZodType<Prisma.Place_levelsCreateManyArgs> = z.object({
  data: Place_levelsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsCreateManyArgs>

export const Place_levelsDeleteArgsSchema: z.ZodType<Prisma.Place_levelsDeleteArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsDeleteArgs>

export const Place_levelsUpdateArgsSchema: z.ZodType<Prisma.Place_levelsUpdateArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  data: z.union([ Place_levelsUpdateInputSchema,Place_levelsUncheckedUpdateInputSchema ]),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsUpdateArgs>

export const Place_levelsUpdateManyArgsSchema: z.ZodType<Prisma.Place_levelsUpdateManyArgs> = z.object({
  data: z.union([ Place_levelsUpdateManyMutationInputSchema,Place_levelsUncheckedUpdateManyInputSchema ]),
  where: Place_levelsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Place_levelsUpdateManyArgs>

export const Place_levelsDeleteManyArgsSchema: z.ZodType<Prisma.Place_levelsDeleteManyArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Place_levelsDeleteManyArgs>

export const Project_usersCreateArgsSchema: z.ZodType<Prisma.Project_usersCreateArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  data: z.union([ Project_usersCreateInputSchema,Project_usersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_usersCreateArgs>

export const Project_usersUpsertArgsSchema: z.ZodType<Prisma.Project_usersUpsertArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
  create: z.union([ Project_usersCreateInputSchema,Project_usersUncheckedCreateInputSchema ]),
  update: z.union([ Project_usersUpdateInputSchema,Project_usersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_usersUpsertArgs>

export const Project_usersCreateManyArgsSchema: z.ZodType<Prisma.Project_usersCreateManyArgs> = z.object({
  data: Project_usersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Project_usersCreateManyArgs>

export const Project_usersDeleteArgsSchema: z.ZodType<Prisma.Project_usersDeleteArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersDeleteArgs>

export const Project_usersUpdateArgsSchema: z.ZodType<Prisma.Project_usersUpdateArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  data: z.union([ Project_usersUpdateInputSchema,Project_usersUncheckedUpdateInputSchema ]),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersUpdateArgs>

export const Project_usersUpdateManyArgsSchema: z.ZodType<Prisma.Project_usersUpdateManyArgs> = z.object({
  data: z.union([ Project_usersUpdateManyMutationInputSchema,Project_usersUncheckedUpdateManyInputSchema ]),
  where: Project_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_usersUpdateManyArgs>

export const Project_usersDeleteManyArgsSchema: z.ZodType<Prisma.Project_usersDeleteManyArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_usersDeleteManyArgs>

export const ProjectsCreateArgsSchema: z.ZodType<Prisma.ProjectsCreateArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  data: z.union([ ProjectsCreateInputSchema,ProjectsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectsCreateArgs>

export const ProjectsUpsertArgsSchema: z.ZodType<Prisma.ProjectsUpsertArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
  create: z.union([ ProjectsCreateInputSchema,ProjectsUncheckedCreateInputSchema ]),
  update: z.union([ ProjectsUpdateInputSchema,ProjectsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectsUpsertArgs>

export const ProjectsCreateManyArgsSchema: z.ZodType<Prisma.ProjectsCreateManyArgs> = z.object({
  data: ProjectsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ProjectsCreateManyArgs>

export const ProjectsDeleteArgsSchema: z.ZodType<Prisma.ProjectsDeleteArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsDeleteArgs>

export const ProjectsUpdateArgsSchema: z.ZodType<Prisma.ProjectsUpdateArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  data: z.union([ ProjectsUpdateInputSchema,ProjectsUncheckedUpdateInputSchema ]),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsUpdateArgs>

export const ProjectsUpdateManyArgsSchema: z.ZodType<Prisma.ProjectsUpdateManyArgs> = z.object({
  data: z.union([ ProjectsUpdateManyMutationInputSchema,ProjectsUncheckedUpdateManyInputSchema ]),
  where: ProjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectsUpdateManyArgs>

export const ProjectsDeleteManyArgsSchema: z.ZodType<Prisma.ProjectsDeleteManyArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectsDeleteManyArgs>

export const SubprojectsCreateArgsSchema: z.ZodType<Prisma.SubprojectsCreateArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  data: z.union([ SubprojectsCreateInputSchema,SubprojectsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.SubprojectsCreateArgs>

export const SubprojectsUpsertArgsSchema: z.ZodType<Prisma.SubprojectsUpsertArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
  create: z.union([ SubprojectsCreateInputSchema,SubprojectsUncheckedCreateInputSchema ]),
  update: z.union([ SubprojectsUpdateInputSchema,SubprojectsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.SubprojectsUpsertArgs>

export const SubprojectsCreateManyArgsSchema: z.ZodType<Prisma.SubprojectsCreateManyArgs> = z.object({
  data: SubprojectsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsCreateManyArgs>

export const SubprojectsDeleteArgsSchema: z.ZodType<Prisma.SubprojectsDeleteArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsDeleteArgs>

export const SubprojectsUpdateArgsSchema: z.ZodType<Prisma.SubprojectsUpdateArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  data: z.union([ SubprojectsUpdateInputSchema,SubprojectsUncheckedUpdateInputSchema ]),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsUpdateArgs>

export const SubprojectsUpdateManyArgsSchema: z.ZodType<Prisma.SubprojectsUpdateManyArgs> = z.object({
  data: z.union([ SubprojectsUpdateManyMutationInputSchema,SubprojectsUncheckedUpdateManyInputSchema ]),
  where: SubprojectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.SubprojectsUpdateManyArgs>

export const SubprojectsDeleteManyArgsSchema: z.ZodType<Prisma.SubprojectsDeleteManyArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.SubprojectsDeleteManyArgs>

export const TaxaCreateArgsSchema: z.ZodType<Prisma.TaxaCreateArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  data: z.union([ TaxaCreateInputSchema,TaxaUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxaCreateArgs>

export const TaxaUpsertArgsSchema: z.ZodType<Prisma.TaxaUpsertArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
  create: z.union([ TaxaCreateInputSchema,TaxaUncheckedCreateInputSchema ]),
  update: z.union([ TaxaUpdateInputSchema,TaxaUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxaUpsertArgs>

export const TaxaCreateManyArgsSchema: z.ZodType<Prisma.TaxaCreateManyArgs> = z.object({
  data: TaxaCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaxaCreateManyArgs>

export const TaxaDeleteArgsSchema: z.ZodType<Prisma.TaxaDeleteArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaDeleteArgs>

export const TaxaUpdateArgsSchema: z.ZodType<Prisma.TaxaUpdateArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  data: z.union([ TaxaUpdateInputSchema,TaxaUncheckedUpdateInputSchema ]),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaUpdateArgs>

export const TaxaUpdateManyArgsSchema: z.ZodType<Prisma.TaxaUpdateManyArgs> = z.object({
  data: z.union([ TaxaUpdateManyMutationInputSchema,TaxaUncheckedUpdateManyInputSchema ]),
  where: TaxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxaUpdateManyArgs>

export const TaxaDeleteManyArgsSchema: z.ZodType<Prisma.TaxaDeleteManyArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxaDeleteManyArgs>

export const TaxonomiesCreateArgsSchema: z.ZodType<Prisma.TaxonomiesCreateArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  data: z.union([ TaxonomiesCreateInputSchema,TaxonomiesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxonomiesCreateArgs>

export const TaxonomiesUpsertArgsSchema: z.ZodType<Prisma.TaxonomiesUpsertArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
  create: z.union([ TaxonomiesCreateInputSchema,TaxonomiesUncheckedCreateInputSchema ]),
  update: z.union([ TaxonomiesUpdateInputSchema,TaxonomiesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxonomiesUpsertArgs>

export const TaxonomiesCreateManyArgsSchema: z.ZodType<Prisma.TaxonomiesCreateManyArgs> = z.object({
  data: TaxonomiesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesCreateManyArgs>

export const TaxonomiesDeleteArgsSchema: z.ZodType<Prisma.TaxonomiesDeleteArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesDeleteArgs>

export const TaxonomiesUpdateArgsSchema: z.ZodType<Prisma.TaxonomiesUpdateArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  data: z.union([ TaxonomiesUpdateInputSchema,TaxonomiesUncheckedUpdateInputSchema ]),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesUpdateArgs>

export const TaxonomiesUpdateManyArgsSchema: z.ZodType<Prisma.TaxonomiesUpdateManyArgs> = z.object({
  data: z.union([ TaxonomiesUpdateManyMutationInputSchema,TaxonomiesUncheckedUpdateManyInputSchema ]),
  where: TaxonomiesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesUpdateManyArgs>

export const TaxonomiesDeleteManyArgsSchema: z.ZodType<Prisma.TaxonomiesDeleteManyArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesDeleteManyArgs>

export const Ui_optionsCreateArgsSchema: z.ZodType<Prisma.Ui_optionsCreateArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  data: z.union([ Ui_optionsCreateInputSchema,Ui_optionsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Ui_optionsCreateArgs>

export const Ui_optionsUpsertArgsSchema: z.ZodType<Prisma.Ui_optionsUpsertArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
  create: z.union([ Ui_optionsCreateInputSchema,Ui_optionsUncheckedCreateInputSchema ]),
  update: z.union([ Ui_optionsUpdateInputSchema,Ui_optionsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Ui_optionsUpsertArgs>

export const Ui_optionsCreateManyArgsSchema: z.ZodType<Prisma.Ui_optionsCreateManyArgs> = z.object({
  data: Ui_optionsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsCreateManyArgs>

export const Ui_optionsDeleteArgsSchema: z.ZodType<Prisma.Ui_optionsDeleteArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsDeleteArgs>

export const Ui_optionsUpdateArgsSchema: z.ZodType<Prisma.Ui_optionsUpdateArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  data: z.union([ Ui_optionsUpdateInputSchema,Ui_optionsUncheckedUpdateInputSchema ]),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsUpdateArgs>

export const Ui_optionsUpdateManyArgsSchema: z.ZodType<Prisma.Ui_optionsUpdateManyArgs> = z.object({
  data: z.union([ Ui_optionsUpdateManyMutationInputSchema,Ui_optionsUncheckedUpdateManyInputSchema ]),
  where: Ui_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsUpdateManyArgs>

export const Ui_optionsDeleteManyArgsSchema: z.ZodType<Prisma.Ui_optionsDeleteManyArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsDeleteManyArgs>

export const User_messagesCreateArgsSchema: z.ZodType<Prisma.User_messagesCreateArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  data: z.union([ User_messagesCreateInputSchema,User_messagesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.User_messagesCreateArgs>

export const User_messagesUpsertArgsSchema: z.ZodType<Prisma.User_messagesUpsertArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
  create: z.union([ User_messagesCreateInputSchema,User_messagesUncheckedCreateInputSchema ]),
  update: z.union([ User_messagesUpdateInputSchema,User_messagesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.User_messagesUpsertArgs>

export const User_messagesCreateManyArgsSchema: z.ZodType<Prisma.User_messagesCreateManyArgs> = z.object({
  data: User_messagesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.User_messagesCreateManyArgs>

export const User_messagesDeleteArgsSchema: z.ZodType<Prisma.User_messagesDeleteArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesDeleteArgs>

export const User_messagesUpdateArgsSchema: z.ZodType<Prisma.User_messagesUpdateArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  data: z.union([ User_messagesUpdateInputSchema,User_messagesUncheckedUpdateInputSchema ]),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesUpdateArgs>

export const User_messagesUpdateManyArgsSchema: z.ZodType<Prisma.User_messagesUpdateManyArgs> = z.object({
  data: z.union([ User_messagesUpdateManyMutationInputSchema,User_messagesUncheckedUpdateManyInputSchema ]),
  where: User_messagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.User_messagesUpdateManyArgs>

export const User_messagesDeleteManyArgsSchema: z.ZodType<Prisma.User_messagesDeleteManyArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.User_messagesDeleteManyArgs>

export const UsersCreateArgsSchema: z.ZodType<Prisma.UsersCreateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.UsersCreateArgs>

export const UsersUpsertArgsSchema: z.ZodType<Prisma.UsersUpsertArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
  create: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
  update: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.UsersUpsertArgs>

export const UsersCreateManyArgsSchema: z.ZodType<Prisma.UsersCreateManyArgs> = z.object({
  data: UsersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.UsersCreateManyArgs>

export const UsersDeleteArgsSchema: z.ZodType<Prisma.UsersDeleteArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersDeleteArgs>

export const UsersUpdateArgsSchema: z.ZodType<Prisma.UsersUpdateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersUpdateArgs>

export const UsersUpdateManyArgsSchema: z.ZodType<Prisma.UsersUpdateManyArgs> = z.object({
  data: z.union([ UsersUpdateManyMutationInputSchema,UsersUncheckedUpdateManyInputSchema ]),
  where: UsersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UsersUpdateManyArgs>

export const UsersDeleteManyArgsSchema: z.ZodType<Prisma.UsersDeleteManyArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UsersDeleteManyArgs>

export const Widget_typesCreateArgsSchema: z.ZodType<Prisma.Widget_typesCreateArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  data: z.union([ Widget_typesCreateInputSchema,Widget_typesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widget_typesCreateArgs>

export const Widget_typesUpsertArgsSchema: z.ZodType<Prisma.Widget_typesUpsertArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
  create: z.union([ Widget_typesCreateInputSchema,Widget_typesUncheckedCreateInputSchema ]),
  update: z.union([ Widget_typesUpdateInputSchema,Widget_typesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widget_typesUpsertArgs>

export const Widget_typesCreateManyArgsSchema: z.ZodType<Prisma.Widget_typesCreateManyArgs> = z.object({
  data: Widget_typesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesCreateManyArgs>

export const Widget_typesDeleteArgsSchema: z.ZodType<Prisma.Widget_typesDeleteArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesDeleteArgs>

export const Widget_typesUpdateArgsSchema: z.ZodType<Prisma.Widget_typesUpdateArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  data: z.union([ Widget_typesUpdateInputSchema,Widget_typesUncheckedUpdateInputSchema ]),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesUpdateArgs>

export const Widget_typesUpdateManyArgsSchema: z.ZodType<Prisma.Widget_typesUpdateManyArgs> = z.object({
  data: z.union([ Widget_typesUpdateManyMutationInputSchema,Widget_typesUncheckedUpdateManyInputSchema ]),
  where: Widget_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widget_typesUpdateManyArgs>

export const Widget_typesDeleteManyArgsSchema: z.ZodType<Prisma.Widget_typesDeleteManyArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widget_typesDeleteManyArgs>

export const Widgets_for_fieldsCreateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  data: z.union([ Widgets_for_fieldsCreateInputSchema,Widgets_for_fieldsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsCreateArgs>

export const Widgets_for_fieldsUpsertArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
  create: z.union([ Widgets_for_fieldsCreateInputSchema,Widgets_for_fieldsUncheckedCreateInputSchema ]),
  update: z.union([ Widgets_for_fieldsUpdateInputSchema,Widgets_for_fieldsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpsertArgs>

export const Widgets_for_fieldsCreateManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyArgs> = z.object({
  data: Widgets_for_fieldsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsCreateManyArgs>

export const Widgets_for_fieldsDeleteArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsDeleteArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsDeleteArgs>

export const Widgets_for_fieldsUpdateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  data: z.union([ Widgets_for_fieldsUpdateInputSchema,Widgets_for_fieldsUncheckedUpdateInputSchema ]),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpdateArgs>

export const Widgets_for_fieldsUpdateManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyArgs> = z.object({
  data: z.union([ Widgets_for_fieldsUpdateManyMutationInputSchema,Widgets_for_fieldsUncheckedUpdateManyInputSchema ]),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpdateManyArgs>

export const Widgets_for_fieldsDeleteManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsDeleteManyArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsDeleteManyArgs>

interface AccountsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.AccountsArgs
  readonly type: Prisma.AccountsGetPayload<this['_A']>
}

interface Field_typesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Field_typesArgs
  readonly type: Prisma.Field_typesGetPayload<this['_A']>
}

interface Gbif_occurrence_downloadsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_occurrence_downloadsArgs
  readonly type: Prisma.Gbif_occurrence_downloadsGetPayload<this['_A']>
}

interface Gbif_occurrencesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_occurrencesArgs
  readonly type: Prisma.Gbif_occurrencesGetPayload<this['_A']>
}

interface Gbif_taxaGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_taxaArgs
  readonly type: Prisma.Gbif_taxaGetPayload<this['_A']>
}

interface ListsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ListsArgs
  readonly type: Prisma.ListsGetPayload<this['_A']>
}

interface MessagesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.MessagesArgs
  readonly type: Prisma.MessagesGetPayload<this['_A']>
}

interface PersonsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.PersonsArgs
  readonly type: Prisma.PersonsGetPayload<this['_A']>
}

interface Place_levelsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Place_levelsArgs
  readonly type: Prisma.Place_levelsGetPayload<this['_A']>
}

interface Project_usersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Project_usersArgs
  readonly type: Prisma.Project_usersGetPayload<this['_A']>
}

interface ProjectsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ProjectsArgs
  readonly type: Prisma.ProjectsGetPayload<this['_A']>
}

interface SubprojectsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.SubprojectsArgs
  readonly type: Prisma.SubprojectsGetPayload<this['_A']>
}

interface TaxaGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaxaArgs
  readonly type: Prisma.TaxaGetPayload<this['_A']>
}

interface TaxonomiesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaxonomiesArgs
  readonly type: Prisma.TaxonomiesGetPayload<this['_A']>
}

interface Ui_optionsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Ui_optionsArgs
  readonly type: Prisma.Ui_optionsGetPayload<this['_A']>
}

interface User_messagesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.User_messagesArgs
  readonly type: Prisma.User_messagesGetPayload<this['_A']>
}

interface UsersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.UsersArgs
  readonly type: Prisma.UsersGetPayload<this['_A']>
}

interface Widget_typesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Widget_typesArgs
  readonly type: Prisma.Widget_typesGetPayload<this['_A']>
}

interface Widgets_for_fieldsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Widgets_for_fieldsArgs
  readonly type: Prisma.Widgets_for_fieldsGetPayload<this['_A']>
}

export const tableSchemas = {
  accounts: {
    fields: new Map([
      [
        "account_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "period_start",
        "DATE"
      ],
      [
        "period_end",
        "DATE"
      ],
      [
        "projects_label_by",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("users", "user_id", "user_id", "users", "AccountsToUsers", "one"),
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "AccountsToGbif_occurrence_downloads", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "AccountsToGbif_occurrences", "many"),
      new Relation("gbif_taxa", "", "", "gbif_taxa", "AccountsToGbif_taxa", "many"),
      new Relation("lists", "", "", "lists", "AccountsToLists", "many"),
      new Relation("persons", "", "", "persons", "AccountsToPersons", "many"),
      new Relation("place_levels", "", "", "place_levels", "AccountsToPlace_levels", "many"),
      new Relation("project_users", "", "", "project_users", "AccountsToProject_users", "many"),
      new Relation("projects", "", "", "projects", "AccountsToProjects", "many"),
      new Relation("subprojects", "", "", "subprojects", "AccountsToSubprojects", "many"),
      new Relation("taxa", "", "", "taxa", "AccountsToTaxa", "many"),
      new Relation("taxonomies", "", "", "taxonomies", "AccountsToTaxonomies", "many"),
      new Relation("ui_options", "", "", "ui_options", "AccountsToUi_options", "many"),
      new Relation("user_messages", "", "", "user_messages", "AccountsToUser_messages", "many"),
    ],
    modelSchema: (AccountsCreateInputSchema as any)
      .partial()
      .or((AccountsUncheckedCreateInputSchema as any).partial()),
    createSchema: AccountsCreateArgsSchema,
    createManySchema: AccountsCreateManyArgsSchema,
    findUniqueSchema: AccountsFindUniqueArgsSchema,
    findSchema: AccountsFindFirstArgsSchema,
    updateSchema: AccountsUpdateArgsSchema,
    updateManySchema: AccountsUpdateManyArgsSchema,
    upsertSchema: AccountsUpsertArgsSchema,
    deleteSchema: AccountsDeleteArgsSchema,
    deleteManySchema: AccountsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof AccountsCreateInputSchema>,
    Prisma.AccountsCreateArgs['data'],
    Prisma.AccountsUpdateArgs['data'],
    Prisma.AccountsFindFirstArgs['select'],
    Prisma.AccountsFindFirstArgs['where'],
    Prisma.AccountsFindUniqueArgs['where'],
    Omit<Prisma.AccountsInclude, '_count'>,
    Prisma.AccountsFindFirstArgs['orderBy'],
    Prisma.AccountsScalarFieldEnum,
    AccountsGetPayload
  >,
  field_types: {
    fields: new Map([
      [
        "field_type_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "comment",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("widgets_for_fields", "", "", "widgets_for_fields", "Field_typesToWidgets_for_fields", "many"),
    ],
    modelSchema: (Field_typesCreateInputSchema as any)
      .partial()
      .or((Field_typesUncheckedCreateInputSchema as any).partial()),
    createSchema: Field_typesCreateArgsSchema,
    createManySchema: Field_typesCreateManyArgsSchema,
    findUniqueSchema: Field_typesFindUniqueArgsSchema,
    findSchema: Field_typesFindFirstArgsSchema,
    updateSchema: Field_typesUpdateArgsSchema,
    updateManySchema: Field_typesUpdateManyArgsSchema,
    upsertSchema: Field_typesUpsertArgsSchema,
    deleteSchema: Field_typesDeleteArgsSchema,
    deleteManySchema: Field_typesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Field_typesCreateInputSchema>,
    Prisma.Field_typesCreateArgs['data'],
    Prisma.Field_typesUpdateArgs['data'],
    Prisma.Field_typesFindFirstArgs['select'],
    Prisma.Field_typesFindFirstArgs['where'],
    Prisma.Field_typesFindUniqueArgs['where'],
    Omit<Prisma.Field_typesInclude, '_count'>,
    Prisma.Field_typesFindFirstArgs['orderBy'],
    Prisma.Field_typesScalarFieldEnum,
    Field_typesGetPayload
  >,
  gbif_occurrence_downloads: {
    fields: new Map([
      [
        "gbif_occurrence_download_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "gbif_table",
        "TEXT"
      ],
      [
        "filters",
        "JSONB"
      ],
      [
        "created_time",
        "TIMESTAMPTZ"
      ],
      [
        "download_key",
        "TEXT"
      ],
      [
        "error",
        "TEXT"
      ],
      [
        "inserted_time",
        "TIMESTAMPTZ"
      ],
      [
        "inserted_count",
        "INT4"
      ],
      [
        "attribution",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_occurrence_downloads", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_occurrence_downloadsToProjects", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Gbif_occurrence_downloadsToSubprojects", "one"),
    ],
    modelSchema: (Gbif_occurrence_downloadsCreateInputSchema as any)
      .partial()
      .or((Gbif_occurrence_downloadsUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_occurrence_downloadsCreateArgsSchema,
    createManySchema: Gbif_occurrence_downloadsCreateManyArgsSchema,
    findUniqueSchema: Gbif_occurrence_downloadsFindUniqueArgsSchema,
    findSchema: Gbif_occurrence_downloadsFindFirstArgsSchema,
    updateSchema: Gbif_occurrence_downloadsUpdateArgsSchema,
    updateManySchema: Gbif_occurrence_downloadsUpdateManyArgsSchema,
    upsertSchema: Gbif_occurrence_downloadsUpsertArgsSchema,
    deleteSchema: Gbif_occurrence_downloadsDeleteArgsSchema,
    deleteManySchema: Gbif_occurrence_downloadsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_occurrence_downloadsCreateInputSchema>,
    Prisma.Gbif_occurrence_downloadsCreateArgs['data'],
    Prisma.Gbif_occurrence_downloadsUpdateArgs['data'],
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['select'],
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['where'],
    Prisma.Gbif_occurrence_downloadsFindUniqueArgs['where'],
    Omit<Prisma.Gbif_occurrence_downloadsInclude, '_count'>,
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['orderBy'],
    Prisma.Gbif_occurrence_downloadsScalarFieldEnum,
    Gbif_occurrence_downloadsGetPayload
  >,
  gbif_occurrences: {
    fields: new Map([
      [
        "gbif_occurrence_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "gbif_data",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_occurrences", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_occurrencesToProjects", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Gbif_occurrencesToSubprojects", "one"),
    ],
    modelSchema: (Gbif_occurrencesCreateInputSchema as any)
      .partial()
      .or((Gbif_occurrencesUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_occurrencesCreateArgsSchema,
    createManySchema: Gbif_occurrencesCreateManyArgsSchema,
    findUniqueSchema: Gbif_occurrencesFindUniqueArgsSchema,
    findSchema: Gbif_occurrencesFindFirstArgsSchema,
    updateSchema: Gbif_occurrencesUpdateArgsSchema,
    updateManySchema: Gbif_occurrencesUpdateManyArgsSchema,
    upsertSchema: Gbif_occurrencesUpsertArgsSchema,
    deleteSchema: Gbif_occurrencesDeleteArgsSchema,
    deleteManySchema: Gbif_occurrencesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_occurrencesCreateInputSchema>,
    Prisma.Gbif_occurrencesCreateArgs['data'],
    Prisma.Gbif_occurrencesUpdateArgs['data'],
    Prisma.Gbif_occurrencesFindFirstArgs['select'],
    Prisma.Gbif_occurrencesFindFirstArgs['where'],
    Prisma.Gbif_occurrencesFindUniqueArgs['where'],
    Omit<Prisma.Gbif_occurrencesInclude, '_count'>,
    Prisma.Gbif_occurrencesFindFirstArgs['orderBy'],
    Prisma.Gbif_occurrencesScalarFieldEnum,
    Gbif_occurrencesGetPayload
  >,
  gbif_taxa: {
    fields: new Map([
      [
        "gbif_taxon_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "gbif_data",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_taxa", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_taxaToProjects", "one"),
    ],
    modelSchema: (Gbif_taxaCreateInputSchema as any)
      .partial()
      .or((Gbif_taxaUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_taxaCreateArgsSchema,
    createManySchema: Gbif_taxaCreateManyArgsSchema,
    findUniqueSchema: Gbif_taxaFindUniqueArgsSchema,
    findSchema: Gbif_taxaFindFirstArgsSchema,
    updateSchema: Gbif_taxaUpdateArgsSchema,
    updateManySchema: Gbif_taxaUpdateManyArgsSchema,
    upsertSchema: Gbif_taxaUpsertArgsSchema,
    deleteSchema: Gbif_taxaDeleteArgsSchema,
    deleteManySchema: Gbif_taxaDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_taxaCreateInputSchema>,
    Prisma.Gbif_taxaCreateArgs['data'],
    Prisma.Gbif_taxaUpdateArgs['data'],
    Prisma.Gbif_taxaFindFirstArgs['select'],
    Prisma.Gbif_taxaFindFirstArgs['where'],
    Prisma.Gbif_taxaFindUniqueArgs['where'],
    Omit<Prisma.Gbif_taxaInclude, '_count'>,
    Prisma.Gbif_taxaFindFirstArgs['orderBy'],
    Prisma.Gbif_taxaScalarFieldEnum,
    Gbif_taxaGetPayload
  >,
  lists: {
    fields: new Map([
      [
        "list_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToLists", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ListsToProjects", "one"),
    ],
    modelSchema: (ListsCreateInputSchema as any)
      .partial()
      .or((ListsUncheckedCreateInputSchema as any).partial()),
    createSchema: ListsCreateArgsSchema,
    createManySchema: ListsCreateManyArgsSchema,
    findUniqueSchema: ListsFindUniqueArgsSchema,
    findSchema: ListsFindFirstArgsSchema,
    updateSchema: ListsUpdateArgsSchema,
    updateManySchema: ListsUpdateManyArgsSchema,
    upsertSchema: ListsUpsertArgsSchema,
    deleteSchema: ListsDeleteArgsSchema,
    deleteManySchema: ListsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ListsCreateInputSchema>,
    Prisma.ListsCreateArgs['data'],
    Prisma.ListsUpdateArgs['data'],
    Prisma.ListsFindFirstArgs['select'],
    Prisma.ListsFindFirstArgs['where'],
    Prisma.ListsFindUniqueArgs['where'],
    Omit<Prisma.ListsInclude, '_count'>,
    Prisma.ListsFindFirstArgs['orderBy'],
    Prisma.ListsScalarFieldEnum,
    ListsGetPayload
  >,
  messages: {
    fields: new Map([
      [
        "message_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "date",
        "TIMESTAMP"
      ],
      [
        "message",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("user_messages", "", "", "user_messages", "MessagesToUser_messages", "many"),
    ],
    modelSchema: (MessagesCreateInputSchema as any)
      .partial()
      .or((MessagesUncheckedCreateInputSchema as any).partial()),
    createSchema: MessagesCreateArgsSchema,
    createManySchema: MessagesCreateManyArgsSchema,
    findUniqueSchema: MessagesFindUniqueArgsSchema,
    findSchema: MessagesFindFirstArgsSchema,
    updateSchema: MessagesUpdateArgsSchema,
    updateManySchema: MessagesUpdateManyArgsSchema,
    upsertSchema: MessagesUpsertArgsSchema,
    deleteSchema: MessagesDeleteArgsSchema,
    deleteManySchema: MessagesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof MessagesCreateInputSchema>,
    Prisma.MessagesCreateArgs['data'],
    Prisma.MessagesUpdateArgs['data'],
    Prisma.MessagesFindFirstArgs['select'],
    Prisma.MessagesFindFirstArgs['where'],
    Prisma.MessagesFindUniqueArgs['where'],
    Omit<Prisma.MessagesInclude, '_count'>,
    Prisma.MessagesFindFirstArgs['orderBy'],
    Prisma.MessagesScalarFieldEnum,
    MessagesGetPayload
  >,
  persons: {
    fields: new Map([
      [
        "person_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "email",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToPersons", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "PersonsToProjects", "one"),
    ],
    modelSchema: (PersonsCreateInputSchema as any)
      .partial()
      .or((PersonsUncheckedCreateInputSchema as any).partial()),
    createSchema: PersonsCreateArgsSchema,
    createManySchema: PersonsCreateManyArgsSchema,
    findUniqueSchema: PersonsFindUniqueArgsSchema,
    findSchema: PersonsFindFirstArgsSchema,
    updateSchema: PersonsUpdateArgsSchema,
    updateManySchema: PersonsUpdateManyArgsSchema,
    upsertSchema: PersonsUpsertArgsSchema,
    deleteSchema: PersonsDeleteArgsSchema,
    deleteManySchema: PersonsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof PersonsCreateInputSchema>,
    Prisma.PersonsCreateArgs['data'],
    Prisma.PersonsUpdateArgs['data'],
    Prisma.PersonsFindFirstArgs['select'],
    Prisma.PersonsFindFirstArgs['where'],
    Prisma.PersonsFindUniqueArgs['where'],
    Omit<Prisma.PersonsInclude, '_count'>,
    Prisma.PersonsFindFirstArgs['orderBy'],
    Prisma.PersonsScalarFieldEnum,
    PersonsGetPayload
  >,
  place_levels: {
    fields: new Map([
      [
        "place_level_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "level",
        "INT4"
      ],
      [
        "name_singular",
        "TEXT"
      ],
      [
        "name_plural",
        "TEXT"
      ],
      [
        "name_short",
        "TEXT"
      ],
      [
        "reports",
        "BOOL"
      ],
      [
        "report_values",
        "BOOL"
      ],
      [
        "actions",
        "BOOL"
      ],
      [
        "action_values",
        "BOOL"
      ],
      [
        "action_reports",
        "BOOL"
      ],
      [
        "checks",
        "BOOL"
      ],
      [
        "check_values",
        "BOOL"
      ],
      [
        "check_taxa",
        "BOOL"
      ],
      [
        "observations",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToPlace_levels", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Place_levelsToProjects", "one"),
    ],
    modelSchema: (Place_levelsCreateInputSchema as any)
      .partial()
      .or((Place_levelsUncheckedCreateInputSchema as any).partial()),
    createSchema: Place_levelsCreateArgsSchema,
    createManySchema: Place_levelsCreateManyArgsSchema,
    findUniqueSchema: Place_levelsFindUniqueArgsSchema,
    findSchema: Place_levelsFindFirstArgsSchema,
    updateSchema: Place_levelsUpdateArgsSchema,
    updateManySchema: Place_levelsUpdateManyArgsSchema,
    upsertSchema: Place_levelsUpsertArgsSchema,
    deleteSchema: Place_levelsDeleteArgsSchema,
    deleteManySchema: Place_levelsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Place_levelsCreateInputSchema>,
    Prisma.Place_levelsCreateArgs['data'],
    Prisma.Place_levelsUpdateArgs['data'],
    Prisma.Place_levelsFindFirstArgs['select'],
    Prisma.Place_levelsFindFirstArgs['where'],
    Prisma.Place_levelsFindUniqueArgs['where'],
    Omit<Prisma.Place_levelsInclude, '_count'>,
    Prisma.Place_levelsFindFirstArgs['orderBy'],
    Prisma.Place_levelsScalarFieldEnum,
    Place_levelsGetPayload
  >,
  project_users: {
    fields: new Map([
      [
        "project_user_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "role",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToProject_users", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Project_usersToProjects", "one"),
      new Relation("users", "user_id", "user_id", "users", "Project_usersToUsers", "one"),
    ],
    modelSchema: (Project_usersCreateInputSchema as any)
      .partial()
      .or((Project_usersUncheckedCreateInputSchema as any).partial()),
    createSchema: Project_usersCreateArgsSchema,
    createManySchema: Project_usersCreateManyArgsSchema,
    findUniqueSchema: Project_usersFindUniqueArgsSchema,
    findSchema: Project_usersFindFirstArgsSchema,
    updateSchema: Project_usersUpdateArgsSchema,
    updateManySchema: Project_usersUpdateManyArgsSchema,
    upsertSchema: Project_usersUpsertArgsSchema,
    deleteSchema: Project_usersDeleteArgsSchema,
    deleteManySchema: Project_usersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Project_usersCreateInputSchema>,
    Prisma.Project_usersCreateArgs['data'],
    Prisma.Project_usersUpdateArgs['data'],
    Prisma.Project_usersFindFirstArgs['select'],
    Prisma.Project_usersFindFirstArgs['where'],
    Prisma.Project_usersFindUniqueArgs['where'],
    Omit<Prisma.Project_usersInclude, '_count'>,
    Prisma.Project_usersFindFirstArgs['orderBy'],
    Prisma.Project_usersScalarFieldEnum,
    Project_usersGetPayload
  >,
  projects: {
    fields: new Map([
      [
        "project_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "subproject_name_singular",
        "TEXT"
      ],
      [
        "subproject_name_plural",
        "TEXT"
      ],
      [
        "subproject_order_by",
        "TEXT"
      ],
      [
        "places_label_by",
        "TEXT"
      ],
      [
        "places_order_by",
        "JSONB"
      ],
      [
        "persons_label_by",
        "TEXT"
      ],
      [
        "persons_order_by",
        "TEXT"
      ],
      [
        "goal_reports_label_by",
        "TEXT"
      ],
      [
        "goal_reports_order_by",
        "TEXT"
      ],
      [
        "values_on_multiple_levels",
        "TEXT"
      ],
      [
        "multiple_action_values_on_same_level",
        "TEXT"
      ],
      [
        "multiple_check_values_on_same_level",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "files_offline",
        "BOOL"
      ],
      [
        "files_active_projects",
        "BOOL"
      ],
      [
        "files_active_subprojects",
        "BOOL"
      ],
      [
        "files_active_places",
        "BOOL"
      ],
      [
        "files_active_actions",
        "BOOL"
      ],
      [
        "files_active_checks",
        "BOOL"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "Gbif_occurrence_downloadsToProjects", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "Gbif_occurrencesToProjects", "many"),
      new Relation("gbif_taxa", "", "", "gbif_taxa", "Gbif_taxaToProjects", "many"),
      new Relation("lists", "", "", "lists", "ListsToProjects", "many"),
      new Relation("persons", "", "", "persons", "PersonsToProjects", "many"),
      new Relation("place_levels", "", "", "place_levels", "Place_levelsToProjects", "many"),
      new Relation("project_users", "", "", "project_users", "Project_usersToProjects", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToProjects", "one"),
      new Relation("subprojects", "", "", "subprojects", "ProjectsToSubprojects", "many"),
      new Relation("taxonomies", "", "", "taxonomies", "ProjectsToTaxonomies", "many"),
    ],
    modelSchema: (ProjectsCreateInputSchema as any)
      .partial()
      .or((ProjectsUncheckedCreateInputSchema as any).partial()),
    createSchema: ProjectsCreateArgsSchema,
    createManySchema: ProjectsCreateManyArgsSchema,
    findUniqueSchema: ProjectsFindUniqueArgsSchema,
    findSchema: ProjectsFindFirstArgsSchema,
    updateSchema: ProjectsUpdateArgsSchema,
    updateManySchema: ProjectsUpdateManyArgsSchema,
    upsertSchema: ProjectsUpsertArgsSchema,
    deleteSchema: ProjectsDeleteArgsSchema,
    deleteManySchema: ProjectsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ProjectsCreateInputSchema>,
    Prisma.ProjectsCreateArgs['data'],
    Prisma.ProjectsUpdateArgs['data'],
    Prisma.ProjectsFindFirstArgs['select'],
    Prisma.ProjectsFindFirstArgs['where'],
    Prisma.ProjectsFindUniqueArgs['where'],
    Omit<Prisma.ProjectsInclude, '_count'>,
    Prisma.ProjectsFindFirstArgs['orderBy'],
    Prisma.ProjectsScalarFieldEnum,
    ProjectsGetPayload
  >,
  subprojects: {
    fields: new Map([
      [
        "subproject_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "start_year",
        "INT4"
      ],
      [
        "end_year",
        "INT4"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "Gbif_occurrence_downloadsToSubprojects", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "Gbif_occurrencesToSubprojects", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToSubprojects", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToSubprojects", "one"),
    ],
    modelSchema: (SubprojectsCreateInputSchema as any)
      .partial()
      .or((SubprojectsUncheckedCreateInputSchema as any).partial()),
    createSchema: SubprojectsCreateArgsSchema,
    createManySchema: SubprojectsCreateManyArgsSchema,
    findUniqueSchema: SubprojectsFindUniqueArgsSchema,
    findSchema: SubprojectsFindFirstArgsSchema,
    updateSchema: SubprojectsUpdateArgsSchema,
    updateManySchema: SubprojectsUpdateManyArgsSchema,
    upsertSchema: SubprojectsUpsertArgsSchema,
    deleteSchema: SubprojectsDeleteArgsSchema,
    deleteManySchema: SubprojectsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof SubprojectsCreateInputSchema>,
    Prisma.SubprojectsCreateArgs['data'],
    Prisma.SubprojectsUpdateArgs['data'],
    Prisma.SubprojectsFindFirstArgs['select'],
    Prisma.SubprojectsFindFirstArgs['where'],
    Prisma.SubprojectsFindUniqueArgs['where'],
    Omit<Prisma.SubprojectsInclude, '_count'>,
    Prisma.SubprojectsFindFirstArgs['orderBy'],
    Prisma.SubprojectsScalarFieldEnum,
    SubprojectsGetPayload
  >,
  taxa: {
    fields: new Map([
      [
        "taxon_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "taxonomy_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "id_in_source",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToTaxa", "one"),
      new Relation("taxonomies", "taxonomy_id", "taxonomy_id", "taxonomies", "TaxaToTaxonomies", "one"),
    ],
    modelSchema: (TaxaCreateInputSchema as any)
      .partial()
      .or((TaxaUncheckedCreateInputSchema as any).partial()),
    createSchema: TaxaCreateArgsSchema,
    createManySchema: TaxaCreateManyArgsSchema,
    findUniqueSchema: TaxaFindUniqueArgsSchema,
    findSchema: TaxaFindFirstArgsSchema,
    updateSchema: TaxaUpdateArgsSchema,
    updateManySchema: TaxaUpdateManyArgsSchema,
    upsertSchema: TaxaUpsertArgsSchema,
    deleteSchema: TaxaDeleteArgsSchema,
    deleteManySchema: TaxaDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaxaCreateInputSchema>,
    Prisma.TaxaCreateArgs['data'],
    Prisma.TaxaUpdateArgs['data'],
    Prisma.TaxaFindFirstArgs['select'],
    Prisma.TaxaFindFirstArgs['where'],
    Prisma.TaxaFindUniqueArgs['where'],
    Omit<Prisma.TaxaInclude, '_count'>,
    Prisma.TaxaFindFirstArgs['orderBy'],
    Prisma.TaxaScalarFieldEnum,
    TaxaGetPayload
  >,
  taxonomies: {
    fields: new Map([
      [
        "taxonomy_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("taxa", "", "", "taxa", "TaxaToTaxonomies", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToTaxonomies", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToTaxonomies", "one"),
    ],
    modelSchema: (TaxonomiesCreateInputSchema as any)
      .partial()
      .or((TaxonomiesUncheckedCreateInputSchema as any).partial()),
    createSchema: TaxonomiesCreateArgsSchema,
    createManySchema: TaxonomiesCreateManyArgsSchema,
    findUniqueSchema: TaxonomiesFindUniqueArgsSchema,
    findSchema: TaxonomiesFindFirstArgsSchema,
    updateSchema: TaxonomiesUpdateArgsSchema,
    updateManySchema: TaxonomiesUpdateManyArgsSchema,
    upsertSchema: TaxonomiesUpsertArgsSchema,
    deleteSchema: TaxonomiesDeleteArgsSchema,
    deleteManySchema: TaxonomiesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaxonomiesCreateInputSchema>,
    Prisma.TaxonomiesCreateArgs['data'],
    Prisma.TaxonomiesUpdateArgs['data'],
    Prisma.TaxonomiesFindFirstArgs['select'],
    Prisma.TaxonomiesFindFirstArgs['where'],
    Prisma.TaxonomiesFindUniqueArgs['where'],
    Omit<Prisma.TaxonomiesInclude, '_count'>,
    Prisma.TaxonomiesFindFirstArgs['orderBy'],
    Prisma.TaxonomiesScalarFieldEnum,
    TaxonomiesGetPayload
  >,
  ui_options: {
    fields: new Map([
      [
        "user_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "designing",
        "BOOL"
      ],
      [
        "breadcrumbs_overflowing",
        "BOOL"
      ],
      [
        "navs_overflowing",
        "BOOL"
      ],
      [
        "tabs",
        "JSONB"
      ],
      [
        "show_map",
        "BOOL"
      ],
      [
        "map_bounds",
        "JSONB"
      ],
      [
        "local_map_show",
        "JSONB"
      ],
      [
        "tile_layer_sorter",
        "TEXT"
      ],
      [
        "vector_layer_sorter",
        "TEXT"
      ],
      [
        "editing_place_geometry",
        "UUID"
      ],
      [
        "editing_check_geometry",
        "UUID"
      ],
      [
        "editing_action_geometry",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToUi_options", "one"),
      new Relation("users", "user_id", "user_id", "users", "Ui_optionsToUsers", "one"),
    ],
    modelSchema: (Ui_optionsCreateInputSchema as any)
      .partial()
      .or((Ui_optionsUncheckedCreateInputSchema as any).partial()),
    createSchema: Ui_optionsCreateArgsSchema,
    createManySchema: Ui_optionsCreateManyArgsSchema,
    findUniqueSchema: Ui_optionsFindUniqueArgsSchema,
    findSchema: Ui_optionsFindFirstArgsSchema,
    updateSchema: Ui_optionsUpdateArgsSchema,
    updateManySchema: Ui_optionsUpdateManyArgsSchema,
    upsertSchema: Ui_optionsUpsertArgsSchema,
    deleteSchema: Ui_optionsDeleteArgsSchema,
    deleteManySchema: Ui_optionsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Ui_optionsCreateInputSchema>,
    Prisma.Ui_optionsCreateArgs['data'],
    Prisma.Ui_optionsUpdateArgs['data'],
    Prisma.Ui_optionsFindFirstArgs['select'],
    Prisma.Ui_optionsFindFirstArgs['where'],
    Prisma.Ui_optionsFindUniqueArgs['where'],
    Omit<Prisma.Ui_optionsInclude, '_count'>,
    Prisma.Ui_optionsFindFirstArgs['orderBy'],
    Prisma.Ui_optionsScalarFieldEnum,
    Ui_optionsGetPayload
  >,
  user_messages: {
    fields: new Map([
      [
        "user_message_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "message_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "read",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToUser_messages", "one"),
      new Relation("messages", "message_id", "message_id", "messages", "MessagesToUser_messages", "one"),
      new Relation("users", "user_id", "user_id", "users", "User_messagesToUsers", "one"),
    ],
    modelSchema: (User_messagesCreateInputSchema as any)
      .partial()
      .or((User_messagesUncheckedCreateInputSchema as any).partial()),
    createSchema: User_messagesCreateArgsSchema,
    createManySchema: User_messagesCreateManyArgsSchema,
    findUniqueSchema: User_messagesFindUniqueArgsSchema,
    findSchema: User_messagesFindFirstArgsSchema,
    updateSchema: User_messagesUpdateArgsSchema,
    updateManySchema: User_messagesUpdateManyArgsSchema,
    upsertSchema: User_messagesUpsertArgsSchema,
    deleteSchema: User_messagesDeleteArgsSchema,
    deleteManySchema: User_messagesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof User_messagesCreateInputSchema>,
    Prisma.User_messagesCreateArgs['data'],
    Prisma.User_messagesUpdateArgs['data'],
    Prisma.User_messagesFindFirstArgs['select'],
    Prisma.User_messagesFindFirstArgs['where'],
    Prisma.User_messagesFindUniqueArgs['where'],
    Omit<Prisma.User_messagesInclude, '_count'>,
    Prisma.User_messagesFindFirstArgs['orderBy'],
    Prisma.User_messagesScalarFieldEnum,
    User_messagesGetPayload
  >,
  users: {
    fields: new Map([
      [
        "user_id",
        "UUID"
      ],
      [
        "email",
        "TEXT"
      ],
      [
        "auth_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "", "", "accounts", "AccountsToUsers", "many"),
      new Relation("project_users", "", "", "project_users", "Project_usersToUsers", "many"),
      new Relation("ui_options", "", "", "ui_options", "Ui_optionsToUsers", "one"),
      new Relation("user_messages", "", "", "user_messages", "User_messagesToUsers", "many"),
    ],
    modelSchema: (UsersCreateInputSchema as any)
      .partial()
      .or((UsersUncheckedCreateInputSchema as any).partial()),
    createSchema: UsersCreateArgsSchema,
    createManySchema: UsersCreateManyArgsSchema,
    findUniqueSchema: UsersFindUniqueArgsSchema,
    findSchema: UsersFindFirstArgsSchema,
    updateSchema: UsersUpdateArgsSchema,
    updateManySchema: UsersUpdateManyArgsSchema,
    upsertSchema: UsersUpsertArgsSchema,
    deleteSchema: UsersDeleteArgsSchema,
    deleteManySchema: UsersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof UsersCreateInputSchema>,
    Prisma.UsersCreateArgs['data'],
    Prisma.UsersUpdateArgs['data'],
    Prisma.UsersFindFirstArgs['select'],
    Prisma.UsersFindFirstArgs['where'],
    Prisma.UsersFindUniqueArgs['where'],
    Omit<Prisma.UsersInclude, '_count'>,
    Prisma.UsersFindFirstArgs['orderBy'],
    Prisma.UsersScalarFieldEnum,
    UsersGetPayload
  >,
  widget_types: {
    fields: new Map([
      [
        "widget_type_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "needs_list",
        "BOOL"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "comment",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("widgets_for_fields", "", "", "widgets_for_fields", "Widget_typesToWidgets_for_fields", "many"),
    ],
    modelSchema: (Widget_typesCreateInputSchema as any)
      .partial()
      .or((Widget_typesUncheckedCreateInputSchema as any).partial()),
    createSchema: Widget_typesCreateArgsSchema,
    createManySchema: Widget_typesCreateManyArgsSchema,
    findUniqueSchema: Widget_typesFindUniqueArgsSchema,
    findSchema: Widget_typesFindFirstArgsSchema,
    updateSchema: Widget_typesUpdateArgsSchema,
    updateManySchema: Widget_typesUpdateManyArgsSchema,
    upsertSchema: Widget_typesUpsertArgsSchema,
    deleteSchema: Widget_typesDeleteArgsSchema,
    deleteManySchema: Widget_typesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Widget_typesCreateInputSchema>,
    Prisma.Widget_typesCreateArgs['data'],
    Prisma.Widget_typesUpdateArgs['data'],
    Prisma.Widget_typesFindFirstArgs['select'],
    Prisma.Widget_typesFindFirstArgs['where'],
    Prisma.Widget_typesFindUniqueArgs['where'],
    Omit<Prisma.Widget_typesInclude, '_count'>,
    Prisma.Widget_typesFindFirstArgs['orderBy'],
    Prisma.Widget_typesScalarFieldEnum,
    Widget_typesGetPayload
  >,
  widgets_for_fields: {
    fields: new Map([
      [
        "widget_for_field_id",
        "UUID"
      ],
      [
        "field_type_id",
        "UUID"
      ],
      [
        "widget_type_id",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("field_types", "field_type_id", "field_type_id", "field_types", "Field_typesToWidgets_for_fields", "one"),
      new Relation("widget_types", "widget_type_id", "widget_type_id", "widget_types", "Widget_typesToWidgets_for_fields", "one"),
    ],
    modelSchema: (Widgets_for_fieldsCreateInputSchema as any)
      .partial()
      .or((Widgets_for_fieldsUncheckedCreateInputSchema as any).partial()),
    createSchema: Widgets_for_fieldsCreateArgsSchema,
    createManySchema: Widgets_for_fieldsCreateManyArgsSchema,
    findUniqueSchema: Widgets_for_fieldsFindUniqueArgsSchema,
    findSchema: Widgets_for_fieldsFindFirstArgsSchema,
    updateSchema: Widgets_for_fieldsUpdateArgsSchema,
    updateManySchema: Widgets_for_fieldsUpdateManyArgsSchema,
    upsertSchema: Widgets_for_fieldsUpsertArgsSchema,
    deleteSchema: Widgets_for_fieldsDeleteArgsSchema,
    deleteManySchema: Widgets_for_fieldsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Widgets_for_fieldsCreateInputSchema>,
    Prisma.Widgets_for_fieldsCreateArgs['data'],
    Prisma.Widgets_for_fieldsUpdateArgs['data'],
    Prisma.Widgets_for_fieldsFindFirstArgs['select'],
    Prisma.Widgets_for_fieldsFindFirstArgs['where'],
    Prisma.Widgets_for_fieldsFindUniqueArgs['where'],
    Omit<Prisma.Widgets_for_fieldsInclude, '_count'>,
    Prisma.Widgets_for_fieldsFindFirstArgs['orderBy'],
    Prisma.Widgets_for_fieldsScalarFieldEnum,
    Widgets_for_fieldsGetPayload
  >,
}

export const schema = new DbSchema(tableSchemas, migrations)
export type Electric = ElectricClient<typeof schema>
export const JsonNull = { __is_electric_json_null__: true }
