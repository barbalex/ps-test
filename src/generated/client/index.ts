import { z } from 'zod';
import type { Prisma } from './prismaClient';
import { type TableSchema, DbSchema, Relation, ElectricClient, type HKT } from 'electric-sql/client/model';
import migrations from './migrations';

/////////////////////////////////////////
// HELPER FUNCTIONS
/////////////////////////////////////////

// JSON
//------------------------------------------------------

export type NullableJsonInput = Prisma.JsonValue | null;


export const JsonValue: z.ZodType<Prisma.JsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(JsonValue)),
  z.lazy(() => z.record(JsonValue)),
]);

export type JsonValueType = z.infer<typeof JsonValue>;

export const NullableJsonValue = JsonValue
  .nullable();

export type NullableJsonValueType = z.infer<typeof NullableJsonValue>;

export const InputJsonValue: z.ZodType<Prisma.InputJsonValue> = z.union([
  z.null(),
  z.string(),
  z.number(),
  z.boolean(),
  z.lazy(() => z.array(InputJsonValue.nullable())),
  z.lazy(() => z.record(InputJsonValue.nullable())),
]);

export type InputJsonValueType = z.infer<typeof InputJsonValue>;


/////////////////////////////////////////
// ENUMS
/////////////////////////////////////////

export const AccountsScalarFieldEnumSchema = z.enum(['account_id','user_id','type','period_start','period_end','projects_label_by','label']);

export const Chart_subjectsScalarFieldEnumSchema = z.enum(['chart_subject_id','account_id','chart_id','table_name','table_level','table_filter','value_source','value_field','value_unit','name','label_replace_by_generated_column','type','stroke','fill','fill_graded','connect_nulls','sort','deleted']);

export const ChartsScalarFieldEnumSchema = z.enum(['chart_id','account_id','project_id','subproject_id','place_id','years_current','years_previous','years_specific','years_last_x','years_since','years_until','chart_type','title','subjects_stacked','subjects_single','percent','label_replace_by_generated_column','deleted']);

export const Field_typesScalarFieldEnumSchema = z.enum(['field_type_id','name','sort','comment','label_replace_by_generated_column','deleted']);

export const FieldsScalarFieldEnumSchema = z.enum(['field_id','account_id','project_id','table_name','level','field_type_id','widget_type_id','name','field_label','list_id','preset','obsolete','label_replace_by_generated_column','deleted']);

export const Gbif_occurrence_downloadsScalarFieldEnumSchema = z.enum(['gbif_occurrence_download_id','account_id','project_id','subproject_id','gbif_table','filters','created_time','download_key','error','inserted_time','inserted_count','attribution','deleted']);

export const Gbif_occurrencesScalarFieldEnumSchema = z.enum(['gbif_occurrence_id','account_id','project_id','subproject_id','gbif_data','label']);

export const Gbif_taxaScalarFieldEnumSchema = z.enum(['gbif_taxon_id','account_id','project_id','gbif_data','label']);

export const Goal_report_valuesScalarFieldEnumSchema = z.enum(['goal_report_value_id','account_id','goal_report_id','unit_id','value_integer','value_numeric','value_text','label','deleted']);

export const Goal_reportsScalarFieldEnumSchema = z.enum(['goal_report_id','account_id','goal_id','data','label','deleted']);

export const GoalsScalarFieldEnumSchema = z.enum(['goal_id','account_id','subproject_id','year','name','data','label_replace_by_generated_column','deleted']);

export const JsonNullValueFilterSchema = z.enum(['DbNull','JsonNull','AnyNull',]);

export const Layer_optionsScalarFieldEnumSchema = z.enum(['layer_option_id','account_id','tile_layer_id','vector_layer_id','field','value','label','queryable','legend_url']);

export const List_valuesScalarFieldEnumSchema = z.enum(['list_value_id','account_id','list_id','value','obsolete','label_replace_by_generated_column','deleted']);

export const ListsScalarFieldEnumSchema = z.enum(['list_id','account_id','project_id','name','data','obsolete','label_replace_by_generated_column','deleted']);

export const MessagesScalarFieldEnumSchema = z.enum(['message_id','label_replace_by_generated_column','date','message']);

export const NullableJsonNullValueInputSchema = z.enum(['DbNull','JsonNull',])

export const Observation_sourcesScalarFieldEnumSchema = z.enum(['observation_source_id','account_id','project_id','name','url','data','label_replace_by_generated_column','deleted']);

export const ObservationsScalarFieldEnumSchema = z.enum(['observation_id','account_id','observation_source_id','place_id','id_in_source','url','observation_data','date','author','geometry','data','label_replace_by_generated_column','deleted']);

export const PersonsScalarFieldEnumSchema = z.enum(['person_id','project_id','account_id','email','data','label_replace_by_generated_column','deleted']);

export const Place_levelsScalarFieldEnumSchema = z.enum(['place_level_id','account_id','project_id','level','name_singular','name_plural','name_short','reports','report_values','actions','action_values','action_reports','checks','check_values','check_taxa','observations','label_replace_by_generated_column','deleted']);

export const PlacesScalarFieldEnumSchema = z.enum(['place_id','account_id','subproject_id','parent_id','level','since','until','data','geometry','bbox','label','files_active_places','deleted']);

export const Project_reportsScalarFieldEnumSchema = z.enum(['project_report_id','account_id','project_id','year','data','label_replace_by_generated_column','deleted']);

export const Project_usersScalarFieldEnumSchema = z.enum(['project_user_id','account_id','project_id','user_id','role','label','deleted']);

export const ProjectsScalarFieldEnumSchema = z.enum(['project_id','account_id','name','label','type','subproject_name_singular','subproject_name_plural','subproject_order_by','places_label_by','places_order_by','persons_label_by','persons_order_by','goal_reports_label_by','goal_reports_order_by','values_on_multiple_levels','multiple_action_values_on_same_level','multiple_check_values_on_same_level','data','files_offline','files_active_projects','files_active_subprojects','files_active_places','files_active_actions','files_active_checks','deleted']);

export const QueryModeSchema = z.enum(['default','insensitive']);

export const SortOrderSchema = z.enum(['asc','desc']);

export const Subproject_reportsScalarFieldEnumSchema = z.enum(['subproject_report_id','account_id','subproject_id','year','data','label_replace_by_generated_column','deleted']);

export const Subproject_taxaScalarFieldEnumSchema = z.enum(['subproject_taxon_id','account_id','subproject_id','taxon_id','label','deleted']);

export const Subproject_usersScalarFieldEnumSchema = z.enum(['subproject_user_id','account_id','subproject_id','user_id','role','label','deleted']);

export const SubprojectsScalarFieldEnumSchema = z.enum(['subproject_id','account_id','project_id','name','label_replace_by_generated_column','start_year','end_year','data','deleted']);

export const TaxaScalarFieldEnumSchema = z.enum(['taxon_id','account_id','taxonomy_id','name','id_in_source','url','label','deleted']);

export const TaxonomiesScalarFieldEnumSchema = z.enum(['taxonomy_id','account_id','project_id','type','name','url','obsolete','data','label_replace_by_generated_column','deleted']);

export const Tile_layersScalarFieldEnumSchema = z.enum(['tile_layer_id','account_id','project_id','label','sort','active','type','wmts_url_template','wmts_subdomains','wms_base_url','wms_format','wms_layer','wms_parameters','wms_styles','wms_transparent','wms_version','wms_info_format','wms_legend','max_zoom','min_zoom','opacity_percent','grayscale','local_data_size','local_data_bounds','deleted']);

export const TransactionIsolationLevelSchema = z.enum(['ReadUncommitted','ReadCommitted','RepeatableRead','Serializable']);

export const Ui_optionsScalarFieldEnumSchema = z.enum(['user_id','account_id','designing','breadcrumbs_overflowing','navs_overflowing','tabs','show_map','map_bounds','local_map_show','tile_layer_sorter','vector_layer_sorter','editing_place_geometry','editing_check_geometry','editing_action_geometry','label']);

export const UnitsScalarFieldEnumSchema = z.enum(['unit_id','account_id','project_id','use_for_action_values','use_for_action_report_values','use_for_check_values','use_for_place_report_values','use_for_goal_report_values','use_for_subproject_taxa','use_for_check_taxa','name','summable','sort','type','list_id','label_replace_by_generated_column','deleted']);

export const User_messagesScalarFieldEnumSchema = z.enum(['user_message_id','account_id','user_id','message_id','label_replace_by_generated_column','read']);

export const UsersScalarFieldEnumSchema = z.enum(['user_id','email','auth_id','label_replace_by_generated_column','deleted']);

export const Vector_layer_displaysScalarFieldEnumSchema = z.enum(['vector_layer_display_id','account_id','vector_layer_id','display_property_value','marker_type','circle_marker_radius','marker_symbol','marker_size','stroke','color','weight','opacity_percent','line_cap','line_join','dash_array','dash_offset','fill','fill_color','fill_opacity_percent','fill_rule','label_replace_by_generated_column','deleted']);

export const Vector_layer_geomsScalarFieldEnumSchema = z.enum(['vector_layer_geom_id','account_id','vector_layer_id','geometry','properties','bbox_sw_lng','bbox_sw_lat','bbox_ne_lng','bbox_ne_lat','deleted']);

export const Vector_layersScalarFieldEnumSchema = z.enum(['vector_layer_id','account_id','project_id','label','type','display_by_property_field','sort','active','max_zoom','min_zoom','max_features','wfs_url','wfs_layer','wfs_version','wfs_output_format','feature_count','point_count','line_count','polygon_count','deleted']);

export const Widget_typesScalarFieldEnumSchema = z.enum(['widget_type_id','name','needs_list','sort','comment','label_replace_by_generated_column','deleted']);

export const Widgets_for_fieldsScalarFieldEnumSchema = z.enum(['widget_for_field_id','field_type_id','widget_type_id','label','deleted']);

export const chart_subject_tableSchema = z.enum(['subprojects','places','checks','check_values','actions','action_values']);

export type chart_subject_tableType = `${z.infer<typeof chart_subject_tableSchema>}`

export const chart_subject_typeSchema = z.enum(['linear','monotone']);

export type chart_subject_typeType = `${z.infer<typeof chart_subject_typeSchema>}`

export const chart_subject_value_sourceSchema = z.enum(['count_rows','count_rows_by_distinct_field_values','sum_values_of_field']);

export type chart_subject_value_sourceType = `${z.infer<typeof chart_subject_value_sourceSchema>}`

export const chart_typeSchema = z.enum(['Pie','Radar','Area']);

export type chart_typeType = `${z.infer<typeof chart_typeSchema>}`

export const fill_rule_enumSchema = z.enum(['nonzero','evenodd']);

export type fill_rule_enumType = `${z.infer<typeof fill_rule_enumSchema>}`

export const gbif_tableSchema = z.enum(['gbif_taxa','gbif_occurrences']);

export type gbif_tableType = `${z.infer<typeof gbif_tableSchema>}`

export const layer_options_field_enumSchema = z.enum(['wms_format','wms_layer','wms_info_format','wfs_output_format','wfs_layer']);

export type layer_options_field_enumType = `${z.infer<typeof layer_options_field_enumSchema>}`

export const line_cap_enumSchema = z.enum(['butt','round','square']);

export type line_cap_enumType = `${z.infer<typeof line_cap_enumSchema>}`

export const marker_type_enumSchema = z.enum(['circle','marker']);

export type marker_type_enumType = `${z.infer<typeof marker_type_enumSchema>}`

export const project_typeSchema = z.enum(['species','biotope']);

export type project_typeType = `${z.infer<typeof project_typeSchema>}`

export const taxonomy_typeSchema = z.enum(['species','biotope']);

export type taxonomy_typeType = `${z.infer<typeof taxonomy_typeSchema>}`

export const tile_layer_type_enumSchema = z.enum(['wms','wmts']);

export type tile_layer_type_enumType = `${z.infer<typeof tile_layer_type_enumSchema>}`

export const unit_typeSchema = z.enum(['integer','numeric','text']);

export type unit_typeType = `${z.infer<typeof unit_typeSchema>}`

export const vector_layer_type_enumSchema = z.enum(['wfs','upload','places1','places2','actions1','actions2','checks1','checks2','observations1','observations2']);

export type vector_layer_type_enumType = `${z.infer<typeof vector_layer_type_enumSchema>}`

/////////////////////////////////////////
// MODELS
/////////////////////////////////////////

/////////////////////////////////////////
// ACCOUNTS SCHEMA
/////////////////////////////////////////

export const AccountsSchema = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().nullable(),
  type: z.string().nullable(),
  period_start: z.coerce.date().nullable(),
  period_end: z.coerce.date().nullable(),
  projects_label_by: z.string().nullable(),
  label: z.string().nullable(),
})

export type Accounts = z.infer<typeof AccountsSchema>

/////////////////////////////////////////
// CHART SUBJECTS SCHEMA
/////////////////////////////////////////

export const Chart_subjectsSchema = z.object({
  table_name: chart_subject_tableSchema.nullable(),
  value_source: chart_subject_value_sourceSchema.nullable(),
  type: chart_subject_typeSchema.nullable(),
  chart_subject_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  chart_id: z.string().uuid().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  table_filter: NullableJsonValue.optional(),
  value_field: z.string().nullable(),
  value_unit: z.string().uuid().nullable(),
  name: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  stroke: z.string().nullable(),
  fill: z.string().nullable(),
  fill_graded: z.boolean().nullable(),
  connect_nulls: z.boolean().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  deleted: z.boolean().nullable(),
})

export type Chart_subjects = z.infer<typeof Chart_subjectsSchema>

/////////////////////////////////////////
// CHARTS SCHEMA
/////////////////////////////////////////

export const ChartsSchema = z.object({
  chart_type: chart_typeSchema.nullable(),
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  place_id: z.string().uuid().nullable(),
  years_current: z.boolean().nullable(),
  years_previous: z.boolean().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  title: z.string().nullable(),
  subjects_stacked: z.boolean().nullable(),
  subjects_single: z.boolean().nullable(),
  percent: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Charts = z.infer<typeof ChartsSchema>

/////////////////////////////////////////
// FIELD TYPES SCHEMA
/////////////////////////////////////////

export const Field_typesSchema = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  comment: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Field_types = z.infer<typeof Field_typesSchema>

/////////////////////////////////////////
// FIELDS SCHEMA
/////////////////////////////////////////

export const FieldsSchema = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  table_name: z.string().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  field_type_id: z.string().uuid().nullable(),
  widget_type_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  field_label: z.string().nullable(),
  list_id: z.string().uuid().nullable(),
  preset: z.string().nullable(),
  obsolete: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Fields = z.infer<typeof FieldsSchema>

/////////////////////////////////////////
// GBIF OCCURRENCE DOWNLOADS SCHEMA
/////////////////////////////////////////

export const Gbif_occurrence_downloadsSchema = z.object({
  gbif_table: gbif_tableSchema.nullable(),
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  filters: NullableJsonValue.optional(),
  created_time: z.coerce.date().nullable(),
  download_key: z.string().nullable(),
  error: z.string().nullable(),
  inserted_time: z.coerce.date().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  attribution: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Gbif_occurrence_downloads = z.infer<typeof Gbif_occurrence_downloadsSchema>

/////////////////////////////////////////
// GBIF OCCURRENCES SCHEMA
/////////////////////////////////////////

export const Gbif_occurrencesSchema = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  gbif_data: NullableJsonValue.optional(),
  label: z.string().nullable(),
})

export type Gbif_occurrences = z.infer<typeof Gbif_occurrencesSchema>

/////////////////////////////////////////
// GBIF TAXA SCHEMA
/////////////////////////////////////////

export const Gbif_taxaSchema = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  gbif_data: NullableJsonValue.optional(),
  label: z.string().nullable(),
})

export type Gbif_taxa = z.infer<typeof Gbif_taxaSchema>

/////////////////////////////////////////
// GOAL REPORT VALUES SCHEMA
/////////////////////////////////////////

export const Goal_report_valuesSchema = z.object({
  goal_report_value_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  goal_report_id: z.string().uuid().nullable(),
  unit_id: z.string().uuid().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  value_numeric: z.number().or(z.nan()).nullable(),
  value_text: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Goal_report_values = z.infer<typeof Goal_report_valuesSchema>

/////////////////////////////////////////
// GOAL REPORTS SCHEMA
/////////////////////////////////////////

export const Goal_reportsSchema = z.object({
  goal_report_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  goal_id: z.string().uuid().nullable(),
  data: NullableJsonValue.optional(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Goal_reports = z.infer<typeof Goal_reportsSchema>

/////////////////////////////////////////
// GOALS SCHEMA
/////////////////////////////////////////

export const GoalsSchema = z.object({
  goal_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  name: z.string().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Goals = z.infer<typeof GoalsSchema>

/////////////////////////////////////////
// LAYER OPTIONS SCHEMA
/////////////////////////////////////////

export const Layer_optionsSchema = z.object({
  field: layer_options_field_enumSchema.nullable(),
  layer_option_id: z.string(),
  account_id: z.string().uuid().nullable(),
  tile_layer_id: z.string().uuid().nullable(),
  vector_layer_id: z.string().uuid().nullable(),
  value: z.string().nullable(),
  label: z.string().nullable(),
  queryable: z.boolean().nullable(),
  legend_url: z.string().nullable(),
})

export type Layer_options = z.infer<typeof Layer_optionsSchema>

/////////////////////////////////////////
// LIST VALUES SCHEMA
/////////////////////////////////////////

export const List_valuesSchema = z.object({
  list_value_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  list_id: z.string().uuid().nullable(),
  value: z.string().nullable(),
  obsolete: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type List_values = z.infer<typeof List_valuesSchema>

/////////////////////////////////////////
// LISTS SCHEMA
/////////////////////////////////////////

export const ListsSchema = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  data: NullableJsonValue.optional(),
  obsolete: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Lists = z.infer<typeof ListsSchema>

/////////////////////////////////////////
// MESSAGES SCHEMA
/////////////////////////////////////////

export const MessagesSchema = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().nullable(),
  date: z.coerce.date().nullable(),
  message: z.string().nullable(),
})

export type Messages = z.infer<typeof MessagesSchema>

/////////////////////////////////////////
// OBSERVATION SOURCES SCHEMA
/////////////////////////////////////////

export const Observation_sourcesSchema = z.object({
  observation_source_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  url: z.string().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Observation_sources = z.infer<typeof Observation_sourcesSchema>

/////////////////////////////////////////
// OBSERVATIONS SCHEMA
/////////////////////////////////////////

export const ObservationsSchema = z.object({
  observation_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  observation_source_id: z.string().uuid().nullable(),
  place_id: z.string().uuid().nullable(),
  id_in_source: z.string().nullable(),
  url: z.string().nullable(),
  observation_data: NullableJsonValue.optional(),
  date: z.coerce.date().nullable(),
  author: z.string().nullable(),
  geometry: NullableJsonValue.optional(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Observations = z.infer<typeof ObservationsSchema>

/////////////////////////////////////////
// PERSONS SCHEMA
/////////////////////////////////////////

export const PersonsSchema = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().nullable(),
  account_id: z.string().uuid().nullable(),
  email: z.string().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Persons = z.infer<typeof PersonsSchema>

/////////////////////////////////////////
// PLACE LEVELS SCHEMA
/////////////////////////////////////////

export const Place_levelsSchema = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  name_singular: z.string().nullable(),
  name_plural: z.string().nullable(),
  name_short: z.string().nullable(),
  reports: z.boolean().nullable(),
  report_values: z.boolean().nullable(),
  actions: z.boolean().nullable(),
  action_values: z.boolean().nullable(),
  action_reports: z.boolean().nullable(),
  checks: z.boolean().nullable(),
  check_values: z.boolean().nullable(),
  check_taxa: z.boolean().nullable(),
  observations: z.boolean().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Place_levels = z.infer<typeof Place_levelsSchema>

/////////////////////////////////////////
// PLACES SCHEMA
/////////////////////////////////////////

export const PlacesSchema = z.object({
  place_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  parent_id: z.string().uuid().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  data: NullableJsonValue.optional(),
  geometry: NullableJsonValue.optional(),
  bbox: NullableJsonValue.optional(),
  label: z.string().nullable(),
  files_active_places: z.boolean().nullable(),
  deleted: z.boolean().nullable(),
})

export type Places = z.infer<typeof PlacesSchema>

/////////////////////////////////////////
// PROJECT REPORTS SCHEMA
/////////////////////////////////////////

export const Project_reportsSchema = z.object({
  project_report_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Project_reports = z.infer<typeof Project_reportsSchema>

/////////////////////////////////////////
// PROJECT USERS SCHEMA
/////////////////////////////////////////

export const Project_usersSchema = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  user_id: z.string().uuid().nullable(),
  role: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Project_users = z.infer<typeof Project_usersSchema>

/////////////////////////////////////////
// PROJECTS SCHEMA
/////////////////////////////////////////

export const ProjectsSchema = z.object({
  type: project_typeSchema.nullable(),
  project_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  label: z.string().nullable(),
  subproject_name_singular: z.string().nullable(),
  subproject_name_plural: z.string().nullable(),
  subproject_order_by: z.string().nullable(),
  places_label_by: z.string().nullable(),
  places_order_by: NullableJsonValue.optional(),
  persons_label_by: z.string().nullable(),
  persons_order_by: z.string().nullable(),
  goal_reports_label_by: z.string().nullable(),
  goal_reports_order_by: z.string().nullable(),
  values_on_multiple_levels: z.string().nullable(),
  multiple_action_values_on_same_level: z.string().nullable(),
  multiple_check_values_on_same_level: z.string().nullable(),
  data: NullableJsonValue.optional(),
  files_offline: z.boolean().nullable(),
  files_active_projects: z.boolean().nullable(),
  files_active_subprojects: z.boolean().nullable(),
  files_active_places: z.boolean().nullable(),
  files_active_actions: z.boolean().nullable(),
  files_active_checks: z.boolean().nullable(),
  deleted: z.boolean().nullable(),
})

export type Projects = z.infer<typeof ProjectsSchema>

/////////////////////////////////////////
// SUBPROJECT REPORTS SCHEMA
/////////////////////////////////////////

export const Subproject_reportsSchema = z.object({
  subproject_report_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Subproject_reports = z.infer<typeof Subproject_reportsSchema>

/////////////////////////////////////////
// SUBPROJECT TAXA SCHEMA
/////////////////////////////////////////

export const Subproject_taxaSchema = z.object({
  subproject_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  taxon_id: z.string().uuid().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Subproject_taxa = z.infer<typeof Subproject_taxaSchema>

/////////////////////////////////////////
// SUBPROJECT USERS SCHEMA
/////////////////////////////////////////

export const Subproject_usersSchema = z.object({
  subproject_user_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  subproject_id: z.string().uuid().nullable(),
  user_id: z.string().uuid().nullable(),
  role: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Subproject_users = z.infer<typeof Subproject_usersSchema>

/////////////////////////////////////////
// SUBPROJECTS SCHEMA
/////////////////////////////////////////

export const SubprojectsSchema = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  data: NullableJsonValue.optional(),
  deleted: z.boolean().nullable(),
})

export type Subprojects = z.infer<typeof SubprojectsSchema>

/////////////////////////////////////////
// TAXA SCHEMA
/////////////////////////////////////////

export const TaxaSchema = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  taxonomy_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  id_in_source: z.string().nullable(),
  url: z.string().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Taxa = z.infer<typeof TaxaSchema>

/////////////////////////////////////////
// TAXONOMIES SCHEMA
/////////////////////////////////////////

export const TaxonomiesSchema = z.object({
  type: taxonomy_typeSchema.nullable(),
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  name: z.string().nullable(),
  url: z.string().nullable(),
  obsolete: z.boolean().nullable(),
  data: NullableJsonValue.optional(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Taxonomies = z.infer<typeof TaxonomiesSchema>

/////////////////////////////////////////
// TILE LAYERS SCHEMA
/////////////////////////////////////////

export const Tile_layersSchema = z.object({
  type: tile_layer_type_enumSchema.nullable(),
  tile_layer_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid(),
  label: z.string().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  active: z.boolean().nullable(),
  wmts_url_template: z.string().nullable(),
  wmts_subdomains: NullableJsonValue.optional(),
  wms_base_url: z.string().nullable(),
  wms_format: NullableJsonValue.optional(),
  wms_layer: NullableJsonValue.optional(),
  wms_parameters: NullableJsonValue.optional(),
  wms_styles: NullableJsonValue.optional(),
  wms_transparent: z.boolean().nullable(),
  wms_version: z.string().nullable(),
  wms_info_format: NullableJsonValue.optional(),
  wms_legend: NullableJsonValue.optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  grayscale: z.boolean().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  local_data_bounds: NullableJsonValue.optional(),
  deleted: z.boolean().nullable(),
})

export type Tile_layers = z.infer<typeof Tile_layersSchema>

/////////////////////////////////////////
// UI OPTIONS SCHEMA
/////////////////////////////////////////

export const Ui_optionsSchema = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  designing: z.boolean().nullable(),
  breadcrumbs_overflowing: z.boolean().nullable(),
  navs_overflowing: z.boolean().nullable(),
  tabs: NullableJsonValue.optional(),
  show_map: z.boolean().nullable(),
  map_bounds: NullableJsonValue.optional(),
  local_map_show: NullableJsonValue.optional(),
  tile_layer_sorter: z.string().nullable(),
  vector_layer_sorter: z.string().nullable(),
  editing_place_geometry: z.string().uuid().nullable(),
  editing_check_geometry: z.string().uuid().nullable(),
  editing_action_geometry: z.string().uuid().nullable(),
  label: z.string().nullable(),
})

export type Ui_options = z.infer<typeof Ui_optionsSchema>

/////////////////////////////////////////
// UNITS SCHEMA
/////////////////////////////////////////

export const UnitsSchema = z.object({
  type: unit_typeSchema.nullable(),
  unit_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid().nullable(),
  use_for_action_values: z.boolean().nullable(),
  use_for_action_report_values: z.boolean().nullable(),
  use_for_check_values: z.boolean().nullable(),
  use_for_place_report_values: z.boolean().nullable(),
  use_for_goal_report_values: z.boolean().nullable(),
  use_for_subproject_taxa: z.boolean().nullable(),
  use_for_check_taxa: z.boolean().nullable(),
  name: z.string().nullable(),
  summable: z.boolean().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  list_id: z.string().uuid().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Units = z.infer<typeof UnitsSchema>

/////////////////////////////////////////
// USER MESSAGES SCHEMA
/////////////////////////////////////////

export const User_messagesSchema = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  user_id: z.string().uuid().nullable(),
  message_id: z.string().uuid().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  read: z.boolean().nullable(),
})

export type User_messages = z.infer<typeof User_messagesSchema>

/////////////////////////////////////////
// USERS SCHEMA
/////////////////////////////////////////

export const UsersSchema = z.object({
  user_id: z.string().uuid(),
  email: z.string().nullable(),
  auth_id: z.string().uuid().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Users = z.infer<typeof UsersSchema>

/////////////////////////////////////////
// VECTOR LAYER DISPLAYS SCHEMA
/////////////////////////////////////////

export const Vector_layer_displaysSchema = z.object({
  marker_type: marker_type_enumSchema.nullable(),
  line_cap: line_cap_enumSchema.nullable(),
  fill_rule: fill_rule_enumSchema.nullable(),
  vector_layer_display_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  vector_layer_id: z.string().uuid().nullable(),
  display_property_value: z.string().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  marker_symbol: z.string().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  stroke: z.boolean().nullable(),
  color: z.string().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  line_join: z.string().nullable(),
  dash_array: z.string().nullable(),
  dash_offset: z.string().nullable(),
  fill: z.boolean().nullable(),
  fill_color: z.string().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Vector_layer_displays = z.infer<typeof Vector_layer_displaysSchema>

/////////////////////////////////////////
// VECTOR LAYER GEOMS SCHEMA
/////////////////////////////////////////

export const Vector_layer_geomsSchema = z.object({
  vector_layer_geom_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  vector_layer_id: z.string().uuid().nullable(),
  geometry: NullableJsonValue.optional(),
  properties: NullableJsonValue.optional(),
  bbox_sw_lng: z.number().or(z.nan()).nullable(),
  bbox_sw_lat: z.number().or(z.nan()).nullable(),
  bbox_ne_lng: z.number().or(z.nan()).nullable(),
  bbox_ne_lat: z.number().or(z.nan()).nullable(),
  deleted: z.boolean().nullable(),
})

export type Vector_layer_geoms = z.infer<typeof Vector_layer_geomsSchema>

/////////////////////////////////////////
// VECTOR LAYERS SCHEMA
/////////////////////////////////////////

export const Vector_layersSchema = z.object({
  type: vector_layer_type_enumSchema.nullable(),
  vector_layer_id: z.string().uuid(),
  account_id: z.string().uuid().nullable(),
  project_id: z.string().uuid(),
  label: z.string().nullable(),
  display_by_property_field: z.string().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  active: z.boolean().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  wfs_url: z.string().nullable(),
  wfs_layer: NullableJsonValue.optional(),
  wfs_version: z.string().nullable(),
  wfs_output_format: NullableJsonValue.optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).nullable(),
  deleted: z.boolean().nullable(),
})

export type Vector_layers = z.infer<typeof Vector_layersSchema>

/////////////////////////////////////////
// WIDGET TYPES SCHEMA
/////////////////////////////////////////

export const Widget_typesSchema = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().nullable(),
  needs_list: z.boolean().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).nullable(),
  comment: z.string().nullable(),
  label_replace_by_generated_column: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Widget_types = z.infer<typeof Widget_typesSchema>

/////////////////////////////////////////
// WIDGETS FOR FIELDS SCHEMA
/////////////////////////////////////////

export const Widgets_for_fieldsSchema = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().nullable(),
  widget_type_id: z.string().uuid().nullable(),
  label: z.string().nullable(),
  deleted: z.boolean().nullable(),
})

export type Widgets_for_fields = z.infer<typeof Widgets_for_fieldsSchema>

/////////////////////////////////////////
// SELECT & INCLUDE
/////////////////////////////////////////

// ACCOUNTS
//------------------------------------------------------

export const AccountsIncludeSchema: z.ZodType<Prisma.AccountsInclude> = z.object({
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsFindManyArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsFindManyArgsSchema)]).optional(),
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  list_values: z.union([z.boolean(),z.lazy(() => List_valuesFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesFindManyArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  project_reports: z.union([z.boolean(),z.lazy(() => Project_reportsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsFindManyArgsSchema)]).optional(),
  subproject_reports: z.union([z.boolean(),z.lazy(() => Subproject_reportsFindManyArgsSchema)]).optional(),
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsFindManyArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  vector_layer_displays: z.union([z.boolean(),z.lazy(() => Vector_layer_displaysFindManyArgsSchema)]).optional(),
  vector_layer_geoms: z.union([z.boolean(),z.lazy(() => Vector_layer_geomsFindManyArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AccountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const AccountsArgsSchema: z.ZodType<Prisma.AccountsArgs> = z.object({
  select: z.lazy(() => AccountsSelectSchema).optional(),
  include: z.lazy(() => AccountsIncludeSchema).optional(),
}).strict();

export const AccountsCountOutputTypeArgsSchema: z.ZodType<Prisma.AccountsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => AccountsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const AccountsCountOutputTypeSelectSchema: z.ZodType<Prisma.AccountsCountOutputTypeSelect> = z.object({
  chart_subjects: z.boolean().optional(),
  charts: z.boolean().optional(),
  fields: z.boolean().optional(),
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
  gbif_taxa: z.boolean().optional(),
  goal_report_values: z.boolean().optional(),
  goal_reports: z.boolean().optional(),
  goals: z.boolean().optional(),
  layer_options: z.boolean().optional(),
  list_values: z.boolean().optional(),
  lists: z.boolean().optional(),
  observation_sources: z.boolean().optional(),
  observations: z.boolean().optional(),
  persons: z.boolean().optional(),
  place_levels: z.boolean().optional(),
  places: z.boolean().optional(),
  project_reports: z.boolean().optional(),
  project_users: z.boolean().optional(),
  projects: z.boolean().optional(),
  subproject_reports: z.boolean().optional(),
  subproject_taxa: z.boolean().optional(),
  subproject_users: z.boolean().optional(),
  subprojects: z.boolean().optional(),
  taxa: z.boolean().optional(),
  taxonomies: z.boolean().optional(),
  tile_layers: z.boolean().optional(),
  ui_options: z.boolean().optional(),
  units: z.boolean().optional(),
  user_messages: z.boolean().optional(),
  vector_layer_displays: z.boolean().optional(),
  vector_layer_geoms: z.boolean().optional(),
  vector_layers: z.boolean().optional(),
}).strict();

export const AccountsSelectSchema: z.ZodType<Prisma.AccountsSelect> = z.object({
  account_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  type: z.boolean().optional(),
  period_start: z.boolean().optional(),
  period_end: z.boolean().optional(),
  projects_label_by: z.boolean().optional(),
  label: z.boolean().optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsFindManyArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsFindManyArgsSchema)]).optional(),
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  list_values: z.union([z.boolean(),z.lazy(() => List_valuesFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesFindManyArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  project_reports: z.union([z.boolean(),z.lazy(() => Project_reportsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsFindManyArgsSchema)]).optional(),
  subproject_reports: z.union([z.boolean(),z.lazy(() => Subproject_reportsFindManyArgsSchema)]).optional(),
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsFindManyArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  vector_layer_displays: z.union([z.boolean(),z.lazy(() => Vector_layer_displaysFindManyArgsSchema)]).optional(),
  vector_layer_geoms: z.union([z.boolean(),z.lazy(() => Vector_layer_geomsFindManyArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => AccountsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// CHART SUBJECTS
//------------------------------------------------------

export const Chart_subjectsIncludeSchema: z.ZodType<Prisma.Chart_subjectsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsArgsSchema)]).optional(),
}).strict()

export const Chart_subjectsArgsSchema: z.ZodType<Prisma.Chart_subjectsArgs> = z.object({
  select: z.lazy(() => Chart_subjectsSelectSchema).optional(),
  include: z.lazy(() => Chart_subjectsIncludeSchema).optional(),
}).strict();

export const Chart_subjectsSelectSchema: z.ZodType<Prisma.Chart_subjectsSelect> = z.object({
  chart_subject_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  chart_id: z.boolean().optional(),
  table_name: z.boolean().optional(),
  table_level: z.boolean().optional(),
  table_filter: z.boolean().optional(),
  value_source: z.boolean().optional(),
  value_field: z.boolean().optional(),
  value_unit: z.boolean().optional(),
  name: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  type: z.boolean().optional(),
  stroke: z.boolean().optional(),
  fill: z.boolean().optional(),
  fill_graded: z.boolean().optional(),
  connect_nulls: z.boolean().optional(),
  sort: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsArgsSchema)]).optional(),
}).strict()

// CHARTS
//------------------------------------------------------

export const ChartsIncludeSchema: z.ZodType<Prisma.ChartsInclude> = z.object({
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChartsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ChartsArgsSchema: z.ZodType<Prisma.ChartsArgs> = z.object({
  select: z.lazy(() => ChartsSelectSchema).optional(),
  include: z.lazy(() => ChartsIncludeSchema).optional(),
}).strict();

export const ChartsCountOutputTypeArgsSchema: z.ZodType<Prisma.ChartsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ChartsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ChartsCountOutputTypeSelectSchema: z.ZodType<Prisma.ChartsCountOutputTypeSelect> = z.object({
  chart_subjects: z.boolean().optional(),
}).strict();

export const ChartsSelectSchema: z.ZodType<Prisma.ChartsSelect> = z.object({
  chart_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  place_id: z.boolean().optional(),
  years_current: z.boolean().optional(),
  years_previous: z.boolean().optional(),
  years_specific: z.boolean().optional(),
  years_last_x: z.boolean().optional(),
  years_since: z.boolean().optional(),
  years_until: z.boolean().optional(),
  chart_type: z.boolean().optional(),
  title: z.boolean().optional(),
  subjects_stacked: z.boolean().optional(),
  subjects_single: z.boolean().optional(),
  percent: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ChartsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FIELD TYPES
//------------------------------------------------------

export const Field_typesIncludeSchema: z.ZodType<Prisma.Field_typesInclude> = z.object({
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Field_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Field_typesArgsSchema: z.ZodType<Prisma.Field_typesArgs> = z.object({
  select: z.lazy(() => Field_typesSelectSchema).optional(),
  include: z.lazy(() => Field_typesIncludeSchema).optional(),
}).strict();

export const Field_typesCountOutputTypeArgsSchema: z.ZodType<Prisma.Field_typesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Field_typesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Field_typesCountOutputTypeSelectSchema: z.ZodType<Prisma.Field_typesCountOutputTypeSelect> = z.object({
  fields: z.boolean().optional(),
  widgets_for_fields: z.boolean().optional(),
}).strict();

export const Field_typesSelectSchema: z.ZodType<Prisma.Field_typesSelect> = z.object({
  field_type_id: z.boolean().optional(),
  name: z.boolean().optional(),
  sort: z.boolean().optional(),
  comment: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Field_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// FIELDS
//------------------------------------------------------

export const FieldsIncludeSchema: z.ZodType<Prisma.FieldsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()

export const FieldsArgsSchema: z.ZodType<Prisma.FieldsArgs> = z.object({
  select: z.lazy(() => FieldsSelectSchema).optional(),
  include: z.lazy(() => FieldsIncludeSchema).optional(),
}).strict();

export const FieldsSelectSchema: z.ZodType<Prisma.FieldsSelect> = z.object({
  field_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  table_name: z.boolean().optional(),
  level: z.boolean().optional(),
  field_type_id: z.boolean().optional(),
  widget_type_id: z.boolean().optional(),
  name: z.boolean().optional(),
  field_label: z.boolean().optional(),
  list_id: z.boolean().optional(),
  preset: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()

// GBIF OCCURRENCE DOWNLOADS
//------------------------------------------------------

export const Gbif_occurrence_downloadsIncludeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

export const Gbif_occurrence_downloadsArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsArgs> = z.object({
  select: z.lazy(() => Gbif_occurrence_downloadsSelectSchema).optional(),
  include: z.lazy(() => Gbif_occurrence_downloadsIncludeSchema).optional(),
}).strict();

export const Gbif_occurrence_downloadsSelectSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsSelect> = z.object({
  gbif_occurrence_download_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  gbif_table: z.boolean().optional(),
  filters: z.boolean().optional(),
  created_time: z.boolean().optional(),
  download_key: z.boolean().optional(),
  error: z.boolean().optional(),
  inserted_time: z.boolean().optional(),
  inserted_count: z.boolean().optional(),
  attribution: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

// GBIF OCCURRENCES
//------------------------------------------------------

export const Gbif_occurrencesIncludeSchema: z.ZodType<Prisma.Gbif_occurrencesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

export const Gbif_occurrencesArgsSchema: z.ZodType<Prisma.Gbif_occurrencesArgs> = z.object({
  select: z.lazy(() => Gbif_occurrencesSelectSchema).optional(),
  include: z.lazy(() => Gbif_occurrencesIncludeSchema).optional(),
}).strict();

export const Gbif_occurrencesSelectSchema: z.ZodType<Prisma.Gbif_occurrencesSelect> = z.object({
  gbif_occurrence_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  gbif_data: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

// GBIF TAXA
//------------------------------------------------------

export const Gbif_taxaIncludeSchema: z.ZodType<Prisma.Gbif_taxaInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const Gbif_taxaArgsSchema: z.ZodType<Prisma.Gbif_taxaArgs> = z.object({
  select: z.lazy(() => Gbif_taxaSelectSchema).optional(),
  include: z.lazy(() => Gbif_taxaIncludeSchema).optional(),
}).strict();

export const Gbif_taxaSelectSchema: z.ZodType<Prisma.Gbif_taxaSelect> = z.object({
  gbif_taxon_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  gbif_data: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// GOAL REPORT VALUES
//------------------------------------------------------

export const Goal_report_valuesIncludeSchema: z.ZodType<Prisma.Goal_report_valuesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsArgsSchema)]).optional(),
}).strict()

export const Goal_report_valuesArgsSchema: z.ZodType<Prisma.Goal_report_valuesArgs> = z.object({
  select: z.lazy(() => Goal_report_valuesSelectSchema).optional(),
  include: z.lazy(() => Goal_report_valuesIncludeSchema).optional(),
}).strict();

export const Goal_report_valuesSelectSchema: z.ZodType<Prisma.Goal_report_valuesSelect> = z.object({
  goal_report_value_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  goal_report_id: z.boolean().optional(),
  unit_id: z.boolean().optional(),
  value_integer: z.boolean().optional(),
  value_numeric: z.boolean().optional(),
  value_text: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsArgsSchema)]).optional(),
}).strict()

// GOAL REPORTS
//------------------------------------------------------

export const Goal_reportsIncludeSchema: z.ZodType<Prisma.Goal_reportsInclude> = z.object({
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Goal_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Goal_reportsArgsSchema: z.ZodType<Prisma.Goal_reportsArgs> = z.object({
  select: z.lazy(() => Goal_reportsSelectSchema).optional(),
  include: z.lazy(() => Goal_reportsIncludeSchema).optional(),
}).strict();

export const Goal_reportsCountOutputTypeArgsSchema: z.ZodType<Prisma.Goal_reportsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Goal_reportsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Goal_reportsCountOutputTypeSelectSchema: z.ZodType<Prisma.Goal_reportsCountOutputTypeSelect> = z.object({
  goal_report_values: z.boolean().optional(),
}).strict();

export const Goal_reportsSelectSchema: z.ZodType<Prisma.Goal_reportsSelect> = z.object({
  goal_report_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  goal_id: z.boolean().optional(),
  data: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Goal_reportsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// GOALS
//------------------------------------------------------

export const GoalsIncludeSchema: z.ZodType<Prisma.GoalsInclude> = z.object({
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GoalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const GoalsArgsSchema: z.ZodType<Prisma.GoalsArgs> = z.object({
  select: z.lazy(() => GoalsSelectSchema).optional(),
  include: z.lazy(() => GoalsIncludeSchema).optional(),
}).strict();

export const GoalsCountOutputTypeArgsSchema: z.ZodType<Prisma.GoalsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => GoalsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const GoalsCountOutputTypeSelectSchema: z.ZodType<Prisma.GoalsCountOutputTypeSelect> = z.object({
  goal_reports: z.boolean().optional(),
}).strict();

export const GoalsSelectSchema: z.ZodType<Prisma.GoalsSelect> = z.object({
  goal_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  year: z.boolean().optional(),
  name: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  goal_reports: z.union([z.boolean(),z.lazy(() => Goal_reportsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => GoalsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// LAYER OPTIONS
//------------------------------------------------------

export const Layer_optionsIncludeSchema: z.ZodType<Prisma.Layer_optionsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

export const Layer_optionsArgsSchema: z.ZodType<Prisma.Layer_optionsArgs> = z.object({
  select: z.lazy(() => Layer_optionsSelectSchema).optional(),
  include: z.lazy(() => Layer_optionsIncludeSchema).optional(),
}).strict();

export const Layer_optionsSelectSchema: z.ZodType<Prisma.Layer_optionsSelect> = z.object({
  layer_option_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  tile_layer_id: z.boolean().optional(),
  vector_layer_id: z.boolean().optional(),
  field: z.boolean().optional(),
  value: z.boolean().optional(),
  label: z.boolean().optional(),
  queryable: z.boolean().optional(),
  legend_url: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

// LIST VALUES
//------------------------------------------------------

export const List_valuesIncludeSchema: z.ZodType<Prisma.List_valuesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
}).strict()

export const List_valuesArgsSchema: z.ZodType<Prisma.List_valuesArgs> = z.object({
  select: z.lazy(() => List_valuesSelectSchema).optional(),
  include: z.lazy(() => List_valuesIncludeSchema).optional(),
}).strict();

export const List_valuesSelectSchema: z.ZodType<Prisma.List_valuesSelect> = z.object({
  list_value_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  list_id: z.boolean().optional(),
  value: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
}).strict()

// LISTS
//------------------------------------------------------

export const ListsIncludeSchema: z.ZodType<Prisma.ListsInclude> = z.object({
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  list_values: z.union([z.boolean(),z.lazy(() => List_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ListsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ListsArgsSchema: z.ZodType<Prisma.ListsArgs> = z.object({
  select: z.lazy(() => ListsSelectSchema).optional(),
  include: z.lazy(() => ListsIncludeSchema).optional(),
}).strict();

export const ListsCountOutputTypeArgsSchema: z.ZodType<Prisma.ListsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ListsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ListsCountOutputTypeSelectSchema: z.ZodType<Prisma.ListsCountOutputTypeSelect> = z.object({
  fields: z.boolean().optional(),
  list_values: z.boolean().optional(),
  units: z.boolean().optional(),
}).strict();

export const ListsSelectSchema: z.ZodType<Prisma.ListsSelect> = z.object({
  list_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  name: z.boolean().optional(),
  data: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  list_values: z.union([z.boolean(),z.lazy(() => List_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ListsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// MESSAGES
//------------------------------------------------------

export const MessagesIncludeSchema: z.ZodType<Prisma.MessagesInclude> = z.object({
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessagesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const MessagesArgsSchema: z.ZodType<Prisma.MessagesArgs> = z.object({
  select: z.lazy(() => MessagesSelectSchema).optional(),
  include: z.lazy(() => MessagesIncludeSchema).optional(),
}).strict();

export const MessagesCountOutputTypeArgsSchema: z.ZodType<Prisma.MessagesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => MessagesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const MessagesCountOutputTypeSelectSchema: z.ZodType<Prisma.MessagesCountOutputTypeSelect> = z.object({
  user_messages: z.boolean().optional(),
}).strict();

export const MessagesSelectSchema: z.ZodType<Prisma.MessagesSelect> = z.object({
  message_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  date: z.boolean().optional(),
  message: z.boolean().optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => MessagesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// OBSERVATION SOURCES
//------------------------------------------------------

export const Observation_sourcesIncludeSchema: z.ZodType<Prisma.Observation_sourcesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Observation_sourcesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Observation_sourcesArgsSchema: z.ZodType<Prisma.Observation_sourcesArgs> = z.object({
  select: z.lazy(() => Observation_sourcesSelectSchema).optional(),
  include: z.lazy(() => Observation_sourcesIncludeSchema).optional(),
}).strict();

export const Observation_sourcesCountOutputTypeArgsSchema: z.ZodType<Prisma.Observation_sourcesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Observation_sourcesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Observation_sourcesCountOutputTypeSelectSchema: z.ZodType<Prisma.Observation_sourcesCountOutputTypeSelect> = z.object({
  observations: z.boolean().optional(),
}).strict();

export const Observation_sourcesSelectSchema: z.ZodType<Prisma.Observation_sourcesSelect> = z.object({
  observation_source_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Observation_sourcesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// OBSERVATIONS
//------------------------------------------------------

export const ObservationsIncludeSchema: z.ZodType<Prisma.ObservationsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
}).strict()

export const ObservationsArgsSchema: z.ZodType<Prisma.ObservationsArgs> = z.object({
  select: z.lazy(() => ObservationsSelectSchema).optional(),
  include: z.lazy(() => ObservationsIncludeSchema).optional(),
}).strict();

export const ObservationsSelectSchema: z.ZodType<Prisma.ObservationsSelect> = z.object({
  observation_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  observation_source_id: z.boolean().optional(),
  place_id: z.boolean().optional(),
  id_in_source: z.boolean().optional(),
  url: z.boolean().optional(),
  observation_data: z.boolean().optional(),
  date: z.boolean().optional(),
  author: z.boolean().optional(),
  geometry: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
}).strict()

// PERSONS
//------------------------------------------------------

export const PersonsIncludeSchema: z.ZodType<Prisma.PersonsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const PersonsArgsSchema: z.ZodType<Prisma.PersonsArgs> = z.object({
  select: z.lazy(() => PersonsSelectSchema).optional(),
  include: z.lazy(() => PersonsIncludeSchema).optional(),
}).strict();

export const PersonsSelectSchema: z.ZodType<Prisma.PersonsSelect> = z.object({
  person_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  email: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// PLACE LEVELS
//------------------------------------------------------

export const Place_levelsIncludeSchema: z.ZodType<Prisma.Place_levelsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const Place_levelsArgsSchema: z.ZodType<Prisma.Place_levelsArgs> = z.object({
  select: z.lazy(() => Place_levelsSelectSchema).optional(),
  include: z.lazy(() => Place_levelsIncludeSchema).optional(),
}).strict();

export const Place_levelsSelectSchema: z.ZodType<Prisma.Place_levelsSelect> = z.object({
  place_level_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  level: z.boolean().optional(),
  name_singular: z.boolean().optional(),
  name_plural: z.boolean().optional(),
  name_short: z.boolean().optional(),
  reports: z.boolean().optional(),
  report_values: z.boolean().optional(),
  actions: z.boolean().optional(),
  action_values: z.boolean().optional(),
  action_reports: z.boolean().optional(),
  checks: z.boolean().optional(),
  check_values: z.boolean().optional(),
  check_taxa: z.boolean().optional(),
  observations: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// PLACES
//------------------------------------------------------

export const PlacesIncludeSchema: z.ZodType<Prisma.PlacesInclude> = z.object({
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
  other_places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlacesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const PlacesArgsSchema: z.ZodType<Prisma.PlacesArgs> = z.object({
  select: z.lazy(() => PlacesSelectSchema).optional(),
  include: z.lazy(() => PlacesIncludeSchema).optional(),
}).strict();

export const PlacesCountOutputTypeArgsSchema: z.ZodType<Prisma.PlacesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => PlacesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const PlacesCountOutputTypeSelectSchema: z.ZodType<Prisma.PlacesCountOutputTypeSelect> = z.object({
  charts: z.boolean().optional(),
  observations: z.boolean().optional(),
  other_places: z.boolean().optional(),
}).strict();

export const PlacesSelectSchema: z.ZodType<Prisma.PlacesSelect> = z.object({
  place_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  parent_id: z.boolean().optional(),
  level: z.boolean().optional(),
  since: z.boolean().optional(),
  until: z.boolean().optional(),
  data: z.boolean().optional(),
  geometry: z.boolean().optional(),
  bbox: z.boolean().optional(),
  label: z.boolean().optional(),
  files_active_places: z.boolean().optional(),
  deleted: z.boolean().optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  observations: z.union([z.boolean(),z.lazy(() => ObservationsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesArgsSchema)]).optional(),
  other_places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => PlacesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// PROJECT REPORTS
//------------------------------------------------------

export const Project_reportsIncludeSchema: z.ZodType<Prisma.Project_reportsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

export const Project_reportsArgsSchema: z.ZodType<Prisma.Project_reportsArgs> = z.object({
  select: z.lazy(() => Project_reportsSelectSchema).optional(),
  include: z.lazy(() => Project_reportsIncludeSchema).optional(),
}).strict();

export const Project_reportsSelectSchema: z.ZodType<Prisma.Project_reportsSelect> = z.object({
  project_report_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  year: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
}).strict()

// PROJECT USERS
//------------------------------------------------------

export const Project_usersIncludeSchema: z.ZodType<Prisma.Project_usersInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Project_usersArgsSchema: z.ZodType<Prisma.Project_usersArgs> = z.object({
  select: z.lazy(() => Project_usersSelectSchema).optional(),
  include: z.lazy(() => Project_usersIncludeSchema).optional(),
}).strict();

export const Project_usersSelectSchema: z.ZodType<Prisma.Project_usersSelect> = z.object({
  project_user_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  role: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// PROJECTS
//------------------------------------------------------

export const ProjectsIncludeSchema: z.ZodType<Prisma.ProjectsInclude> = z.object({
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_reports: z.union([z.boolean(),z.lazy(() => Project_reportsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersFindManyArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const ProjectsArgsSchema: z.ZodType<Prisma.ProjectsArgs> = z.object({
  select: z.lazy(() => ProjectsSelectSchema).optional(),
  include: z.lazy(() => ProjectsIncludeSchema).optional(),
}).strict();

export const ProjectsCountOutputTypeArgsSchema: z.ZodType<Prisma.ProjectsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => ProjectsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const ProjectsCountOutputTypeSelectSchema: z.ZodType<Prisma.ProjectsCountOutputTypeSelect> = z.object({
  charts: z.boolean().optional(),
  fields: z.boolean().optional(),
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
  gbif_taxa: z.boolean().optional(),
  lists: z.boolean().optional(),
  observation_sources: z.boolean().optional(),
  persons: z.boolean().optional(),
  place_levels: z.boolean().optional(),
  project_reports: z.boolean().optional(),
  project_users: z.boolean().optional(),
  subprojects: z.boolean().optional(),
  taxonomies: z.boolean().optional(),
  tile_layers: z.boolean().optional(),
  units: z.boolean().optional(),
  vector_layers: z.boolean().optional(),
}).strict();

export const ProjectsSelectSchema: z.ZodType<Prisma.ProjectsSelect> = z.object({
  project_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  name: z.boolean().optional(),
  label: z.boolean().optional(),
  type: z.boolean().optional(),
  subproject_name_singular: z.boolean().optional(),
  subproject_name_plural: z.boolean().optional(),
  subproject_order_by: z.boolean().optional(),
  places_label_by: z.boolean().optional(),
  places_order_by: z.boolean().optional(),
  persons_label_by: z.boolean().optional(),
  persons_order_by: z.boolean().optional(),
  goal_reports_label_by: z.boolean().optional(),
  goal_reports_order_by: z.boolean().optional(),
  values_on_multiple_levels: z.boolean().optional(),
  multiple_action_values_on_same_level: z.boolean().optional(),
  multiple_check_values_on_same_level: z.boolean().optional(),
  data: z.boolean().optional(),
  files_offline: z.boolean().optional(),
  files_active_projects: z.boolean().optional(),
  files_active_subprojects: z.boolean().optional(),
  files_active_places: z.boolean().optional(),
  files_active_actions: z.boolean().optional(),
  files_active_checks: z.boolean().optional(),
  deleted: z.boolean().optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  gbif_taxa: z.union([z.boolean(),z.lazy(() => Gbif_taxaFindManyArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsFindManyArgsSchema)]).optional(),
  observation_sources: z.union([z.boolean(),z.lazy(() => Observation_sourcesFindManyArgsSchema)]).optional(),
  persons: z.union([z.boolean(),z.lazy(() => PersonsFindManyArgsSchema)]).optional(),
  place_levels: z.union([z.boolean(),z.lazy(() => Place_levelsFindManyArgsSchema)]).optional(),
  project_reports: z.union([z.boolean(),z.lazy(() => Project_reportsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsFindManyArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesFindManyArgsSchema)]).optional(),
  tile_layers: z.union([z.boolean(),z.lazy(() => Tile_layersFindManyArgsSchema)]).optional(),
  units: z.union([z.boolean(),z.lazy(() => UnitsFindManyArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => ProjectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// SUBPROJECT REPORTS
//------------------------------------------------------

export const Subproject_reportsIncludeSchema: z.ZodType<Prisma.Subproject_reportsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

export const Subproject_reportsArgsSchema: z.ZodType<Prisma.Subproject_reportsArgs> = z.object({
  select: z.lazy(() => Subproject_reportsSelectSchema).optional(),
  include: z.lazy(() => Subproject_reportsIncludeSchema).optional(),
}).strict();

export const Subproject_reportsSelectSchema: z.ZodType<Prisma.Subproject_reportsSelect> = z.object({
  subproject_report_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  year: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
}).strict()

// SUBPROJECT TAXA
//------------------------------------------------------

export const Subproject_taxaIncludeSchema: z.ZodType<Prisma.Subproject_taxaInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaArgsSchema)]).optional(),
}).strict()

export const Subproject_taxaArgsSchema: z.ZodType<Prisma.Subproject_taxaArgs> = z.object({
  select: z.lazy(() => Subproject_taxaSelectSchema).optional(),
  include: z.lazy(() => Subproject_taxaIncludeSchema).optional(),
}).strict();

export const Subproject_taxaSelectSchema: z.ZodType<Prisma.Subproject_taxaSelect> = z.object({
  subproject_taxon_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  taxon_id: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaArgsSchema)]).optional(),
}).strict()

// SUBPROJECT USERS
//------------------------------------------------------

export const Subproject_usersIncludeSchema: z.ZodType<Prisma.Subproject_usersInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Subproject_usersArgsSchema: z.ZodType<Prisma.Subproject_usersArgs> = z.object({
  select: z.lazy(() => Subproject_usersSelectSchema).optional(),
  include: z.lazy(() => Subproject_usersIncludeSchema).optional(),
}).strict();

export const Subproject_usersSelectSchema: z.ZodType<Prisma.Subproject_usersSelect> = z.object({
  subproject_user_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  subproject_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  role: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  subprojects: z.union([z.boolean(),z.lazy(() => SubprojectsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// SUBPROJECTS
//------------------------------------------------------

export const SubprojectsIncludeSchema: z.ZodType<Prisma.SubprojectsInclude> = z.object({
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsFindManyArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  subproject_reports: z.union([z.boolean(),z.lazy(() => Subproject_reportsFindManyArgsSchema)]).optional(),
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubprojectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const SubprojectsArgsSchema: z.ZodType<Prisma.SubprojectsArgs> = z.object({
  select: z.lazy(() => SubprojectsSelectSchema).optional(),
  include: z.lazy(() => SubprojectsIncludeSchema).optional(),
}).strict();

export const SubprojectsCountOutputTypeArgsSchema: z.ZodType<Prisma.SubprojectsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => SubprojectsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const SubprojectsCountOutputTypeSelectSchema: z.ZodType<Prisma.SubprojectsCountOutputTypeSelect> = z.object({
  charts: z.boolean().optional(),
  gbif_occurrence_downloads: z.boolean().optional(),
  gbif_occurrences: z.boolean().optional(),
  goals: z.boolean().optional(),
  places: z.boolean().optional(),
  subproject_reports: z.boolean().optional(),
  subproject_taxa: z.boolean().optional(),
  subproject_users: z.boolean().optional(),
}).strict();

export const SubprojectsSelectSchema: z.ZodType<Prisma.SubprojectsSelect> = z.object({
  subproject_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  name: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  start_year: z.boolean().optional(),
  end_year: z.boolean().optional(),
  data: z.boolean().optional(),
  deleted: z.boolean().optional(),
  charts: z.union([z.boolean(),z.lazy(() => ChartsFindManyArgsSchema)]).optional(),
  gbif_occurrence_downloads: z.union([z.boolean(),z.lazy(() => Gbif_occurrence_downloadsFindManyArgsSchema)]).optional(),
  gbif_occurrences: z.union([z.boolean(),z.lazy(() => Gbif_occurrencesFindManyArgsSchema)]).optional(),
  goals: z.union([z.boolean(),z.lazy(() => GoalsFindManyArgsSchema)]).optional(),
  places: z.union([z.boolean(),z.lazy(() => PlacesFindManyArgsSchema)]).optional(),
  subproject_reports: z.union([z.boolean(),z.lazy(() => Subproject_reportsFindManyArgsSchema)]).optional(),
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => SubprojectsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAXA
//------------------------------------------------------

export const TaxaIncludeSchema: z.ZodType<Prisma.TaxaInclude> = z.object({
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxaCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaxaArgsSchema: z.ZodType<Prisma.TaxaArgs> = z.object({
  select: z.lazy(() => TaxaSelectSchema).optional(),
  include: z.lazy(() => TaxaIncludeSchema).optional(),
}).strict();

export const TaxaCountOutputTypeArgsSchema: z.ZodType<Prisma.TaxaCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaxaCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaxaCountOutputTypeSelectSchema: z.ZodType<Prisma.TaxaCountOutputTypeSelect> = z.object({
  subproject_taxa: z.boolean().optional(),
}).strict();

export const TaxaSelectSchema: z.ZodType<Prisma.TaxaSelect> = z.object({
  taxon_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  taxonomy_id: z.boolean().optional(),
  name: z.boolean().optional(),
  id_in_source: z.boolean().optional(),
  url: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  subproject_taxa: z.union([z.boolean(),z.lazy(() => Subproject_taxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  taxonomies: z.union([z.boolean(),z.lazy(() => TaxonomiesArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxaCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TAXONOMIES
//------------------------------------------------------

export const TaxonomiesIncludeSchema: z.ZodType<Prisma.TaxonomiesInclude> = z.object({
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxonomiesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const TaxonomiesArgsSchema: z.ZodType<Prisma.TaxonomiesArgs> = z.object({
  select: z.lazy(() => TaxonomiesSelectSchema).optional(),
  include: z.lazy(() => TaxonomiesIncludeSchema).optional(),
}).strict();

export const TaxonomiesCountOutputTypeArgsSchema: z.ZodType<Prisma.TaxonomiesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => TaxonomiesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const TaxonomiesCountOutputTypeSelectSchema: z.ZodType<Prisma.TaxonomiesCountOutputTypeSelect> = z.object({
  taxa: z.boolean().optional(),
}).strict();

export const TaxonomiesSelectSchema: z.ZodType<Prisma.TaxonomiesSelect> = z.object({
  taxonomy_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  type: z.boolean().optional(),
  name: z.boolean().optional(),
  url: z.boolean().optional(),
  obsolete: z.boolean().optional(),
  data: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  taxa: z.union([z.boolean(),z.lazy(() => TaxaFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => TaxonomiesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// TILE LAYERS
//------------------------------------------------------

export const Tile_layersIncludeSchema: z.ZodType<Prisma.Tile_layersInclude> = z.object({
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Tile_layersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Tile_layersArgsSchema: z.ZodType<Prisma.Tile_layersArgs> = z.object({
  select: z.lazy(() => Tile_layersSelectSchema).optional(),
  include: z.lazy(() => Tile_layersIncludeSchema).optional(),
}).strict();

export const Tile_layersCountOutputTypeArgsSchema: z.ZodType<Prisma.Tile_layersCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Tile_layersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Tile_layersCountOutputTypeSelectSchema: z.ZodType<Prisma.Tile_layersCountOutputTypeSelect> = z.object({
  layer_options: z.boolean().optional(),
}).strict();

export const Tile_layersSelectSchema: z.ZodType<Prisma.Tile_layersSelect> = z.object({
  tile_layer_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  label: z.boolean().optional(),
  sort: z.boolean().optional(),
  active: z.boolean().optional(),
  type: z.boolean().optional(),
  wmts_url_template: z.boolean().optional(),
  wmts_subdomains: z.boolean().optional(),
  wms_base_url: z.boolean().optional(),
  wms_format: z.boolean().optional(),
  wms_layer: z.boolean().optional(),
  wms_parameters: z.boolean().optional(),
  wms_styles: z.boolean().optional(),
  wms_transparent: z.boolean().optional(),
  wms_version: z.boolean().optional(),
  wms_info_format: z.boolean().optional(),
  wms_legend: z.boolean().optional(),
  max_zoom: z.boolean().optional(),
  min_zoom: z.boolean().optional(),
  opacity_percent: z.boolean().optional(),
  grayscale: z.boolean().optional(),
  local_data_size: z.boolean().optional(),
  local_data_bounds: z.boolean().optional(),
  deleted: z.boolean().optional(),
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Tile_layersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// UI OPTIONS
//------------------------------------------------------

export const Ui_optionsIncludeSchema: z.ZodType<Prisma.Ui_optionsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const Ui_optionsArgsSchema: z.ZodType<Prisma.Ui_optionsArgs> = z.object({
  select: z.lazy(() => Ui_optionsSelectSchema).optional(),
  include: z.lazy(() => Ui_optionsIncludeSchema).optional(),
}).strict();

export const Ui_optionsSelectSchema: z.ZodType<Prisma.Ui_optionsSelect> = z.object({
  user_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  designing: z.boolean().optional(),
  breadcrumbs_overflowing: z.boolean().optional(),
  navs_overflowing: z.boolean().optional(),
  tabs: z.boolean().optional(),
  show_map: z.boolean().optional(),
  map_bounds: z.boolean().optional(),
  local_map_show: z.boolean().optional(),
  tile_layer_sorter: z.boolean().optional(),
  vector_layer_sorter: z.boolean().optional(),
  editing_place_geometry: z.boolean().optional(),
  editing_check_geometry: z.boolean().optional(),
  editing_action_geometry: z.boolean().optional(),
  label: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// UNITS
//------------------------------------------------------

export const UnitsIncludeSchema: z.ZodType<Prisma.UnitsInclude> = z.object({
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UnitsCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UnitsArgsSchema: z.ZodType<Prisma.UnitsArgs> = z.object({
  select: z.lazy(() => UnitsSelectSchema).optional(),
  include: z.lazy(() => UnitsIncludeSchema).optional(),
}).strict();

export const UnitsCountOutputTypeArgsSchema: z.ZodType<Prisma.UnitsCountOutputTypeArgs> = z.object({
  select: z.lazy(() => UnitsCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UnitsCountOutputTypeSelectSchema: z.ZodType<Prisma.UnitsCountOutputTypeSelect> = z.object({
  chart_subjects: z.boolean().optional(),
  goal_report_values: z.boolean().optional(),
}).strict();

export const UnitsSelectSchema: z.ZodType<Prisma.UnitsSelect> = z.object({
  unit_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  use_for_action_values: z.boolean().optional(),
  use_for_action_report_values: z.boolean().optional(),
  use_for_check_values: z.boolean().optional(),
  use_for_place_report_values: z.boolean().optional(),
  use_for_goal_report_values: z.boolean().optional(),
  use_for_subproject_taxa: z.boolean().optional(),
  use_for_check_taxa: z.boolean().optional(),
  name: z.boolean().optional(),
  summable: z.boolean().optional(),
  sort: z.boolean().optional(),
  type: z.boolean().optional(),
  list_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  chart_subjects: z.union([z.boolean(),z.lazy(() => Chart_subjectsFindManyArgsSchema)]).optional(),
  goal_report_values: z.union([z.boolean(),z.lazy(() => Goal_report_valuesFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  lists: z.union([z.boolean(),z.lazy(() => ListsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UnitsCountOutputTypeArgsSchema)]).optional(),
}).strict()

// USER MESSAGES
//------------------------------------------------------

export const User_messagesIncludeSchema: z.ZodType<Prisma.User_messagesInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessagesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

export const User_messagesArgsSchema: z.ZodType<Prisma.User_messagesArgs> = z.object({
  select: z.lazy(() => User_messagesSelectSchema).optional(),
  include: z.lazy(() => User_messagesIncludeSchema).optional(),
}).strict();

export const User_messagesSelectSchema: z.ZodType<Prisma.User_messagesSelect> = z.object({
  user_message_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  user_id: z.boolean().optional(),
  message_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  read: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  messages: z.union([z.boolean(),z.lazy(() => MessagesArgsSchema)]).optional(),
  users: z.union([z.boolean(),z.lazy(() => UsersArgsSchema)]).optional(),
}).strict()

// USERS
//------------------------------------------------------

export const UsersIncludeSchema: z.ZodType<Prisma.UsersInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const UsersArgsSchema: z.ZodType<Prisma.UsersArgs> = z.object({
  select: z.lazy(() => UsersSelectSchema).optional(),
  include: z.lazy(() => UsersIncludeSchema).optional(),
}).strict();

export const UsersCountOutputTypeArgsSchema: z.ZodType<Prisma.UsersCountOutputTypeArgs> = z.object({
  select: z.lazy(() => UsersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const UsersCountOutputTypeSelectSchema: z.ZodType<Prisma.UsersCountOutputTypeSelect> = z.object({
  accounts: z.boolean().optional(),
  project_users: z.boolean().optional(),
  subproject_users: z.boolean().optional(),
  user_messages: z.boolean().optional(),
}).strict();

export const UsersSelectSchema: z.ZodType<Prisma.UsersSelect> = z.object({
  user_id: z.boolean().optional(),
  email: z.boolean().optional(),
  auth_id: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsFindManyArgsSchema)]).optional(),
  project_users: z.union([z.boolean(),z.lazy(() => Project_usersFindManyArgsSchema)]).optional(),
  subproject_users: z.union([z.boolean(),z.lazy(() => Subproject_usersFindManyArgsSchema)]).optional(),
  ui_options: z.union([z.boolean(),z.lazy(() => Ui_optionsArgsSchema)]).optional(),
  user_messages: z.union([z.boolean(),z.lazy(() => User_messagesFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => UsersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// VECTOR LAYER DISPLAYS
//------------------------------------------------------

export const Vector_layer_displaysIncludeSchema: z.ZodType<Prisma.Vector_layer_displaysInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

export const Vector_layer_displaysArgsSchema: z.ZodType<Prisma.Vector_layer_displaysArgs> = z.object({
  select: z.lazy(() => Vector_layer_displaysSelectSchema).optional(),
  include: z.lazy(() => Vector_layer_displaysIncludeSchema).optional(),
}).strict();

export const Vector_layer_displaysSelectSchema: z.ZodType<Prisma.Vector_layer_displaysSelect> = z.object({
  vector_layer_display_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  vector_layer_id: z.boolean().optional(),
  display_property_value: z.boolean().optional(),
  marker_type: z.boolean().optional(),
  circle_marker_radius: z.boolean().optional(),
  marker_symbol: z.boolean().optional(),
  marker_size: z.boolean().optional(),
  stroke: z.boolean().optional(),
  color: z.boolean().optional(),
  weight: z.boolean().optional(),
  opacity_percent: z.boolean().optional(),
  line_cap: z.boolean().optional(),
  line_join: z.boolean().optional(),
  dash_array: z.boolean().optional(),
  dash_offset: z.boolean().optional(),
  fill: z.boolean().optional(),
  fill_color: z.boolean().optional(),
  fill_opacity_percent: z.boolean().optional(),
  fill_rule: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

// VECTOR LAYER GEOMS
//------------------------------------------------------

export const Vector_layer_geomsIncludeSchema: z.ZodType<Prisma.Vector_layer_geomsInclude> = z.object({
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

export const Vector_layer_geomsArgsSchema: z.ZodType<Prisma.Vector_layer_geomsArgs> = z.object({
  select: z.lazy(() => Vector_layer_geomsSelectSchema).optional(),
  include: z.lazy(() => Vector_layer_geomsIncludeSchema).optional(),
}).strict();

export const Vector_layer_geomsSelectSchema: z.ZodType<Prisma.Vector_layer_geomsSelect> = z.object({
  vector_layer_geom_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  vector_layer_id: z.boolean().optional(),
  geometry: z.boolean().optional(),
  properties: z.boolean().optional(),
  bbox_sw_lng: z.boolean().optional(),
  bbox_sw_lat: z.boolean().optional(),
  bbox_ne_lng: z.boolean().optional(),
  bbox_ne_lat: z.boolean().optional(),
  deleted: z.boolean().optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  vector_layers: z.union([z.boolean(),z.lazy(() => Vector_layersArgsSchema)]).optional(),
}).strict()

// VECTOR LAYERS
//------------------------------------------------------

export const Vector_layersIncludeSchema: z.ZodType<Prisma.Vector_layersInclude> = z.object({
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  vector_layer_displays: z.union([z.boolean(),z.lazy(() => Vector_layer_displaysFindManyArgsSchema)]).optional(),
  vector_layer_geoms: z.union([z.boolean(),z.lazy(() => Vector_layer_geomsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Vector_layersCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Vector_layersArgsSchema: z.ZodType<Prisma.Vector_layersArgs> = z.object({
  select: z.lazy(() => Vector_layersSelectSchema).optional(),
  include: z.lazy(() => Vector_layersIncludeSchema).optional(),
}).strict();

export const Vector_layersCountOutputTypeArgsSchema: z.ZodType<Prisma.Vector_layersCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Vector_layersCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Vector_layersCountOutputTypeSelectSchema: z.ZodType<Prisma.Vector_layersCountOutputTypeSelect> = z.object({
  layer_options: z.boolean().optional(),
  vector_layer_displays: z.boolean().optional(),
  vector_layer_geoms: z.boolean().optional(),
}).strict();

export const Vector_layersSelectSchema: z.ZodType<Prisma.Vector_layersSelect> = z.object({
  vector_layer_id: z.boolean().optional(),
  account_id: z.boolean().optional(),
  project_id: z.boolean().optional(),
  label: z.boolean().optional(),
  type: z.boolean().optional(),
  display_by_property_field: z.boolean().optional(),
  sort: z.boolean().optional(),
  active: z.boolean().optional(),
  max_zoom: z.boolean().optional(),
  min_zoom: z.boolean().optional(),
  max_features: z.boolean().optional(),
  wfs_url: z.boolean().optional(),
  wfs_layer: z.boolean().optional(),
  wfs_version: z.boolean().optional(),
  wfs_output_format: z.boolean().optional(),
  feature_count: z.boolean().optional(),
  point_count: z.boolean().optional(),
  line_count: z.boolean().optional(),
  polygon_count: z.boolean().optional(),
  deleted: z.boolean().optional(),
  layer_options: z.union([z.boolean(),z.lazy(() => Layer_optionsFindManyArgsSchema)]).optional(),
  vector_layer_displays: z.union([z.boolean(),z.lazy(() => Vector_layer_displaysFindManyArgsSchema)]).optional(),
  vector_layer_geoms: z.union([z.boolean(),z.lazy(() => Vector_layer_geomsFindManyArgsSchema)]).optional(),
  accounts: z.union([z.boolean(),z.lazy(() => AccountsArgsSchema)]).optional(),
  projects: z.union([z.boolean(),z.lazy(() => ProjectsArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Vector_layersCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WIDGET TYPES
//------------------------------------------------------

export const Widget_typesIncludeSchema: z.ZodType<Prisma.Widget_typesInclude> = z.object({
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Widget_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

export const Widget_typesArgsSchema: z.ZodType<Prisma.Widget_typesArgs> = z.object({
  select: z.lazy(() => Widget_typesSelectSchema).optional(),
  include: z.lazy(() => Widget_typesIncludeSchema).optional(),
}).strict();

export const Widget_typesCountOutputTypeArgsSchema: z.ZodType<Prisma.Widget_typesCountOutputTypeArgs> = z.object({
  select: z.lazy(() => Widget_typesCountOutputTypeSelectSchema).nullish(),
}).strict();

export const Widget_typesCountOutputTypeSelectSchema: z.ZodType<Prisma.Widget_typesCountOutputTypeSelect> = z.object({
  fields: z.boolean().optional(),
  widgets_for_fields: z.boolean().optional(),
}).strict();

export const Widget_typesSelectSchema: z.ZodType<Prisma.Widget_typesSelect> = z.object({
  widget_type_id: z.boolean().optional(),
  name: z.boolean().optional(),
  needs_list: z.boolean().optional(),
  sort: z.boolean().optional(),
  comment: z.boolean().optional(),
  label_replace_by_generated_column: z.boolean().optional(),
  deleted: z.boolean().optional(),
  fields: z.union([z.boolean(),z.lazy(() => FieldsFindManyArgsSchema)]).optional(),
  widgets_for_fields: z.union([z.boolean(),z.lazy(() => Widgets_for_fieldsFindManyArgsSchema)]).optional(),
  _count: z.union([z.boolean(),z.lazy(() => Widget_typesCountOutputTypeArgsSchema)]).optional(),
}).strict()

// WIDGETS FOR FIELDS
//------------------------------------------------------

export const Widgets_for_fieldsIncludeSchema: z.ZodType<Prisma.Widgets_for_fieldsInclude> = z.object({
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()

export const Widgets_for_fieldsArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsArgs> = z.object({
  select: z.lazy(() => Widgets_for_fieldsSelectSchema).optional(),
  include: z.lazy(() => Widgets_for_fieldsIncludeSchema).optional(),
}).strict();

export const Widgets_for_fieldsSelectSchema: z.ZodType<Prisma.Widgets_for_fieldsSelect> = z.object({
  widget_for_field_id: z.boolean().optional(),
  field_type_id: z.boolean().optional(),
  widget_type_id: z.boolean().optional(),
  label: z.boolean().optional(),
  deleted: z.boolean().optional(),
  field_types: z.union([z.boolean(),z.lazy(() => Field_typesArgsSchema)]).optional(),
  widget_types: z.union([z.boolean(),z.lazy(() => Widget_typesArgsSchema)]).optional(),
}).strict()


/////////////////////////////////////////
// INPUT TYPES
/////////////////////////////////////////

export const AccountsWhereInputSchema: z.ZodType<Prisma.AccountsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsWhereInputSchema),z.lazy(() => AccountsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsWhereInputSchema),z.lazy(() => AccountsWhereInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsListRelationFilterSchema).optional(),
  charts: z.lazy(() => ChartsListRelationFilterSchema).optional(),
  fields: z.lazy(() => FieldsListRelationFilterSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaListRelationFilterSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesListRelationFilterSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsListRelationFilterSchema).optional(),
  goals: z.lazy(() => GoalsListRelationFilterSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsListRelationFilterSchema).optional(),
  list_values: z.lazy(() => List_valuesListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListsListRelationFilterSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesListRelationFilterSchema).optional(),
  observations: z.lazy(() => ObservationsListRelationFilterSchema).optional(),
  persons: z.lazy(() => PersonsListRelationFilterSchema).optional(),
  place_levels: z.lazy(() => Place_levelsListRelationFilterSchema).optional(),
  places: z.lazy(() => PlacesListRelationFilterSchema).optional(),
  project_reports: z.lazy(() => Project_reportsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  projects: z.lazy(() => ProjectsListRelationFilterSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsListRelationFilterSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaListRelationFilterSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersListRelationFilterSchema).optional(),
  subprojects: z.lazy(() => SubprojectsListRelationFilterSchema).optional(),
  taxa: z.lazy(() => TaxaListRelationFilterSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesListRelationFilterSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersListRelationFilterSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsListRelationFilterSchema).optional(),
  units: z.lazy(() => UnitsListRelationFilterSchema).optional(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysListRelationFilterSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsListRelationFilterSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersListRelationFilterSchema).optional()
}).strict();

export const AccountsOrderByWithRelationInputSchema: z.ZodType<Prisma.AccountsOrderByWithRelationInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsOrderByRelationAggregateInputSchema).optional(),
  charts: z.lazy(() => ChartsOrderByRelationAggregateInputSchema).optional(),
  fields: z.lazy(() => FieldsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaOrderByRelationAggregateInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesOrderByRelationAggregateInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsOrderByRelationAggregateInputSchema).optional(),
  goals: z.lazy(() => GoalsOrderByRelationAggregateInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsOrderByRelationAggregateInputSchema).optional(),
  list_values: z.lazy(() => List_valuesOrderByRelationAggregateInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByRelationAggregateInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesOrderByRelationAggregateInputSchema).optional(),
  observations: z.lazy(() => ObservationsOrderByRelationAggregateInputSchema).optional(),
  persons: z.lazy(() => PersonsOrderByRelationAggregateInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsOrderByRelationAggregateInputSchema).optional(),
  places: z.lazy(() => PlacesOrderByRelationAggregateInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByRelationAggregateInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsOrderByRelationAggregateInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaOrderByRelationAggregateInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersOrderByRelationAggregateInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByRelationAggregateInputSchema).optional(),
  taxa: z.lazy(() => TaxaOrderByRelationAggregateInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByRelationAggregateInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersOrderByRelationAggregateInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsOrderByRelationAggregateInputSchema).optional(),
  units: z.lazy(() => UnitsOrderByRelationAggregateInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysOrderByRelationAggregateInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsOrderByRelationAggregateInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersOrderByRelationAggregateInputSchema).optional()
}).strict();

export const AccountsWhereUniqueInputSchema: z.ZodType<Prisma.AccountsWhereUniqueInput> = z.object({
  account_id: z.string().uuid().optional()
}).strict();

export const AccountsOrderByWithAggregationInputSchema: z.ZodType<Prisma.AccountsOrderByWithAggregationInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => AccountsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => AccountsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => AccountsMinOrderByAggregateInputSchema).optional()
}).strict();

export const AccountsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.AccountsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema),z.lazy(() => AccountsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Chart_subjectsWhereInputSchema: z.ZodType<Prisma.Chart_subjectsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Chart_subjectsWhereInputSchema),z.lazy(() => Chart_subjectsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Chart_subjectsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Chart_subjectsWhereInputSchema),z.lazy(() => Chart_subjectsWhereInputSchema).array() ]).optional(),
  chart_subject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  chart_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => Enumchart_subject_tableNullableFilterSchema),z.lazy(() => chart_subject_tableSchema) ]).optional().nullable(),
  table_level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  table_filter: z.lazy(() => JsonNullableFilterSchema).optional(),
  value_source: z.union([ z.lazy(() => Enumchart_subject_value_sourceNullableFilterSchema),z.lazy(() => chart_subject_value_sourceSchema) ]).optional().nullable(),
  value_field: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  value_unit: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumchart_subject_typeNullableFilterSchema),z.lazy(() => chart_subject_typeSchema) ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill_graded: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  connect_nulls: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  charts: z.union([ z.lazy(() => ChartsRelationFilterSchema),z.lazy(() => ChartsWhereInputSchema) ]).optional().nullable(),
  units: z.union([ z.lazy(() => UnitsRelationFilterSchema),z.lazy(() => UnitsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsOrderByWithRelationInputSchema: z.ZodType<Prisma.Chart_subjectsOrderByWithRelationInput> = z.object({
  chart_subject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  table_level: z.lazy(() => SortOrderSchema).optional(),
  table_filter: z.lazy(() => SortOrderSchema).optional(),
  value_source: z.lazy(() => SortOrderSchema).optional(),
  value_field: z.lazy(() => SortOrderSchema).optional(),
  value_unit: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_graded: z.lazy(() => SortOrderSchema).optional(),
  connect_nulls: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  charts: z.lazy(() => ChartsOrderByWithRelationInputSchema).optional(),
  units: z.lazy(() => UnitsOrderByWithRelationInputSchema).optional()
}).strict();

export const Chart_subjectsWhereUniqueInputSchema: z.ZodType<Prisma.Chart_subjectsWhereUniqueInput> = z.object({
  chart_subject_id: z.string().uuid().optional()
}).strict();

export const Chart_subjectsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Chart_subjectsOrderByWithAggregationInput> = z.object({
  chart_subject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  table_level: z.lazy(() => SortOrderSchema).optional(),
  table_filter: z.lazy(() => SortOrderSchema).optional(),
  value_source: z.lazy(() => SortOrderSchema).optional(),
  value_field: z.lazy(() => SortOrderSchema).optional(),
  value_unit: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_graded: z.lazy(() => SortOrderSchema).optional(),
  connect_nulls: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Chart_subjectsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Chart_subjectsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Chart_subjectsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Chart_subjectsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Chart_subjectsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Chart_subjectsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Chart_subjectsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Chart_subjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => Chart_subjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Chart_subjectsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Chart_subjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => Chart_subjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  chart_subject_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  chart_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => Enumchart_subject_tableNullableWithAggregatesFilterSchema),z.lazy(() => chart_subject_tableSchema) ]).optional().nullable(),
  table_level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  table_filter: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  value_source: z.union([ z.lazy(() => Enumchart_subject_value_sourceNullableWithAggregatesFilterSchema),z.lazy(() => chart_subject_value_sourceSchema) ]).optional().nullable(),
  value_field: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  value_unit: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumchart_subject_typeNullableWithAggregatesFilterSchema),z.lazy(() => chart_subject_typeSchema) ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fill_graded: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  connect_nulls: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ChartsWhereInputSchema: z.ZodType<Prisma.ChartsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChartsWhereInputSchema),z.lazy(() => ChartsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChartsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChartsWhereInputSchema),z.lazy(() => ChartsWhereInputSchema).array() ]).optional(),
  chart_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  years_current: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  years_previous: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  years_specific: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_last_x: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_since: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_until: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => Enumchart_typeNullableFilterSchema),z.lazy(() => chart_typeSchema) ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subjects_stacked: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  subjects_single: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  percent: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  places: z.union([ z.lazy(() => PlacesRelationFilterSchema),z.lazy(() => PlacesWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsOrderByWithRelationInputSchema: z.ZodType<Prisma.ChartsOrderByWithRelationInput> = z.object({
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  years_current: z.lazy(() => SortOrderSchema).optional(),
  years_previous: z.lazy(() => SortOrderSchema).optional(),
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional(),
  chart_type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  subjects_stacked: z.lazy(() => SortOrderSchema).optional(),
  subjects_single: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  places: z.lazy(() => PlacesOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const ChartsWhereUniqueInputSchema: z.ZodType<Prisma.ChartsWhereUniqueInput> = z.object({
  chart_id: z.string().uuid().optional()
}).strict();

export const ChartsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ChartsOrderByWithAggregationInput> = z.object({
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  years_current: z.lazy(() => SortOrderSchema).optional(),
  years_previous: z.lazy(() => SortOrderSchema).optional(),
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional(),
  chart_type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  subjects_stacked: z.lazy(() => SortOrderSchema).optional(),
  subjects_single: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ChartsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => ChartsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ChartsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ChartsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => ChartsSumOrderByAggregateInputSchema).optional()
}).strict();

export const ChartsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ChartsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ChartsScalarWhereWithAggregatesInputSchema),z.lazy(() => ChartsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChartsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChartsScalarWhereWithAggregatesInputSchema),z.lazy(() => ChartsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  chart_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  years_current: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  years_previous: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  years_specific: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  years_last_x: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  years_since: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  years_until: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => Enumchart_typeNullableWithAggregatesFilterSchema),z.lazy(() => chart_typeSchema) ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subjects_stacked: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  subjects_single: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  percent: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Field_typesWhereInputSchema: z.ZodType<Prisma.Field_typesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Field_typesWhereInputSchema),z.lazy(() => Field_typesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Field_typesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Field_typesWhereInputSchema),z.lazy(() => Field_typesWhereInputSchema).array() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fields: z.lazy(() => FieldsListRelationFilterSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsListRelationFilterSchema).optional()
}).strict();

export const Field_typesOrderByWithRelationInputSchema: z.ZodType<Prisma.Field_typesOrderByWithRelationInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  fields: z.lazy(() => FieldsOrderByRelationAggregateInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Field_typesWhereUniqueInputSchema: z.ZodType<Prisma.Field_typesWhereUniqueInput> = z.object({
  field_type_id: z.string().uuid().optional()
}).strict();

export const Field_typesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Field_typesOrderByWithAggregationInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Field_typesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Field_typesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Field_typesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Field_typesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Field_typesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Field_typesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Field_typesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Field_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const FieldsWhereInputSchema: z.ZodType<Prisma.FieldsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FieldsWhereInputSchema),z.lazy(() => FieldsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldsWhereInputSchema),z.lazy(() => FieldsWhereInputSchema).array() ]).optional(),
  field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  field_label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  preset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  field_types: z.union([ z.lazy(() => Field_typesRelationFilterSchema),z.lazy(() => Field_typesWhereInputSchema) ]).optional().nullable(),
  lists: z.union([ z.lazy(() => ListsRelationFilterSchema),z.lazy(() => ListsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  widget_types: z.union([ z.lazy(() => Widget_typesRelationFilterSchema),z.lazy(() => Widget_typesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsOrderByWithRelationInputSchema: z.ZodType<Prisma.FieldsOrderByWithRelationInput> = z.object({
  field_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  field_label: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  preset: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  field_types: z.lazy(() => Field_typesOrderByWithRelationInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesOrderByWithRelationInputSchema).optional()
}).strict();

export const FieldsWhereUniqueInputSchema: z.ZodType<Prisma.FieldsWhereUniqueInput> = z.object({
  field_id: z.string().uuid().optional()
}).strict();

export const FieldsOrderByWithAggregationInputSchema: z.ZodType<Prisma.FieldsOrderByWithAggregationInput> = z.object({
  field_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  field_label: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  preset: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => FieldsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => FieldsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => FieldsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => FieldsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => FieldsSumOrderByAggregateInputSchema).optional()
}).strict();

export const FieldsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.FieldsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => FieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => FieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => FieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  field_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  field_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  field_label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  preset: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsWhereInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByWithRelationInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsWhereUniqueInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid().optional()
}).strict();

export const Gbif_occurrence_downloadsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByWithAggregationInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_occurrence_downloadsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Gbif_occurrence_downloadsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_occurrence_downloadsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_occurrence_downloadsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Gbif_occurrence_downloadsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableWithAggregatesFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesWhereInputSchema: z.ZodType<Prisma.Gbif_occurrencesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesWhereInputSchema),z.lazy(() => Gbif_occurrencesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesWhereInputSchema),z.lazy(() => Gbif_occurrencesWhereInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByWithRelationInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_occurrencesWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_occurrencesWhereUniqueInput> = z.object({
  gbif_occurrence_id: z.string().uuid().optional()
}).strict();

export const Gbif_occurrencesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByWithAggregationInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_occurrencesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_occurrencesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_occurrencesMinOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_occurrencesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_occurrencesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Gbif_taxaWhereInputSchema: z.ZodType<Prisma.Gbif_taxaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaWhereInputSchema),z.lazy(() => Gbif_taxaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaWhereInputSchema),z.lazy(() => Gbif_taxaWhereInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaOrderByWithRelationInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByWithRelationInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Gbif_taxaWhereUniqueInputSchema: z.ZodType<Prisma.Gbif_taxaWhereUniqueInput> = z.object({
  gbif_taxon_id: z.string().uuid().optional()
}).strict();

export const Gbif_taxaOrderByWithAggregationInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByWithAggregationInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Gbif_taxaCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Gbif_taxaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Gbif_taxaMinOrderByAggregateInputSchema).optional()
}).strict();

export const Gbif_taxaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Gbif_taxaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Gbif_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Goal_report_valuesWhereInputSchema: z.ZodType<Prisma.Goal_report_valuesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_report_valuesWhereInputSchema),z.lazy(() => Goal_report_valuesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_report_valuesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_report_valuesWhereInputSchema),z.lazy(() => Goal_report_valuesWhereInputSchema).array() ]).optional(),
  goal_report_value_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_report_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  value_integer: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  value_numeric: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  value_text: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  goal_reports: z.union([ z.lazy(() => Goal_reportsRelationFilterSchema),z.lazy(() => Goal_reportsWhereInputSchema) ]).optional().nullable(),
  units: z.union([ z.lazy(() => UnitsRelationFilterSchema),z.lazy(() => UnitsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesOrderByWithRelationInputSchema: z.ZodType<Prisma.Goal_report_valuesOrderByWithRelationInput> = z.object({
  goal_report_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional(),
  value_text: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsOrderByWithRelationInputSchema).optional(),
  units: z.lazy(() => UnitsOrderByWithRelationInputSchema).optional()
}).strict();

export const Goal_report_valuesWhereUniqueInputSchema: z.ZodType<Prisma.Goal_report_valuesWhereUniqueInput> = z.object({
  goal_report_value_id: z.string().uuid().optional()
}).strict();

export const Goal_report_valuesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Goal_report_valuesOrderByWithAggregationInput> = z.object({
  goal_report_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional(),
  value_text: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Goal_report_valuesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Goal_report_valuesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Goal_report_valuesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Goal_report_valuesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Goal_report_valuesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Goal_report_valuesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Goal_report_valuesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_report_valuesScalarWhereWithAggregatesInputSchema),z.lazy(() => Goal_report_valuesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_report_valuesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_report_valuesScalarWhereWithAggregatesInputSchema),z.lazy(() => Goal_report_valuesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  goal_report_value_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_report_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  unit_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  value_integer: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  value_numeric: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  value_text: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Goal_reportsWhereInputSchema: z.ZodType<Prisma.Goal_reportsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_reportsWhereInputSchema),z.lazy(() => Goal_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_reportsWhereInputSchema),z.lazy(() => Goal_reportsWhereInputSchema).array() ]).optional(),
  goal_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  goals: z.union([ z.lazy(() => GoalsRelationFilterSchema),z.lazy(() => GoalsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsOrderByWithRelationInputSchema: z.ZodType<Prisma.Goal_reportsOrderByWithRelationInput> = z.object({
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  goals: z.lazy(() => GoalsOrderByWithRelationInputSchema).optional()
}).strict();

export const Goal_reportsWhereUniqueInputSchema: z.ZodType<Prisma.Goal_reportsWhereUniqueInput> = z.object({
  goal_report_id: z.string().uuid().optional()
}).strict();

export const Goal_reportsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Goal_reportsOrderByWithAggregationInput> = z.object({
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Goal_reportsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Goal_reportsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Goal_reportsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Goal_reportsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Goal_reportsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Goal_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_reportsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Goal_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  goal_report_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const GoalsWhereInputSchema: z.ZodType<Prisma.GoalsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GoalsWhereInputSchema),z.lazy(() => GoalsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GoalsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GoalsWhereInputSchema),z.lazy(() => GoalsWhereInputSchema).array() ]).optional(),
  goal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const GoalsOrderByWithRelationInputSchema: z.ZodType<Prisma.GoalsOrderByWithRelationInput> = z.object({
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const GoalsWhereUniqueInputSchema: z.ZodType<Prisma.GoalsWhereUniqueInput> = z.object({
  goal_id: z.string().uuid().optional()
}).strict();

export const GoalsOrderByWithAggregationInputSchema: z.ZodType<Prisma.GoalsOrderByWithAggregationInput> = z.object({
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => GoalsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => GoalsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => GoalsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => GoalsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => GoalsSumOrderByAggregateInputSchema).optional()
}).strict();

export const GoalsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.GoalsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => GoalsScalarWhereWithAggregatesInputSchema),z.lazy(() => GoalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => GoalsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GoalsScalarWhereWithAggregatesInputSchema),z.lazy(() => GoalsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  goal_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Layer_optionsWhereInputSchema: z.ZodType<Prisma.Layer_optionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Layer_optionsWhereInputSchema),z.lazy(() => Layer_optionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Layer_optionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Layer_optionsWhereInputSchema),z.lazy(() => Layer_optionsWhereInputSchema).array() ]).optional(),
  layer_option_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  tile_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  field: z.union([ z.lazy(() => Enumlayer_options_field_enumNullableFilterSchema),z.lazy(() => layer_options_field_enumSchema) ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  queryable: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  legend_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  tile_layers: z.union([ z.lazy(() => Tile_layersRelationFilterSchema),z.lazy(() => Tile_layersWhereInputSchema) ]).optional().nullable(),
  vector_layers: z.union([ z.lazy(() => Vector_layersRelationFilterSchema),z.lazy(() => Vector_layersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Layer_optionsOrderByWithRelationInput> = z.object({
  layer_option_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  queryable: z.lazy(() => SortOrderSchema).optional(),
  legend_url: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersOrderByWithRelationInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersOrderByWithRelationInputSchema).optional()
}).strict();

export const Layer_optionsWhereUniqueInputSchema: z.ZodType<Prisma.Layer_optionsWhereUniqueInput> = z.object({
  layer_option_id: z.string().optional()
}).strict();

export const Layer_optionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Layer_optionsOrderByWithAggregationInput> = z.object({
  layer_option_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  queryable: z.lazy(() => SortOrderSchema).optional(),
  legend_url: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Layer_optionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Layer_optionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Layer_optionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Layer_optionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Layer_optionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Layer_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Layer_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Layer_optionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Layer_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Layer_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  layer_option_id: z.union([ z.lazy(() => StringWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  tile_layer_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  field: z.union([ z.lazy(() => Enumlayer_options_field_enumNullableWithAggregatesFilterSchema),z.lazy(() => layer_options_field_enumSchema) ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  queryable: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  legend_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const List_valuesWhereInputSchema: z.ZodType<Prisma.List_valuesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => List_valuesWhereInputSchema),z.lazy(() => List_valuesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => List_valuesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => List_valuesWhereInputSchema),z.lazy(() => List_valuesWhereInputSchema).array() ]).optional(),
  list_value_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  lists: z.union([ z.lazy(() => ListsRelationFilterSchema),z.lazy(() => ListsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesOrderByWithRelationInputSchema: z.ZodType<Prisma.List_valuesOrderByWithRelationInput> = z.object({
  list_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByWithRelationInputSchema).optional()
}).strict();

export const List_valuesWhereUniqueInputSchema: z.ZodType<Prisma.List_valuesWhereUniqueInput> = z.object({
  list_value_id: z.string().uuid().optional()
}).strict();

export const List_valuesOrderByWithAggregationInputSchema: z.ZodType<Prisma.List_valuesOrderByWithAggregationInput> = z.object({
  list_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => List_valuesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => List_valuesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => List_valuesMinOrderByAggregateInputSchema).optional()
}).strict();

export const List_valuesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.List_valuesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => List_valuesScalarWhereWithAggregatesInputSchema),z.lazy(() => List_valuesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => List_valuesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => List_valuesScalarWhereWithAggregatesInputSchema),z.lazy(() => List_valuesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  list_value_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ListsWhereInputSchema: z.ZodType<Prisma.ListsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListsWhereInputSchema),z.lazy(() => ListsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsWhereInputSchema),z.lazy(() => ListsWhereInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fields: z.lazy(() => FieldsListRelationFilterSchema).optional(),
  list_values: z.lazy(() => List_valuesListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  units: z.lazy(() => UnitsListRelationFilterSchema).optional()
}).strict();

export const ListsOrderByWithRelationInputSchema: z.ZodType<Prisma.ListsOrderByWithRelationInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  fields: z.lazy(() => FieldsOrderByRelationAggregateInputSchema).optional(),
  list_values: z.lazy(() => List_valuesOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  units: z.lazy(() => UnitsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ListsWhereUniqueInputSchema: z.ZodType<Prisma.ListsWhereUniqueInput> = z.object({
  list_id: z.string().uuid().optional()
}).strict();

export const ListsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ListsOrderByWithAggregationInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ListsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ListsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ListsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ListsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ListsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ListsScalarWhereWithAggregatesInputSchema),z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsScalarWhereWithAggregatesInputSchema),z.lazy(() => ListsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const MessagesWhereInputSchema: z.ZodType<Prisma.MessagesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => MessagesWhereInputSchema),z.lazy(() => MessagesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessagesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessagesWhereInputSchema),z.lazy(() => MessagesWhereInputSchema).array() ]).optional(),
  message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional()
}).strict();

export const MessagesOrderByWithRelationInputSchema: z.ZodType<Prisma.MessagesOrderByWithRelationInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const MessagesWhereUniqueInputSchema: z.ZodType<Prisma.MessagesWhereUniqueInput> = z.object({
  message_id: z.string().uuid().optional()
}).strict();

export const MessagesOrderByWithAggregationInputSchema: z.ZodType<Prisma.MessagesOrderByWithAggregationInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => MessagesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => MessagesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => MessagesMinOrderByAggregateInputSchema).optional()
}).strict();

export const MessagesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.MessagesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema),z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema),z.lazy(() => MessagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  message_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  message: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Observation_sourcesWhereInputSchema: z.ZodType<Prisma.Observation_sourcesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Observation_sourcesWhereInputSchema),z.lazy(() => Observation_sourcesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Observation_sourcesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Observation_sourcesWhereInputSchema),z.lazy(() => Observation_sourcesWhereInputSchema).array() ]).optional(),
  observation_source_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsListRelationFilterSchema).optional()
}).strict();

export const Observation_sourcesOrderByWithRelationInputSchema: z.ZodType<Prisma.Observation_sourcesOrderByWithRelationInput> = z.object({
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  observations: z.lazy(() => ObservationsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Observation_sourcesWhereUniqueInputSchema: z.ZodType<Prisma.Observation_sourcesWhereUniqueInput> = z.object({
  observation_source_id: z.string().uuid().optional()
}).strict();

export const Observation_sourcesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Observation_sourcesOrderByWithAggregationInput> = z.object({
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Observation_sourcesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Observation_sourcesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Observation_sourcesMinOrderByAggregateInputSchema).optional()
}).strict();

export const Observation_sourcesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Observation_sourcesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Observation_sourcesScalarWhereWithAggregatesInputSchema),z.lazy(() => Observation_sourcesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Observation_sourcesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Observation_sourcesScalarWhereWithAggregatesInputSchema),z.lazy(() => Observation_sourcesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  observation_source_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ObservationsWhereInputSchema: z.ZodType<Prisma.ObservationsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ObservationsWhereInputSchema),z.lazy(() => ObservationsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ObservationsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ObservationsWhereInputSchema),z.lazy(() => ObservationsWhereInputSchema).array() ]).optional(),
  observation_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  observation_source_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  observation_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  author: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  observation_sources: z.union([ z.lazy(() => Observation_sourcesRelationFilterSchema),z.lazy(() => Observation_sourcesWhereInputSchema) ]).optional().nullable(),
  places: z.union([ z.lazy(() => PlacesRelationFilterSchema),z.lazy(() => PlacesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsOrderByWithRelationInputSchema: z.ZodType<Prisma.ObservationsOrderByWithRelationInput> = z.object({
  observation_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  observation_data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  author: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesOrderByWithRelationInputSchema).optional(),
  places: z.lazy(() => PlacesOrderByWithRelationInputSchema).optional()
}).strict();

export const ObservationsWhereUniqueInputSchema: z.ZodType<Prisma.ObservationsWhereUniqueInput> = z.object({
  observation_id: z.string().uuid().optional()
}).strict();

export const ObservationsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ObservationsOrderByWithAggregationInput> = z.object({
  observation_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  observation_data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  author: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ObservationsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ObservationsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ObservationsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ObservationsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ObservationsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ObservationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ObservationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ObservationsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ObservationsScalarWhereWithAggregatesInputSchema),z.lazy(() => ObservationsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  observation_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  observation_source_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  observation_data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableWithAggregatesFilterSchema),z.coerce.date() ]).optional().nullable(),
  author: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const PersonsWhereInputSchema: z.ZodType<Prisma.PersonsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsWhereInputSchema),z.lazy(() => PersonsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsWhereInputSchema),z.lazy(() => PersonsWhereInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsOrderByWithRelationInputSchema: z.ZodType<Prisma.PersonsOrderByWithRelationInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const PersonsWhereUniqueInputSchema: z.ZodType<Prisma.PersonsWhereUniqueInput> = z.object({
  person_id: z.string().uuid().optional()
}).strict();

export const PersonsOrderByWithAggregationInputSchema: z.ZodType<Prisma.PersonsOrderByWithAggregationInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PersonsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PersonsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PersonsMinOrderByAggregateInputSchema).optional()
}).strict();

export const PersonsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PersonsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema),z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema),z.lazy(() => PersonsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Place_levelsWhereInputSchema: z.ZodType<Prisma.Place_levelsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsWhereInputSchema),z.lazy(() => Place_levelsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsWhereInputSchema),z.lazy(() => Place_levelsWhereInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsOrderByWithRelationInputSchema: z.ZodType<Prisma.Place_levelsOrderByWithRelationInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Place_levelsWhereUniqueInputSchema: z.ZodType<Prisma.Place_levelsWhereUniqueInput> = z.object({
  place_level_id: z.string().uuid().optional()
}).strict();

export const Place_levelsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Place_levelsOrderByWithAggregationInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Place_levelsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Place_levelsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Place_levelsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Place_levelsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Place_levelsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Place_levelsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Place_levelsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema),z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema),z.lazy(() => Place_levelsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const PlacesWhereInputSchema: z.ZodType<Prisma.PlacesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlacesWhereInputSchema),z.lazy(() => PlacesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlacesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlacesWhereInputSchema),z.lazy(() => PlacesWhereInputSchema).array() ]).optional(),
  place_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  parent_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  since: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  until: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  bbox: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  charts: z.lazy(() => ChartsListRelationFilterSchema).optional(),
  observations: z.lazy(() => ObservationsListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  places: z.union([ z.lazy(() => PlacesRelationFilterSchema),z.lazy(() => PlacesWhereInputSchema) ]).optional().nullable(),
  other_places: z.lazy(() => PlacesListRelationFilterSchema).optional(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesOrderByWithRelationInputSchema: z.ZodType<Prisma.PlacesOrderByWithRelationInput> = z.object({
  place_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  parent_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  bbox: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  charts: z.lazy(() => ChartsOrderByRelationAggregateInputSchema).optional(),
  observations: z.lazy(() => ObservationsOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  places: z.lazy(() => PlacesOrderByWithRelationInputSchema).optional(),
  other_places: z.lazy(() => PlacesOrderByRelationAggregateInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const PlacesWhereUniqueInputSchema: z.ZodType<Prisma.PlacesWhereUniqueInput> = z.object({
  place_id: z.string().uuid().optional()
}).strict();

export const PlacesOrderByWithAggregationInputSchema: z.ZodType<Prisma.PlacesOrderByWithAggregationInput> = z.object({
  place_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  parent_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  bbox: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => PlacesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => PlacesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => PlacesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => PlacesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => PlacesSumOrderByAggregateInputSchema).optional()
}).strict();

export const PlacesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.PlacesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => PlacesScalarWhereWithAggregatesInputSchema),z.lazy(() => PlacesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlacesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlacesScalarWhereWithAggregatesInputSchema),z.lazy(() => PlacesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  place_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  parent_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  since: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  until: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  geometry: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  bbox: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_reportsWhereInputSchema: z.ZodType<Prisma.Project_reportsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_reportsWhereInputSchema),z.lazy(() => Project_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_reportsWhereInputSchema),z.lazy(() => Project_reportsWhereInputSchema).array() ]).optional(),
  project_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsOrderByWithRelationInputSchema: z.ZodType<Prisma.Project_reportsOrderByWithRelationInput> = z.object({
  project_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Project_reportsWhereUniqueInputSchema: z.ZodType<Prisma.Project_reportsWhereUniqueInput> = z.object({
  project_report_id: z.string().uuid().optional()
}).strict();

export const Project_reportsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Project_reportsOrderByWithAggregationInput> = z.object({
  project_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Project_reportsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Project_reportsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Project_reportsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Project_reportsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Project_reportsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Project_reportsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Project_reportsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Project_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_reportsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  project_report_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_usersWhereInputSchema: z.ZodType<Prisma.Project_usersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersWhereInputSchema),z.lazy(() => Project_usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersWhereInputSchema),z.lazy(() => Project_usersWhereInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersOrderByWithRelationInputSchema: z.ZodType<Prisma.Project_usersOrderByWithRelationInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Project_usersWhereUniqueInputSchema: z.ZodType<Prisma.Project_usersWhereUniqueInput> = z.object({
  project_user_id: z.string().uuid().optional()
}).strict();

export const Project_usersOrderByWithAggregationInputSchema: z.ZodType<Prisma.Project_usersOrderByWithAggregationInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Project_usersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Project_usersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Project_usersMinOrderByAggregateInputSchema).optional()
}).strict();

export const Project_usersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Project_usersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Project_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ProjectsWhereInputSchema: z.ZodType<Prisma.ProjectsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsWhereInputSchema),z.lazy(() => ProjectsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsWhereInputSchema),z.lazy(() => ProjectsWhereInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  charts: z.lazy(() => ChartsListRelationFilterSchema).optional(),
  fields: z.lazy(() => FieldsListRelationFilterSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaListRelationFilterSchema).optional(),
  lists: z.lazy(() => ListsListRelationFilterSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesListRelationFilterSchema).optional(),
  persons: z.lazy(() => PersonsListRelationFilterSchema).optional(),
  place_levels: z.lazy(() => Place_levelsListRelationFilterSchema).optional(),
  project_reports: z.lazy(() => Project_reportsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.lazy(() => SubprojectsListRelationFilterSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesListRelationFilterSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersListRelationFilterSchema).optional(),
  units: z.lazy(() => UnitsListRelationFilterSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersListRelationFilterSchema).optional()
}).strict();

export const ProjectsOrderByWithRelationInputSchema: z.ZodType<Prisma.ProjectsOrderByWithRelationInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  charts: z.lazy(() => ChartsOrderByRelationAggregateInputSchema).optional(),
  fields: z.lazy(() => FieldsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaOrderByRelationAggregateInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByRelationAggregateInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesOrderByRelationAggregateInputSchema).optional(),
  persons: z.lazy(() => PersonsOrderByRelationAggregateInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsOrderByRelationAggregateInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByRelationAggregateInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByRelationAggregateInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersOrderByRelationAggregateInputSchema).optional(),
  units: z.lazy(() => UnitsOrderByRelationAggregateInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersOrderByRelationAggregateInputSchema).optional()
}).strict();

export const ProjectsWhereUniqueInputSchema: z.ZodType<Prisma.ProjectsWhereUniqueInput> = z.object({
  project_id: z.string().uuid().optional()
}).strict();

export const ProjectsOrderByWithAggregationInputSchema: z.ZodType<Prisma.ProjectsOrderByWithAggregationInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => ProjectsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => ProjectsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => ProjectsMinOrderByAggregateInputSchema).optional()
}).strict();

export const ProjectsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.ProjectsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema),z.lazy(() => ProjectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableWithAggregatesFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_reportsWhereInputSchema: z.ZodType<Prisma.Subproject_reportsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_reportsWhereInputSchema),z.lazy(() => Subproject_reportsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_reportsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_reportsWhereInputSchema),z.lazy(() => Subproject_reportsWhereInputSchema).array() ]).optional(),
  subproject_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsOrderByWithRelationInputSchema: z.ZodType<Prisma.Subproject_reportsOrderByWithRelationInput> = z.object({
  subproject_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Subproject_reportsWhereUniqueInputSchema: z.ZodType<Prisma.Subproject_reportsWhereUniqueInput> = z.object({
  subproject_report_id: z.string().uuid().optional()
}).strict();

export const Subproject_reportsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Subproject_reportsOrderByWithAggregationInput> = z.object({
  subproject_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Subproject_reportsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Subproject_reportsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Subproject_reportsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Subproject_reportsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Subproject_reportsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Subproject_reportsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Subproject_reportsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_reportsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_reportsScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_reportsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  subproject_report_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_taxaWhereInputSchema: z.ZodType<Prisma.Subproject_taxaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_taxaWhereInputSchema),z.lazy(() => Subproject_taxaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_taxaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_taxaWhereInputSchema),z.lazy(() => Subproject_taxaWhereInputSchema).array() ]).optional(),
  subproject_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxon_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
  taxa: z.union([ z.lazy(() => TaxaRelationFilterSchema),z.lazy(() => TaxaWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaOrderByWithRelationInputSchema: z.ZodType<Prisma.Subproject_taxaOrderByWithRelationInput> = z.object({
  subproject_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional(),
  taxa: z.lazy(() => TaxaOrderByWithRelationInputSchema).optional()
}).strict();

export const Subproject_taxaWhereUniqueInputSchema: z.ZodType<Prisma.Subproject_taxaWhereUniqueInput> = z.object({
  subproject_taxon_id: z.string().uuid().optional()
}).strict();

export const Subproject_taxaOrderByWithAggregationInputSchema: z.ZodType<Prisma.Subproject_taxaOrderByWithAggregationInput> = z.object({
  subproject_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Subproject_taxaCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Subproject_taxaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Subproject_taxaMinOrderByAggregateInputSchema).optional()
}).strict();

export const Subproject_taxaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Subproject_taxaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_taxaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_taxaScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_taxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  subproject_taxon_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taxon_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_usersWhereInputSchema: z.ZodType<Prisma.Subproject_usersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_usersWhereInputSchema),z.lazy(() => Subproject_usersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_usersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_usersWhereInputSchema),z.lazy(() => Subproject_usersWhereInputSchema).array() ]).optional(),
  subproject_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  subprojects: z.union([ z.lazy(() => SubprojectsRelationFilterSchema),z.lazy(() => SubprojectsWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersOrderByWithRelationInputSchema: z.ZodType<Prisma.Subproject_usersOrderByWithRelationInput> = z.object({
  subproject_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Subproject_usersWhereUniqueInputSchema: z.ZodType<Prisma.Subproject_usersWhereUniqueInput> = z.object({
  subproject_user_id: z.string().uuid().optional()
}).strict();

export const Subproject_usersOrderByWithAggregationInputSchema: z.ZodType<Prisma.Subproject_usersOrderByWithAggregationInput> = z.object({
  subproject_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Subproject_usersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Subproject_usersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Subproject_usersMinOrderByAggregateInputSchema).optional()
}).strict();

export const Subproject_usersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Subproject_usersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_usersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_usersScalarWhereWithAggregatesInputSchema),z.lazy(() => Subproject_usersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  subproject_user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SubprojectsWhereInputSchema: z.ZodType<Prisma.SubprojectsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsWhereInputSchema),z.lazy(() => SubprojectsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsWhereInputSchema),z.lazy(() => SubprojectsWhereInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  charts: z.lazy(() => ChartsListRelationFilterSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsListRelationFilterSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesListRelationFilterSchema).optional(),
  goals: z.lazy(() => GoalsListRelationFilterSchema).optional(),
  places: z.lazy(() => PlacesListRelationFilterSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsListRelationFilterSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaListRelationFilterSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsOrderByWithRelationInputSchema: z.ZodType<Prisma.SubprojectsOrderByWithRelationInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  charts: z.lazy(() => ChartsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesOrderByRelationAggregateInputSchema).optional(),
  goals: z.lazy(() => GoalsOrderByRelationAggregateInputSchema).optional(),
  places: z.lazy(() => PlacesOrderByRelationAggregateInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsOrderByRelationAggregateInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaOrderByRelationAggregateInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const SubprojectsWhereUniqueInputSchema: z.ZodType<Prisma.SubprojectsWhereUniqueInput> = z.object({
  subproject_id: z.string().uuid().optional()
}).strict();

export const SubprojectsOrderByWithAggregationInputSchema: z.ZodType<Prisma.SubprojectsOrderByWithAggregationInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => SubprojectsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => SubprojectsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => SubprojectsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => SubprojectsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => SubprojectsSumOrderByAggregateInputSchema).optional()
}).strict();

export const SubprojectsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.SubprojectsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema),z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema),z.lazy(() => SubprojectsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxaWhereInputSchema: z.ZodType<Prisma.TaxaWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaWhereInputSchema),z.lazy(() => TaxaWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaWhereInputSchema),z.lazy(() => TaxaWhereInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  taxonomies: z.union([ z.lazy(() => TaxonomiesRelationFilterSchema),z.lazy(() => TaxonomiesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaOrderByWithRelationInputSchema: z.ZodType<Prisma.TaxaOrderByWithRelationInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesOrderByWithRelationInputSchema).optional()
}).strict();

export const TaxaWhereUniqueInputSchema: z.ZodType<Prisma.TaxaWhereUniqueInput> = z.object({
  taxon_id: z.string().uuid().optional()
}).strict();

export const TaxaOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaxaOrderByWithAggregationInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaxaCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaxaMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaxaMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaxaScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaxaScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxaScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxonomiesWhereInputSchema: z.ZodType<Prisma.TaxonomiesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesWhereInputSchema),z.lazy(() => TaxonomiesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesWhereInputSchema),z.lazy(() => TaxonomiesWhereInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  taxa: z.lazy(() => TaxaListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesOrderByWithRelationInputSchema: z.ZodType<Prisma.TaxonomiesOrderByWithRelationInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  taxa: z.lazy(() => TaxaOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const TaxonomiesWhereUniqueInputSchema: z.ZodType<Prisma.TaxonomiesWhereUniqueInput> = z.object({
  taxonomy_id: z.string().uuid().optional()
}).strict();

export const TaxonomiesOrderByWithAggregationInputSchema: z.ZodType<Prisma.TaxonomiesOrderByWithAggregationInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => TaxonomiesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => TaxonomiesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => TaxonomiesMinOrderByAggregateInputSchema).optional()
}).strict();

export const TaxonomiesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.TaxonomiesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema),z.lazy(() => TaxonomiesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableWithAggregatesFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Tile_layersWhereInputSchema: z.ZodType<Prisma.Tile_layersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Tile_layersWhereInputSchema),z.lazy(() => Tile_layersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Tile_layersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Tile_layersWhereInputSchema),z.lazy(() => Tile_layersWhereInputSchema).array() ]).optional(),
  tile_layer_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtile_layer_type_enumNullableFilterSchema),z.lazy(() => tile_layer_type_enumSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wmts_subdomains: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_base_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wms_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_layer: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_parameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_styles: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_transparent: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  wms_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wms_info_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_legend: z.lazy(() => JsonNullableFilterSchema).optional(),
  max_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  grayscale: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  local_data_size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  local_data_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional(),
}).strict();

export const Tile_layersOrderByWithRelationInputSchema: z.ZodType<Prisma.Tile_layersOrderByWithRelationInput> = z.object({
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  wmts_url_template: z.lazy(() => SortOrderSchema).optional(),
  wmts_subdomains: z.lazy(() => SortOrderSchema).optional(),
  wms_base_url: z.lazy(() => SortOrderSchema).optional(),
  wms_format: z.lazy(() => SortOrderSchema).optional(),
  wms_layer: z.lazy(() => SortOrderSchema).optional(),
  wms_parameters: z.lazy(() => SortOrderSchema).optional(),
  wms_styles: z.lazy(() => SortOrderSchema).optional(),
  wms_transparent: z.lazy(() => SortOrderSchema).optional(),
  wms_version: z.lazy(() => SortOrderSchema).optional(),
  wms_info_format: z.lazy(() => SortOrderSchema).optional(),
  wms_legend: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  grayscale: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional(),
  local_data_bounds: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Tile_layersWhereUniqueInputSchema: z.ZodType<Prisma.Tile_layersWhereUniqueInput> = z.object({
  tile_layer_id: z.string().uuid().optional()
}).strict();

export const Tile_layersOrderByWithAggregationInputSchema: z.ZodType<Prisma.Tile_layersOrderByWithAggregationInput> = z.object({
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  wmts_url_template: z.lazy(() => SortOrderSchema).optional(),
  wmts_subdomains: z.lazy(() => SortOrderSchema).optional(),
  wms_base_url: z.lazy(() => SortOrderSchema).optional(),
  wms_format: z.lazy(() => SortOrderSchema).optional(),
  wms_layer: z.lazy(() => SortOrderSchema).optional(),
  wms_parameters: z.lazy(() => SortOrderSchema).optional(),
  wms_styles: z.lazy(() => SortOrderSchema).optional(),
  wms_transparent: z.lazy(() => SortOrderSchema).optional(),
  wms_version: z.lazy(() => SortOrderSchema).optional(),
  wms_info_format: z.lazy(() => SortOrderSchema).optional(),
  wms_legend: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  grayscale: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional(),
  local_data_bounds: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Tile_layersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Tile_layersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Tile_layersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Tile_layersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Tile_layersSumOrderByAggregateInputSchema).optional()
}).strict();

export const Tile_layersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Tile_layersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Tile_layersScalarWhereWithAggregatesInputSchema),z.lazy(() => Tile_layersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Tile_layersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Tile_layersScalarWhereWithAggregatesInputSchema),z.lazy(() => Tile_layersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  tile_layer_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtile_layer_type_enumNullableWithAggregatesFilterSchema),z.lazy(() => tile_layer_type_enumSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wmts_subdomains: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_base_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wms_format: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_layer: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_parameters: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_styles: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_transparent: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  wms_version: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wms_info_format: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wms_legend: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  max_zoom: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  grayscale: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  local_data_size: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  local_data_bounds: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Ui_optionsWhereInputSchema: z.ZodType<Prisma.Ui_optionsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsWhereInputSchema),z.lazy(() => Ui_optionsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsWhereInputSchema),z.lazy(() => Ui_optionsWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional(),
}).strict();

export const Ui_optionsOrderByWithRelationInputSchema: z.ZodType<Prisma.Ui_optionsOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const Ui_optionsWhereUniqueInputSchema: z.ZodType<Prisma.Ui_optionsWhereUniqueInput> = z.object({
  user_id: z.string().uuid().optional()
}).strict();

export const Ui_optionsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Ui_optionsOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Ui_optionsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Ui_optionsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Ui_optionsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Ui_optionsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Ui_optionsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema),z.lazy(() => Ui_optionsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UnitsWhereInputSchema: z.ZodType<Prisma.UnitsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UnitsWhereInputSchema),z.lazy(() => UnitsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UnitsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UnitsWhereInputSchema),z.lazy(() => UnitsWhereInputSchema).array() ]).optional(),
  unit_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  use_for_action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  summable: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumunit_typeNullableFilterSchema),z.lazy(() => unit_typeSchema) ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsListRelationFilterSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  lists: z.union([ z.lazy(() => ListsRelationFilterSchema),z.lazy(() => ListsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsOrderByWithRelationInputSchema: z.ZodType<Prisma.UnitsOrderByWithRelationInput> = z.object({
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_place_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_goal_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_subproject_taxa: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_taxa: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  summable: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsOrderByRelationAggregateInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  lists: z.lazy(() => ListsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const UnitsWhereUniqueInputSchema: z.ZodType<Prisma.UnitsWhereUniqueInput> = z.object({
  unit_id: z.string().uuid().optional()
}).strict();

export const UnitsOrderByWithAggregationInputSchema: z.ZodType<Prisma.UnitsOrderByWithAggregationInput> = z.object({
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_place_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_goal_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_subproject_taxa: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_taxa: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  summable: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UnitsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => UnitsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UnitsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UnitsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => UnitsSumOrderByAggregateInputSchema).optional()
}).strict();

export const UnitsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UnitsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UnitsScalarWhereWithAggregatesInputSchema),z.lazy(() => UnitsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UnitsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UnitsScalarWhereWithAggregatesInputSchema),z.lazy(() => UnitsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  unit_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  use_for_action_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  summable: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumunit_typeNullableWithAggregatesFilterSchema),z.lazy(() => unit_typeSchema) ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const User_messagesWhereInputSchema: z.ZodType<Prisma.User_messagesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesWhereInputSchema),z.lazy(() => User_messagesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesWhereInputSchema),z.lazy(() => User_messagesWhereInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  messages: z.union([ z.lazy(() => MessagesRelationFilterSchema),z.lazy(() => MessagesWhereInputSchema) ]).optional().nullable(),
  users: z.union([ z.lazy(() => UsersRelationFilterSchema),z.lazy(() => UsersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesOrderByWithRelationInputSchema: z.ZodType<Prisma.User_messagesOrderByWithRelationInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  messages: z.lazy(() => MessagesOrderByWithRelationInputSchema).optional(),
  users: z.lazy(() => UsersOrderByWithRelationInputSchema).optional()
}).strict();

export const User_messagesWhereUniqueInputSchema: z.ZodType<Prisma.User_messagesWhereUniqueInput> = z.object({
  user_message_id: z.string().uuid().optional()
}).strict();

export const User_messagesOrderByWithAggregationInputSchema: z.ZodType<Prisma.User_messagesOrderByWithAggregationInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => User_messagesCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => User_messagesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => User_messagesMinOrderByAggregateInputSchema).optional()
}).strict();

export const User_messagesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.User_messagesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema),z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema),z.lazy(() => User_messagesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const UsersWhereInputSchema: z.ZodType<Prisma.UsersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersWhereInputSchema),z.lazy(() => UsersWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  auth_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.lazy(() => AccountsListRelationFilterSchema).optional(),
  project_users: z.lazy(() => Project_usersListRelationFilterSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersListRelationFilterSchema).optional(),
  ui_options: z.union([ z.lazy(() => Ui_optionsRelationFilterSchema),z.lazy(() => Ui_optionsWhereInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesListRelationFilterSchema).optional()
}).strict();

export const UsersOrderByWithRelationInputSchema: z.ZodType<Prisma.UsersOrderByWithRelationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByRelationAggregateInputSchema).optional(),
  project_users: z.lazy(() => Project_usersOrderByRelationAggregateInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersOrderByRelationAggregateInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsOrderByWithRelationInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesOrderByRelationAggregateInputSchema).optional()
}).strict();

export const UsersWhereUniqueInputSchema: z.ZodType<Prisma.UsersWhereUniqueInput> = z.object({
  user_id: z.string().uuid().optional()
}).strict();

export const UsersOrderByWithAggregationInputSchema: z.ZodType<Prisma.UsersOrderByWithAggregationInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => UsersCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => UsersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => UsersMinOrderByAggregateInputSchema).optional()
}).strict();

export const UsersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.UsersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UsersScalarWhereWithAggregatesInputSchema),z.lazy(() => UsersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  email: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  auth_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysWhereInputSchema: z.ZodType<Prisma.Vector_layer_displaysWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_displaysWhereInputSchema),z.lazy(() => Vector_layer_displaysWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_displaysWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_displaysWhereInputSchema),z.lazy(() => Vector_layer_displaysWhereInputSchema).array() ]).optional(),
  vector_layer_display_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  display_property_value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => Enummarker_type_enumNullableFilterSchema),z.lazy(() => marker_type_enumSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  marker_symbol: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  marker_size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => Enumline_cap_enumNullableFilterSchema),z.lazy(() => line_cap_enumSchema) ]).optional().nullable(),
  line_join: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dash_array: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dash_offset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fill_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => Enumfill_rule_enumNullableFilterSchema),z.lazy(() => fill_rule_enumSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  vector_layers: z.union([ z.lazy(() => Vector_layersRelationFilterSchema),z.lazy(() => Vector_layersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysOrderByWithRelationInputSchema: z.ZodType<Prisma.Vector_layer_displaysOrderByWithRelationInput> = z.object({
  vector_layer_display_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  display_property_value: z.lazy(() => SortOrderSchema).optional(),
  marker_type: z.lazy(() => SortOrderSchema).optional(),
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_symbol: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  line_cap: z.lazy(() => SortOrderSchema).optional(),
  line_join: z.lazy(() => SortOrderSchema).optional(),
  dash_array: z.lazy(() => SortOrderSchema).optional(),
  dash_offset: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_color: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_rule: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersOrderByWithRelationInputSchema).optional()
}).strict();

export const Vector_layer_displaysWhereUniqueInputSchema: z.ZodType<Prisma.Vector_layer_displaysWhereUniqueInput> = z.object({
  vector_layer_display_id: z.string().uuid().optional()
}).strict();

export const Vector_layer_displaysOrderByWithAggregationInputSchema: z.ZodType<Prisma.Vector_layer_displaysOrderByWithAggregationInput> = z.object({
  vector_layer_display_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  display_property_value: z.lazy(() => SortOrderSchema).optional(),
  marker_type: z.lazy(() => SortOrderSchema).optional(),
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_symbol: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  line_cap: z.lazy(() => SortOrderSchema).optional(),
  line_join: z.lazy(() => SortOrderSchema).optional(),
  dash_array: z.lazy(() => SortOrderSchema).optional(),
  dash_offset: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_color: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_rule: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Vector_layer_displaysCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Vector_layer_displaysAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Vector_layer_displaysMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Vector_layer_displaysMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Vector_layer_displaysSumOrderByAggregateInputSchema).optional()
}).strict();

export const Vector_layer_displaysScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Vector_layer_displaysScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_displaysScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  vector_layer_display_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  display_property_value: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => Enummarker_type_enumNullableWithAggregatesFilterSchema),z.lazy(() => marker_type_enumSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  marker_symbol: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  marker_size: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => Enumline_cap_enumNullableWithAggregatesFilterSchema),z.lazy(() => line_cap_enumSchema) ]).optional().nullable(),
  line_join: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dash_array: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  dash_offset: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  fill_color: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => Enumfill_rule_enumNullableWithAggregatesFilterSchema),z.lazy(() => fill_rule_enumSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsWhereInputSchema: z.ZodType<Prisma.Vector_layer_geomsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_geomsWhereInputSchema),z.lazy(() => Vector_layer_geomsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_geomsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_geomsWhereInputSchema),z.lazy(() => Vector_layer_geomsWhereInputSchema).array() ]).optional(),
  vector_layer_geom_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  properties: z.lazy(() => JsonNullableFilterSchema).optional(),
  bbox_sw_lng: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  vector_layers: z.union([ z.lazy(() => Vector_layersRelationFilterSchema),z.lazy(() => Vector_layersWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsOrderByWithRelationInputSchema: z.ZodType<Prisma.Vector_layer_geomsOrderByWithRelationInput> = z.object({
  vector_layer_geom_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  properties: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersOrderByWithRelationInputSchema).optional()
}).strict();

export const Vector_layer_geomsWhereUniqueInputSchema: z.ZodType<Prisma.Vector_layer_geomsWhereUniqueInput> = z.object({
  vector_layer_geom_id: z.string().uuid().optional()
}).strict();

export const Vector_layer_geomsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Vector_layer_geomsOrderByWithAggregationInput> = z.object({
  vector_layer_geom_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  properties: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Vector_layer_geomsCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Vector_layer_geomsAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Vector_layer_geomsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Vector_layer_geomsMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Vector_layer_geomsSumOrderByAggregateInputSchema).optional()
}).strict();

export const Vector_layer_geomsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Vector_layer_geomsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_geomsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  vector_layer_geom_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  properties: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  bbox_sw_lng: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.lazy(() => FloatNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layersWhereInputSchema: z.ZodType<Prisma.Vector_layersWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layersWhereInputSchema),z.lazy(() => Vector_layersWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layersWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layersWhereInputSchema),z.lazy(() => Vector_layersWhereInputSchema).array() ]).optional(),
  vector_layer_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumvector_layer_type_enumNullableFilterSchema),z.lazy(() => vector_layer_type_enumSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  max_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  max_features: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  wfs_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wfs_layer: z.lazy(() => JsonNullableFilterSchema).optional(),
  wfs_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wfs_output_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  feature_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  point_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  line_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  polygon_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsListRelationFilterSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysListRelationFilterSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsListRelationFilterSchema).optional(),
  accounts: z.union([ z.lazy(() => AccountsRelationFilterSchema),z.lazy(() => AccountsWhereInputSchema) ]).optional().nullable(),
  projects: z.union([ z.lazy(() => ProjectsRelationFilterSchema),z.lazy(() => ProjectsWhereInputSchema) ]).optional(),
}).strict();

export const Vector_layersOrderByWithRelationInputSchema: z.ZodType<Prisma.Vector_layersOrderByWithRelationInput> = z.object({
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  display_by_property_field: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  wfs_url: z.lazy(() => SortOrderSchema).optional(),
  wfs_layer: z.lazy(() => SortOrderSchema).optional(),
  wfs_version: z.lazy(() => SortOrderSchema).optional(),
  wfs_output_format: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsOrderByRelationAggregateInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysOrderByRelationAggregateInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsOrderByRelationAggregateInputSchema).optional(),
  accounts: z.lazy(() => AccountsOrderByWithRelationInputSchema).optional(),
  projects: z.lazy(() => ProjectsOrderByWithRelationInputSchema).optional()
}).strict();

export const Vector_layersWhereUniqueInputSchema: z.ZodType<Prisma.Vector_layersWhereUniqueInput> = z.object({
  vector_layer_id: z.string().uuid().optional()
}).strict();

export const Vector_layersOrderByWithAggregationInputSchema: z.ZodType<Prisma.Vector_layersOrderByWithAggregationInput> = z.object({
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  display_by_property_field: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  wfs_url: z.lazy(() => SortOrderSchema).optional(),
  wfs_layer: z.lazy(() => SortOrderSchema).optional(),
  wfs_version: z.lazy(() => SortOrderSchema).optional(),
  wfs_output_format: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Vector_layersCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Vector_layersAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Vector_layersMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Vector_layersMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Vector_layersSumOrderByAggregateInputSchema).optional()
}).strict();

export const Vector_layersScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Vector_layersScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layersScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layersScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layersScalarWhereWithAggregatesInputSchema),z.lazy(() => Vector_layersScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  vector_layer_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumvector_layer_type_enumNullableWithAggregatesFilterSchema),z.lazy(() => vector_layer_type_enumSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  max_zoom: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  max_features: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  wfs_url: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wfs_layer: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  wfs_version: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  wfs_output_format: z.lazy(() => JsonNullableWithAggregatesFilterSchema).optional(),
  feature_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  point_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  line_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  polygon_count: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Widget_typesWhereInputSchema: z.ZodType<Prisma.Widget_typesWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widget_typesWhereInputSchema),z.lazy(() => Widget_typesWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widget_typesWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widget_typesWhereInputSchema),z.lazy(() => Widget_typesWhereInputSchema).array() ]).optional(),
  widget_type_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  needs_list: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fields: z.lazy(() => FieldsListRelationFilterSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsListRelationFilterSchema).optional()
}).strict();

export const Widget_typesOrderByWithRelationInputSchema: z.ZodType<Prisma.Widget_typesOrderByWithRelationInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  fields: z.lazy(() => FieldsOrderByRelationAggregateInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsOrderByRelationAggregateInputSchema).optional()
}).strict();

export const Widget_typesWhereUniqueInputSchema: z.ZodType<Prisma.Widget_typesWhereUniqueInput> = z.object({
  widget_type_id: z.string().uuid().optional()
}).strict();

export const Widget_typesOrderByWithAggregationInputSchema: z.ZodType<Prisma.Widget_typesOrderByWithAggregationInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Widget_typesCountOrderByAggregateInputSchema).optional(),
  _avg: z.lazy(() => Widget_typesAvgOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Widget_typesMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Widget_typesMinOrderByAggregateInputSchema).optional(),
  _sum: z.lazy(() => Widget_typesSumOrderByAggregateInputSchema).optional()
}).strict();

export const Widget_typesScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Widget_typesScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema),z.lazy(() => Widget_typesScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  widget_type_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  name: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  needs_list: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableWithAggregatesFilterSchema),z.number() ]).optional().nullable(),
  comment: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsWhereInputSchema: z.ZodType<Prisma.Widgets_for_fieldsWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsWhereInputSchema),z.lazy(() => Widgets_for_fieldsWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsWhereInputSchema),z.lazy(() => Widgets_for_fieldsWhereInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  field_types: z.union([ z.lazy(() => Field_typesRelationFilterSchema),z.lazy(() => Field_typesWhereInputSchema) ]).optional().nullable(),
  widget_types: z.union([ z.lazy(() => Widget_typesRelationFilterSchema),z.lazy(() => Widget_typesWhereInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsOrderByWithRelationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByWithRelationInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  field_types: z.lazy(() => Field_typesOrderByWithRelationInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesOrderByWithRelationInputSchema).optional()
}).strict();

export const Widgets_for_fieldsWhereUniqueInputSchema: z.ZodType<Prisma.Widgets_for_fieldsWhereUniqueInput> = z.object({
  widget_for_field_id: z.string().uuid().optional()
}).strict();

export const Widgets_for_fieldsOrderByWithAggregationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByWithAggregationInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional(),
  _count: z.lazy(() => Widgets_for_fieldsCountOrderByAggregateInputSchema).optional(),
  _max: z.lazy(() => Widgets_for_fieldsMaxOrderByAggregateInputSchema).optional(),
  _min: z.lazy(() => Widgets_for_fieldsMinOrderByAggregateInputSchema).optional()
}).strict();

export const Widgets_for_fieldsScalarWhereWithAggregatesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsScalarWhereWithAggregatesInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereWithAggregatesInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidWithAggregatesFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableWithAggregatesFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableWithAggregatesFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const AccountsCreateInputSchema: z.ZodType<Prisma.AccountsCreateInput> = z.object({
  account_id: z.string().uuid(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateInput> = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUpdateInputSchema: z.ZodType<Prisma.AccountsUpdateInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsCreateManyInputSchema: z.ZodType<Prisma.AccountsCreateManyInput> = z.object({
  account_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const AccountsUpdateManyMutationInputSchema: z.ZodType<Prisma.AccountsUpdateManyMutationInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsCreateInputSchema: z.ZodType<Prisma.Chart_subjectsCreateInput> = z.object({
  chart_subject_id: z.string().uuid(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChart_subjectsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedOneWithoutChart_subjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutChart_subjectsInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateInput> = z.object({
  chart_subject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  chart_id: z.string().uuid().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsUpdateInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateInput> = z.object({
  chart_subject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChart_subjectsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateOneWithoutChart_subjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutChart_subjectsNestedInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedUpdateInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateInput> = z.object({
  chart_subject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_unit: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsCreateManyInputSchema: z.ZodType<Prisma.Chart_subjectsCreateManyInput> = z.object({
  chart_subject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  chart_id: z.string().uuid().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsUpdateManyMutationInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyMutationInput> = z.object({
  chart_subject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateManyInput> = z.object({
  chart_subject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_unit: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsCreateInputSchema: z.ZodType<Prisma.ChartsCreateInput> = z.object({
  chart_id: z.string().uuid(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutChartsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChartsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutChartsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutChartsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateInput> = z.object({
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUpdateInputSchema: z.ZodType<Prisma.ChartsUpdateInput> = z.object({
  chart_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutChartsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChartsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutChartsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutChartsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateInput> = z.object({
  chart_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsCreateManyInputSchema: z.ZodType<Prisma.ChartsCreateManyInput> = z.object({
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsUpdateManyMutationInputSchema: z.ZodType<Prisma.ChartsUpdateManyMutationInput> = z.object({
  chart_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyInput> = z.object({
  chart_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Field_typesCreateInputSchema: z.ZodType<Prisma.Field_typesCreateInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutField_typesInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUncheckedCreateInputSchema: z.ZodType<Prisma.Field_typesUncheckedCreateInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutField_typesInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUpdateInputSchema: z.ZodType<Prisma.Field_typesUpdateInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutField_typesNestedInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesUncheckedUpdateInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesCreateManyInputSchema: z.ZodType<Prisma.Field_typesCreateManyInput> = z.object({
  field_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Field_typesUpdateManyMutationInputSchema: z.ZodType<Prisma.Field_typesUpdateManyMutationInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Field_typesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateManyInput> = z.object({
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsCreateInputSchema: z.ZodType<Prisma.FieldsCreateInput> = z.object({
  field_id: z.string().uuid(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutFieldsInputSchema).optional(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutFieldsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutFieldsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutFieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsUpdateInputSchema: z.ZodType<Prisma.FieldsUpdateInput> = z.object({
  field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutFieldsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateInput> = z.object({
  field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsCreateManyInputSchema: z.ZodType<Prisma.FieldsCreateManyInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsUpdateManyMutationInputSchema: z.ZodType<Prisma.FieldsUpdateManyMutationInput> = z.object({
  field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyInput> = z.object({
  field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCreateManyInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyMutationInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesCreateInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesCreateManyInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyMutationInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaCreateInputSchema: z.ZodType<Prisma.Gbif_taxaCreateInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_taxaInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaUpdateInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_taxaNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaCreateManyInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaUpdateManyMutationInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyMutationInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesCreateInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedCreateInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  goal_report_id: z.string().uuid().optional().nullable(),
  unit_id: z.string().uuid().optional().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesUpdateInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateInput> = z.object({
  goal_report_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value_integer: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedUpdateInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateInput> = z.object({
  goal_report_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesCreateManyInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  goal_report_id: z.string().uuid().optional().nullable(),
  unit_id: z.string().uuid().optional().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesUpdateManyMutationInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyMutationInput> = z.object({
  goal_report_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value_integer: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateManyInput> = z.object({
  goal_report_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsCreateInputSchema: z.ZodType<Prisma.Goal_reportsCreateInput> = z.object({
  goal_report_id: z.string().uuid(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutGoal_reportsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_reportsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedOneWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedCreateInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateInput> = z.object({
  goal_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  goal_id: z.string().uuid().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsUpdateInputSchema: z.ZodType<Prisma.Goal_reportsUpdateInput> = z.object({
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutGoal_reportsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_reportsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateOneWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedUpdateInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateInput> = z.object({
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsCreateManyInputSchema: z.ZodType<Prisma.Goal_reportsCreateManyInput> = z.object({
  goal_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  goal_id: z.string().uuid().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_reportsUpdateManyMutationInputSchema: z.ZodType<Prisma.Goal_reportsUpdateManyMutationInput> = z.object({
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateManyInput> = z.object({
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GoalsCreateInputSchema: z.ZodType<Prisma.GoalsCreateInput> = z.object({
  goal_id: z.string().uuid(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutGoalsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoalsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsUncheckedCreateInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateInput> = z.object({
  goal_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsUpdateInputSchema: z.ZodType<Prisma.GoalsUpdateInput> = z.object({
  goal_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutGoalsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoalsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsUncheckedUpdateInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateInput> = z.object({
  goal_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsCreateManyInputSchema: z.ZodType<Prisma.GoalsCreateManyInput> = z.object({
  goal_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const GoalsUpdateManyMutationInputSchema: z.ZodType<Prisma.GoalsUpdateManyMutationInput> = z.object({
  goal_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GoalsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateManyInput> = z.object({
  goal_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsCreateInputSchema: z.ZodType<Prisma.Layer_optionsCreateInput> = z.object({
  layer_option_id: z.string(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutLayer_optionsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().uuid().optional().nullable(),
  tile_layer_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsUpdateInputSchema: z.ZodType<Prisma.Layer_optionsUpdateInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutLayer_optionsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsCreateManyInputSchema: z.ZodType<Prisma.Layer_optionsCreateManyInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().uuid().optional().nullable(),
  tile_layer_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyMutationInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateManyInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesCreateInputSchema: z.ZodType<Prisma.List_valuesCreateInput> = z.object({
  list_value_id: z.string().uuid(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutList_valuesInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutList_valuesInputSchema).optional()
}).strict();

export const List_valuesUncheckedCreateInputSchema: z.ZodType<Prisma.List_valuesUncheckedCreateInput> = z.object({
  list_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const List_valuesUpdateInputSchema: z.ZodType<Prisma.List_valuesUpdateInput> = z.object({
  list_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutList_valuesNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutList_valuesNestedInputSchema).optional()
}).strict();

export const List_valuesUncheckedUpdateInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateInput> = z.object({
  list_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesCreateManyInputSchema: z.ZodType<Prisma.List_valuesCreateManyInput> = z.object({
  list_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const List_valuesUpdateManyMutationInputSchema: z.ZodType<Prisma.List_valuesUpdateManyMutationInput> = z.object({
  list_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateManyInput> = z.object({
  list_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsCreateInputSchema: z.ZodType<Prisma.ListsCreateInput> = z.object({
  list_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutListsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateInputSchema: z.ZodType<Prisma.ListsUncheckedCreateInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUpdateInputSchema: z.ZodType<Prisma.ListsUpdateInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutListsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsCreateManyInputSchema: z.ZodType<Prisma.ListsCreateManyInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsUpdateManyMutationInputSchema: z.ZodType<Prisma.ListsUpdateManyMutationInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesCreateInputSchema: z.ZodType<Prisma.MessagesCreateInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutMessagesInputSchema).optional()
}).strict();

export const MessagesUncheckedCreateInputSchema: z.ZodType<Prisma.MessagesUncheckedCreateInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutMessagesInputSchema).optional()
}).strict();

export const MessagesUpdateInputSchema: z.ZodType<Prisma.MessagesUpdateInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessagesUncheckedUpdateInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutMessagesNestedInputSchema).optional()
}).strict();

export const MessagesCreateManyInputSchema: z.ZodType<Prisma.MessagesCreateManyInput> = z.object({
  message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesUpdateManyMutationInputSchema: z.ZodType<Prisma.MessagesUpdateManyMutationInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateManyInput> = z.object({
  message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Observation_sourcesCreateInputSchema: z.ZodType<Prisma.Observation_sourcesCreateInput> = z.object({
  observation_source_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservation_sourcesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutObservation_sourcesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedCreateInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateInput> = z.object({
  observation_source_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesUpdateInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateInput> = z.object({
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedUpdateInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateInput> = z.object({
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesCreateManyInputSchema: z.ZodType<Prisma.Observation_sourcesCreateManyInput> = z.object({
  observation_source_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Observation_sourcesUpdateManyMutationInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyMutationInput> = z.object({
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Observation_sourcesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateManyInput> = z.object({
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsCreateInputSchema: z.ZodType<Prisma.ObservationsCreateInput> = z.object({
  observation_id: z.string().uuid(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservationsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedOneWithoutObservationsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutObservationsInputSchema).optional()
}).strict();

export const ObservationsUncheckedCreateInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateInput> = z.object({
  observation_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  observation_source_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsUpdateInputSchema: z.ZodType<Prisma.ObservationsUpdateInput> = z.object({
  observation_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservationsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateOneWithoutObservationsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutObservationsNestedInputSchema).optional()
}).strict();

export const ObservationsUncheckedUpdateInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateInput> = z.object({
  observation_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsCreateManyInputSchema: z.ZodType<Prisma.ObservationsCreateManyInput> = z.object({
  observation_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  observation_source_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsUpdateManyMutationInputSchema: z.ZodType<Prisma.ObservationsUpdateManyMutationInput> = z.object({
  observation_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateManyInput> = z.object({
  observation_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsCreateInputSchema: z.ZodType<Prisma.PersonsCreateInput> = z.object({
  person_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPersonsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsUpdateInputSchema: z.ZodType<Prisma.PersonsUpdateInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPersonsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsCreateManyInputSchema: z.ZodType<Prisma.PersonsCreateManyInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsUpdateManyMutationInputSchema: z.ZodType<Prisma.PersonsUpdateManyMutationInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsCreateInputSchema: z.ZodType<Prisma.Place_levelsCreateInput> = z.object({
  place_level_id: z.string().uuid(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlace_levelsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsUpdateInputSchema: z.ZodType<Prisma.Place_levelsUpdateInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlace_levelsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsCreateManyInputSchema: z.ZodType<Prisma.Place_levelsCreateManyInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsUpdateManyMutationInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyMutationInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesCreateInputSchema: z.ZodType<Prisma.PlacesCreateInput> = z.object({
  place_id: z.string().uuid(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateInput> = z.object({
  place_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  parent_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUpdateInputSchema: z.ZodType<Prisma.PlacesUpdateInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesCreateManyInputSchema: z.ZodType<Prisma.PlacesCreateManyInput> = z.object({
  place_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  parent_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PlacesUpdateManyMutationInputSchema: z.ZodType<Prisma.PlacesUpdateManyMutationInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsCreateInputSchema: z.ZodType<Prisma.Project_reportsCreateInput> = z.object({
  project_report_id: z.string().uuid(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_reportsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_reportsInputSchema).optional()
}).strict();

export const Project_reportsUncheckedCreateInputSchema: z.ZodType<Prisma.Project_reportsUncheckedCreateInput> = z.object({
  project_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsUpdateInputSchema: z.ZodType<Prisma.Project_reportsUpdateInput> = z.object({
  project_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_reportsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_reportsNestedInputSchema).optional()
}).strict();

export const Project_reportsUncheckedUpdateInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateInput> = z.object({
  project_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsCreateManyInputSchema: z.ZodType<Prisma.Project_reportsCreateManyInput> = z.object({
  project_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsUpdateManyMutationInputSchema: z.ZodType<Prisma.Project_reportsUpdateManyMutationInput> = z.object({
  project_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateManyInput> = z.object({
  project_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersCreateInputSchema: z.ZodType<Prisma.Project_usersCreateInput> = z.object({
  project_user_id: z.string().uuid(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersUpdateInputSchema: z.ZodType<Prisma.Project_usersUpdateInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersCreateManyInputSchema: z.ZodType<Prisma.Project_usersCreateManyInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersUpdateManyMutationInputSchema: z.ZodType<Prisma.Project_usersUpdateManyMutationInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsCreateInputSchema: z.ZodType<Prisma.ProjectsCreateInput> = z.object({
  project_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateInput> = z.object({
  project_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUpdateInputSchema: z.ZodType<Prisma.ProjectsUpdateInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsCreateManyInputSchema: z.ZodType<Prisma.ProjectsCreateManyInput> = z.object({
  project_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ProjectsUpdateManyMutationInputSchema: z.ZodType<Prisma.ProjectsUpdateManyMutationInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsCreateInputSchema: z.ZodType<Prisma.Subproject_reportsCreateInput> = z.object({
  subproject_report_id: z.string().uuid(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_reportsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_reportsInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedCreateInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedCreateInput> = z.object({
  subproject_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsUpdateInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateInput> = z.object({
  subproject_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_reportsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_reportsNestedInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedUpdateInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateInput> = z.object({
  subproject_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsCreateManyInputSchema: z.ZodType<Prisma.Subproject_reportsCreateManyInput> = z.object({
  subproject_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsUpdateManyMutationInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyMutationInput> = z.object({
  subproject_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateManyInput> = z.object({
  subproject_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaCreateInputSchema: z.ZodType<Prisma.Subproject_taxaCreateInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_taxaInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_taxaInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedOneWithoutSubproject_taxaInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedCreateInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  taxon_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaUpdateInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateInput> = z.object({
  subproject_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateOneWithoutSubproject_taxaNestedInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedUpdateInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateInput> = z.object({
  subproject_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaCreateManyInputSchema: z.ZodType<Prisma.Subproject_taxaCreateManyInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  taxon_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaUpdateManyMutationInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyMutationInput> = z.object({
  subproject_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateManyInput> = z.object({
  subproject_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersCreateInputSchema: z.ZodType<Prisma.Subproject_usersCreateInput> = z.object({
  subproject_user_id: z.string().uuid(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_usersInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutSubproject_usersInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedCreateInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateInput> = z.object({
  subproject_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersUpdateInputSchema: z.ZodType<Prisma.Subproject_usersUpdateInput> = z.object({
  subproject_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_usersNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutSubproject_usersNestedInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedUpdateInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateInput> = z.object({
  subproject_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersCreateManyInputSchema: z.ZodType<Prisma.Subproject_usersCreateManyInput> = z.object({
  subproject_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersUpdateManyMutationInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyMutationInput> = z.object({
  subproject_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateManyInput> = z.object({
  subproject_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsCreateInputSchema: z.ZodType<Prisma.SubprojectsCreateInput> = z.object({
  subproject_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUpdateInputSchema: z.ZodType<Prisma.SubprojectsUpdateInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsCreateManyInputSchema: z.ZodType<Prisma.SubprojectsCreateManyInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsUpdateManyMutationInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyMutationInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateInputSchema: z.ZodType<Prisma.TaxaCreateInput> = z.object({
  taxon_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutTaxaInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxaInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUpdateInputSchema: z.ZodType<Prisma.TaxaUpdateInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutTaxaNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxaNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaCreateManyInputSchema: z.ZodType<Prisma.TaxaCreateManyInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaUpdateManyMutationInputSchema: z.ZodType<Prisma.TaxaUpdateManyMutationInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesCreateInputSchema: z.ZodType<Prisma.TaxonomiesCreateInput> = z.object({
  taxonomy_id: z.string().uuid(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUpdateInputSchema: z.ZodType<Prisma.TaxonomiesUpdateInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesCreateManyInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesUpdateManyMutationInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyMutationInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Tile_layersCreateInputSchema: z.ZodType<Prisma.Tile_layersCreateInput> = z.object({
  tile_layer_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutTile_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTile_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTile_layersInputSchema)
}).strict();

export const Tile_layersUncheckedCreateInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateInput> = z.object({
  tile_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutTile_layersInputSchema).optional()
}).strict();

export const Tile_layersUpdateInputSchema: z.ZodType<Prisma.Tile_layersUpdateInput> = z.object({
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutTile_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTile_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersUncheckedUpdateInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateInput> = z.object({
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersCreateManyInputSchema: z.ZodType<Prisma.Tile_layersCreateManyInput> = z.object({
  tile_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Tile_layersUpdateManyMutationInputSchema: z.ZodType<Prisma.Tile_layersUpdateManyMutationInput> = z.object({
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Tile_layersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateManyInput> = z.object({
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsCreateInputSchema: z.ZodType<Prisma.Ui_optionsCreateInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUi_optionsInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUi_optionsInputSchema)
}).strict();

export const Ui_optionsUncheckedCreateInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateInput> = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsUpdateInputSchema: z.ZodType<Prisma.Ui_optionsUpdateInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUi_optionsNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsCreateManyInputSchema: z.ZodType<Prisma.Ui_optionsCreateManyInput> = z.object({
  user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsUpdateManyMutationInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyMutationInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsCreateInputSchema: z.ZodType<Prisma.UnitsCreateInput> = z.object({
  unit_id: z.string().uuid(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUnitsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutUnitsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateInput> = z.object({
  unit_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUpdateInputSchema: z.ZodType<Prisma.UnitsUpdateInput> = z.object({
  unit_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateInput> = z.object({
  unit_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsCreateManyInputSchema: z.ZodType<Prisma.UnitsCreateManyInput> = z.object({
  unit_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const UnitsUpdateManyMutationInputSchema: z.ZodType<Prisma.UnitsUpdateManyMutationInput> = z.object({
  unit_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateManyInput> = z.object({
  unit_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesCreateInputSchema: z.ZodType<Prisma.User_messagesCreateInput> = z.object({
  user_message_id: z.string().uuid(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateInputSchema: z.ZodType<Prisma.User_messagesUpdateInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesCreateManyInputSchema: z.ZodType<Prisma.User_messagesCreateManyInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateManyMutationInputSchema: z.ZodType<Prisma.User_messagesUpdateManyMutationInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersCreateInputSchema: z.ZodType<Prisma.UsersCreateInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateInputSchema: z.ZodType<Prisma.UsersUncheckedCreateInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUpdateInputSchema: z.ZodType<Prisma.UsersUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersCreateManyInputSchema: z.ZodType<Prisma.UsersCreateManyInput> = z.object({
  user_id: z.string().uuid(),
  email: z.string().optional().nullable(),
  auth_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const UsersUpdateManyMutationInputSchema: z.ZodType<Prisma.UsersUpdateManyMutationInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateManyInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysCreateInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateInput> = z.object({
  vector_layer_display_id: z.string().uuid(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layer_displaysInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutVector_layer_displaysInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedCreateInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedCreateInput> = z.object({
  vector_layer_display_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_displaysUpdateInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateInput> = z.object({
  vector_layer_display_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layer_displaysNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutVector_layer_displaysNestedInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedUpdateInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateInput> = z.object({
  vector_layer_display_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysCreateManyInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyInput> = z.object({
  vector_layer_display_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_displaysUpdateManyMutationInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyMutationInput> = z.object({
  vector_layer_display_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateManyInput> = z.object({
  vector_layer_display_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsCreateInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateInput> = z.object({
  vector_layer_geom_id: z.string().uuid(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_sw_lat: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lat: z.number().or(z.nan()).optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layer_geomsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutVector_layer_geomsInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedCreateInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedCreateInput> = z.object({
  vector_layer_geom_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_sw_lat: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lat: z.number().or(z.nan()).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsUpdateInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateInput> = z.object({
  vector_layer_geom_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layer_geomsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutVector_layer_geomsNestedInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedUpdateInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateInput> = z.object({
  vector_layer_geom_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsCreateManyInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyInput> = z.object({
  vector_layer_geom_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_sw_lat: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lat: z.number().or(z.nan()).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsUpdateManyMutationInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyMutationInput> = z.object({
  vector_layer_geom_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateManyInput> = z.object({
  vector_layer_geom_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layersCreateInputSchema: z.ZodType<Prisma.Vector_layersCreateInput> = z.object({
  vector_layer_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutVector_layersInputSchema)
}).strict();

export const Vector_layersUncheckedCreateInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateInput> = z.object({
  vector_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersUpdateInputSchema: z.ZodType<Prisma.Vector_layersUpdateInput> = z.object({
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateInput> = z.object({
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersCreateManyInputSchema: z.ZodType<Prisma.Vector_layersCreateManyInput> = z.object({
  vector_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layersUpdateManyMutationInputSchema: z.ZodType<Prisma.Vector_layersUpdateManyMutationInput> = z.object({
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layersUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateManyInput> = z.object({
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesCreateInputSchema: z.ZodType<Prisma.Widget_typesCreateInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutWidget_typesInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUncheckedCreateInputSchema: z.ZodType<Prisma.Widget_typesUncheckedCreateInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUpdateInputSchema: z.ZodType<Prisma.Widget_typesUpdateInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutWidget_typesNestedInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesUncheckedUpdateInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema).optional(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesCreateManyInputSchema: z.ZodType<Prisma.Widget_typesCreateManyInput> = z.object({
  widget_type_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widget_typesUpdateManyMutationInputSchema: z.ZodType<Prisma.Widget_typesUpdateManyMutationInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widget_typesUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateManyInput> = z.object({
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsCreateManyInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsUpdateManyMutationInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyMutationInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UuidFilterSchema: z.ZodType<Prisma.UuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const UuidNullableFilterSchema: z.ZodType<Prisma.UuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const StringNullableFilterSchema: z.ZodType<Prisma.StringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const DateTimeNullableFilterSchema: z.ZodType<Prisma.DateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UsersRelationFilterSchema: z.ZodType<Prisma.UsersRelationFilter> = z.object({
  is: z.lazy(() => UsersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UsersWhereInputSchema).optional().nullable()
}).strict();

export const Chart_subjectsListRelationFilterSchema: z.ZodType<Prisma.Chart_subjectsListRelationFilter> = z.object({
  every: z.lazy(() => Chart_subjectsWhereInputSchema).optional(),
  some: z.lazy(() => Chart_subjectsWhereInputSchema).optional(),
  none: z.lazy(() => Chart_subjectsWhereInputSchema).optional()
}).strict();

export const ChartsListRelationFilterSchema: z.ZodType<Prisma.ChartsListRelationFilter> = z.object({
  every: z.lazy(() => ChartsWhereInputSchema).optional(),
  some: z.lazy(() => ChartsWhereInputSchema).optional(),
  none: z.lazy(() => ChartsWhereInputSchema).optional()
}).strict();

export const FieldsListRelationFilterSchema: z.ZodType<Prisma.FieldsListRelationFilter> = z.object({
  every: z.lazy(() => FieldsWhereInputSchema).optional(),
  some: z.lazy(() => FieldsWhereInputSchema).optional(),
  none: z.lazy(() => FieldsWhereInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsListRelationFilterSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_occurrence_downloadsWhereInputSchema).optional()
}).strict();

export const Gbif_occurrencesListRelationFilterSchema: z.ZodType<Prisma.Gbif_occurrencesListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_occurrencesWhereInputSchema).optional()
}).strict();

export const Gbif_taxaListRelationFilterSchema: z.ZodType<Prisma.Gbif_taxaListRelationFilter> = z.object({
  every: z.lazy(() => Gbif_taxaWhereInputSchema).optional(),
  some: z.lazy(() => Gbif_taxaWhereInputSchema).optional(),
  none: z.lazy(() => Gbif_taxaWhereInputSchema).optional()
}).strict();

export const Goal_report_valuesListRelationFilterSchema: z.ZodType<Prisma.Goal_report_valuesListRelationFilter> = z.object({
  every: z.lazy(() => Goal_report_valuesWhereInputSchema).optional(),
  some: z.lazy(() => Goal_report_valuesWhereInputSchema).optional(),
  none: z.lazy(() => Goal_report_valuesWhereInputSchema).optional()
}).strict();

export const Goal_reportsListRelationFilterSchema: z.ZodType<Prisma.Goal_reportsListRelationFilter> = z.object({
  every: z.lazy(() => Goal_reportsWhereInputSchema).optional(),
  some: z.lazy(() => Goal_reportsWhereInputSchema).optional(),
  none: z.lazy(() => Goal_reportsWhereInputSchema).optional()
}).strict();

export const GoalsListRelationFilterSchema: z.ZodType<Prisma.GoalsListRelationFilter> = z.object({
  every: z.lazy(() => GoalsWhereInputSchema).optional(),
  some: z.lazy(() => GoalsWhereInputSchema).optional(),
  none: z.lazy(() => GoalsWhereInputSchema).optional()
}).strict();

export const Layer_optionsListRelationFilterSchema: z.ZodType<Prisma.Layer_optionsListRelationFilter> = z.object({
  every: z.lazy(() => Layer_optionsWhereInputSchema).optional(),
  some: z.lazy(() => Layer_optionsWhereInputSchema).optional(),
  none: z.lazy(() => Layer_optionsWhereInputSchema).optional()
}).strict();

export const List_valuesListRelationFilterSchema: z.ZodType<Prisma.List_valuesListRelationFilter> = z.object({
  every: z.lazy(() => List_valuesWhereInputSchema).optional(),
  some: z.lazy(() => List_valuesWhereInputSchema).optional(),
  none: z.lazy(() => List_valuesWhereInputSchema).optional()
}).strict();

export const ListsListRelationFilterSchema: z.ZodType<Prisma.ListsListRelationFilter> = z.object({
  every: z.lazy(() => ListsWhereInputSchema).optional(),
  some: z.lazy(() => ListsWhereInputSchema).optional(),
  none: z.lazy(() => ListsWhereInputSchema).optional()
}).strict();

export const Observation_sourcesListRelationFilterSchema: z.ZodType<Prisma.Observation_sourcesListRelationFilter> = z.object({
  every: z.lazy(() => Observation_sourcesWhereInputSchema).optional(),
  some: z.lazy(() => Observation_sourcesWhereInputSchema).optional(),
  none: z.lazy(() => Observation_sourcesWhereInputSchema).optional()
}).strict();

export const ObservationsListRelationFilterSchema: z.ZodType<Prisma.ObservationsListRelationFilter> = z.object({
  every: z.lazy(() => ObservationsWhereInputSchema).optional(),
  some: z.lazy(() => ObservationsWhereInputSchema).optional(),
  none: z.lazy(() => ObservationsWhereInputSchema).optional()
}).strict();

export const PersonsListRelationFilterSchema: z.ZodType<Prisma.PersonsListRelationFilter> = z.object({
  every: z.lazy(() => PersonsWhereInputSchema).optional(),
  some: z.lazy(() => PersonsWhereInputSchema).optional(),
  none: z.lazy(() => PersonsWhereInputSchema).optional()
}).strict();

export const Place_levelsListRelationFilterSchema: z.ZodType<Prisma.Place_levelsListRelationFilter> = z.object({
  every: z.lazy(() => Place_levelsWhereInputSchema).optional(),
  some: z.lazy(() => Place_levelsWhereInputSchema).optional(),
  none: z.lazy(() => Place_levelsWhereInputSchema).optional()
}).strict();

export const PlacesListRelationFilterSchema: z.ZodType<Prisma.PlacesListRelationFilter> = z.object({
  every: z.lazy(() => PlacesWhereInputSchema).optional(),
  some: z.lazy(() => PlacesWhereInputSchema).optional(),
  none: z.lazy(() => PlacesWhereInputSchema).optional()
}).strict();

export const Project_reportsListRelationFilterSchema: z.ZodType<Prisma.Project_reportsListRelationFilter> = z.object({
  every: z.lazy(() => Project_reportsWhereInputSchema).optional(),
  some: z.lazy(() => Project_reportsWhereInputSchema).optional(),
  none: z.lazy(() => Project_reportsWhereInputSchema).optional()
}).strict();

export const Project_usersListRelationFilterSchema: z.ZodType<Prisma.Project_usersListRelationFilter> = z.object({
  every: z.lazy(() => Project_usersWhereInputSchema).optional(),
  some: z.lazy(() => Project_usersWhereInputSchema).optional(),
  none: z.lazy(() => Project_usersWhereInputSchema).optional()
}).strict();

export const ProjectsListRelationFilterSchema: z.ZodType<Prisma.ProjectsListRelationFilter> = z.object({
  every: z.lazy(() => ProjectsWhereInputSchema).optional(),
  some: z.lazy(() => ProjectsWhereInputSchema).optional(),
  none: z.lazy(() => ProjectsWhereInputSchema).optional()
}).strict();

export const Subproject_reportsListRelationFilterSchema: z.ZodType<Prisma.Subproject_reportsListRelationFilter> = z.object({
  every: z.lazy(() => Subproject_reportsWhereInputSchema).optional(),
  some: z.lazy(() => Subproject_reportsWhereInputSchema).optional(),
  none: z.lazy(() => Subproject_reportsWhereInputSchema).optional()
}).strict();

export const Subproject_taxaListRelationFilterSchema: z.ZodType<Prisma.Subproject_taxaListRelationFilter> = z.object({
  every: z.lazy(() => Subproject_taxaWhereInputSchema).optional(),
  some: z.lazy(() => Subproject_taxaWhereInputSchema).optional(),
  none: z.lazy(() => Subproject_taxaWhereInputSchema).optional()
}).strict();

export const Subproject_usersListRelationFilterSchema: z.ZodType<Prisma.Subproject_usersListRelationFilter> = z.object({
  every: z.lazy(() => Subproject_usersWhereInputSchema).optional(),
  some: z.lazy(() => Subproject_usersWhereInputSchema).optional(),
  none: z.lazy(() => Subproject_usersWhereInputSchema).optional()
}).strict();

export const SubprojectsListRelationFilterSchema: z.ZodType<Prisma.SubprojectsListRelationFilter> = z.object({
  every: z.lazy(() => SubprojectsWhereInputSchema).optional(),
  some: z.lazy(() => SubprojectsWhereInputSchema).optional(),
  none: z.lazy(() => SubprojectsWhereInputSchema).optional()
}).strict();

export const TaxaListRelationFilterSchema: z.ZodType<Prisma.TaxaListRelationFilter> = z.object({
  every: z.lazy(() => TaxaWhereInputSchema).optional(),
  some: z.lazy(() => TaxaWhereInputSchema).optional(),
  none: z.lazy(() => TaxaWhereInputSchema).optional()
}).strict();

export const TaxonomiesListRelationFilterSchema: z.ZodType<Prisma.TaxonomiesListRelationFilter> = z.object({
  every: z.lazy(() => TaxonomiesWhereInputSchema).optional(),
  some: z.lazy(() => TaxonomiesWhereInputSchema).optional(),
  none: z.lazy(() => TaxonomiesWhereInputSchema).optional()
}).strict();

export const Tile_layersListRelationFilterSchema: z.ZodType<Prisma.Tile_layersListRelationFilter> = z.object({
  every: z.lazy(() => Tile_layersWhereInputSchema).optional(),
  some: z.lazy(() => Tile_layersWhereInputSchema).optional(),
  none: z.lazy(() => Tile_layersWhereInputSchema).optional()
}).strict();

export const Ui_optionsListRelationFilterSchema: z.ZodType<Prisma.Ui_optionsListRelationFilter> = z.object({
  every: z.lazy(() => Ui_optionsWhereInputSchema).optional(),
  some: z.lazy(() => Ui_optionsWhereInputSchema).optional(),
  none: z.lazy(() => Ui_optionsWhereInputSchema).optional()
}).strict();

export const UnitsListRelationFilterSchema: z.ZodType<Prisma.UnitsListRelationFilter> = z.object({
  every: z.lazy(() => UnitsWhereInputSchema).optional(),
  some: z.lazy(() => UnitsWhereInputSchema).optional(),
  none: z.lazy(() => UnitsWhereInputSchema).optional()
}).strict();

export const User_messagesListRelationFilterSchema: z.ZodType<Prisma.User_messagesListRelationFilter> = z.object({
  every: z.lazy(() => User_messagesWhereInputSchema).optional(),
  some: z.lazy(() => User_messagesWhereInputSchema).optional(),
  none: z.lazy(() => User_messagesWhereInputSchema).optional()
}).strict();

export const Vector_layer_displaysListRelationFilterSchema: z.ZodType<Prisma.Vector_layer_displaysListRelationFilter> = z.object({
  every: z.lazy(() => Vector_layer_displaysWhereInputSchema).optional(),
  some: z.lazy(() => Vector_layer_displaysWhereInputSchema).optional(),
  none: z.lazy(() => Vector_layer_displaysWhereInputSchema).optional()
}).strict();

export const Vector_layer_geomsListRelationFilterSchema: z.ZodType<Prisma.Vector_layer_geomsListRelationFilter> = z.object({
  every: z.lazy(() => Vector_layer_geomsWhereInputSchema).optional(),
  some: z.lazy(() => Vector_layer_geomsWhereInputSchema).optional(),
  none: z.lazy(() => Vector_layer_geomsWhereInputSchema).optional()
}).strict();

export const Vector_layersListRelationFilterSchema: z.ZodType<Prisma.Vector_layersListRelationFilter> = z.object({
  every: z.lazy(() => Vector_layersWhereInputSchema).optional(),
  some: z.lazy(() => Vector_layersWhereInputSchema).optional(),
  none: z.lazy(() => Vector_layersWhereInputSchema).optional()
}).strict();

export const Chart_subjectsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChartsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ChartsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.FieldsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_report_valuesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_reportsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Goal_reportsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.GoalsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Layer_optionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Layer_optionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const List_valuesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.List_valuesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ListsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Observation_sourcesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Observation_sourcesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ObservationsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ObservationsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PersonsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Place_levelsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.PlacesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Project_reportsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Project_usersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.ProjectsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_reportsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_taxaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Subproject_taxaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_usersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Subproject_usersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.SubprojectsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaxaOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.TaxonomiesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Tile_layersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Tile_layersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Ui_optionsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UnitsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.UnitsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesOrderByRelationAggregateInputSchema: z.ZodType<Prisma.User_messagesOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_displaysOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_geomsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layersOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Vector_layersOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsCountOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsCountOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsMaxOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsMinOrderByAggregateInputSchema: z.ZodType<Prisma.AccountsMinOrderByAggregateInput> = z.object({
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  period_start: z.lazy(() => SortOrderSchema).optional(),
  period_end: z.lazy(() => SortOrderSchema).optional(),
  projects_label_by: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UuidWithAggregatesFilterSchema: z.ZodType<Prisma.UuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const UuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.UuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const StringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.StringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const DateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.DateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const Enumchart_subject_tableNullableFilterSchema: z.ZodType<Prisma.Enumchart_subject_tableNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const IntNullableFilterSchema: z.ZodType<Prisma.IntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const JsonNullableFilterSchema: z.ZodType<Prisma.JsonNullableFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const Enumchart_subject_value_sourceNullableFilterSchema: z.ZodType<Prisma.Enumchart_subject_value_sourceNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Enumchart_subject_typeNullableFilterSchema: z.ZodType<Prisma.Enumchart_subject_typeNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const BoolNullableFilterSchema: z.ZodType<Prisma.BoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const AccountsRelationFilterSchema: z.ZodType<Prisma.AccountsRelationFilter> = z.object({
  is: z.lazy(() => AccountsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => AccountsWhereInputSchema).optional().nullable()
}).strict();

export const ChartsRelationFilterSchema: z.ZodType<Prisma.ChartsRelationFilter> = z.object({
  is: z.lazy(() => ChartsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ChartsWhereInputSchema).optional().nullable()
}).strict();

export const UnitsRelationFilterSchema: z.ZodType<Prisma.UnitsRelationFilter> = z.object({
  is: z.lazy(() => UnitsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => UnitsWhereInputSchema).optional().nullable()
}).strict();

export const Chart_subjectsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsCountOrderByAggregateInput> = z.object({
  chart_subject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  table_level: z.lazy(() => SortOrderSchema).optional(),
  table_filter: z.lazy(() => SortOrderSchema).optional(),
  value_source: z.lazy(() => SortOrderSchema).optional(),
  value_field: z.lazy(() => SortOrderSchema).optional(),
  value_unit: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_graded: z.lazy(() => SortOrderSchema).optional(),
  connect_nulls: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Chart_subjectsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsAvgOrderByAggregateInput> = z.object({
  table_level: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Chart_subjectsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsMaxOrderByAggregateInput> = z.object({
  chart_subject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  table_level: z.lazy(() => SortOrderSchema).optional(),
  value_source: z.lazy(() => SortOrderSchema).optional(),
  value_field: z.lazy(() => SortOrderSchema).optional(),
  value_unit: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_graded: z.lazy(() => SortOrderSchema).optional(),
  connect_nulls: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Chart_subjectsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsMinOrderByAggregateInput> = z.object({
  chart_subject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  table_level: z.lazy(() => SortOrderSchema).optional(),
  value_source: z.lazy(() => SortOrderSchema).optional(),
  value_field: z.lazy(() => SortOrderSchema).optional(),
  value_unit: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_graded: z.lazy(() => SortOrderSchema).optional(),
  connect_nulls: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Chart_subjectsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Chart_subjectsSumOrderByAggregateInput> = z.object({
  table_level: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumchart_subject_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumchart_subject_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NestedEnumchart_subject_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema).optional()
}).strict();

export const IntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.IntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const JsonNullableWithAggregatesFilterSchema: z.ZodType<Prisma.JsonNullableWithAggregatesFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedJsonNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedJsonNullableFilterSchema).optional()
}).strict();

export const Enumchart_subject_value_sourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumchart_subject_value_sourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NestedEnumchart_subject_value_sourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema).optional()
}).strict();

export const Enumchart_subject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumchart_subject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NestedEnumchart_subject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema).optional()
}).strict();

export const BoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.BoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const Enumchart_typeNullableFilterSchema: z.ZodType<Prisma.Enumchart_typeNullableFilter> = z.object({
  equals: z.lazy(() => chart_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NestedEnumchart_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const PlacesRelationFilterSchema: z.ZodType<Prisma.PlacesRelationFilter> = z.object({
  is: z.lazy(() => PlacesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => PlacesWhereInputSchema).optional().nullable()
}).strict();

export const ProjectsRelationFilterSchema: z.ZodType<Prisma.ProjectsRelationFilter> = z.object({
  is: z.lazy(() => ProjectsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ProjectsWhereInputSchema).optional().nullable()
}).strict();

export const SubprojectsRelationFilterSchema: z.ZodType<Prisma.SubprojectsRelationFilter> = z.object({
  is: z.lazy(() => SubprojectsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => SubprojectsWhereInputSchema).optional().nullable()
}).strict();

export const ChartsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ChartsCountOrderByAggregateInput> = z.object({
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  years_current: z.lazy(() => SortOrderSchema).optional(),
  years_previous: z.lazy(() => SortOrderSchema).optional(),
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional(),
  chart_type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  subjects_stacked: z.lazy(() => SortOrderSchema).optional(),
  subjects_single: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChartsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.ChartsAvgOrderByAggregateInput> = z.object({
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChartsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ChartsMaxOrderByAggregateInput> = z.object({
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  years_current: z.lazy(() => SortOrderSchema).optional(),
  years_previous: z.lazy(() => SortOrderSchema).optional(),
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional(),
  chart_type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  subjects_stacked: z.lazy(() => SortOrderSchema).optional(),
  subjects_single: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChartsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ChartsMinOrderByAggregateInput> = z.object({
  chart_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  years_current: z.lazy(() => SortOrderSchema).optional(),
  years_previous: z.lazy(() => SortOrderSchema).optional(),
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional(),
  chart_type: z.lazy(() => SortOrderSchema).optional(),
  title: z.lazy(() => SortOrderSchema).optional(),
  subjects_stacked: z.lazy(() => SortOrderSchema).optional(),
  subjects_single: z.lazy(() => SortOrderSchema).optional(),
  percent: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ChartsSumOrderByAggregateInputSchema: z.ZodType<Prisma.ChartsSumOrderByAggregateInput> = z.object({
  years_specific: z.lazy(() => SortOrderSchema).optional(),
  years_last_x: z.lazy(() => SortOrderSchema).optional(),
  years_since: z.lazy(() => SortOrderSchema).optional(),
  years_until: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumchart_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumchart_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NestedEnumchart_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_typeNullableFilterSchema).optional()
}).strict();

export const Widgets_for_fieldsListRelationFilterSchema: z.ZodType<Prisma.Widgets_for_fieldsListRelationFilter> = z.object({
  every: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional(),
  some: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional(),
  none: z.lazy(() => Widgets_for_fieldsWhereInputSchema).optional()
}).strict();

export const Widgets_for_fieldsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesCountOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesMaxOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesMinOrderByAggregateInput> = z.object({
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Field_typesSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Field_typesRelationFilterSchema: z.ZodType<Prisma.Field_typesRelationFilter> = z.object({
  is: z.lazy(() => Field_typesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Field_typesWhereInputSchema).optional().nullable()
}).strict();

export const ListsRelationFilterSchema: z.ZodType<Prisma.ListsRelationFilter> = z.object({
  is: z.lazy(() => ListsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => ListsWhereInputSchema).optional().nullable()
}).strict();

export const Widget_typesRelationFilterSchema: z.ZodType<Prisma.Widget_typesRelationFilter> = z.object({
  is: z.lazy(() => Widget_typesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Widget_typesWhereInputSchema).optional().nullable()
}).strict();

export const FieldsCountOrderByAggregateInputSchema: z.ZodType<Prisma.FieldsCountOrderByAggregateInput> = z.object({
  field_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  field_label: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  preset: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.FieldsAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.FieldsMaxOrderByAggregateInput> = z.object({
  field_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  field_label: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  preset: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldsMinOrderByAggregateInputSchema: z.ZodType<Prisma.FieldsMinOrderByAggregateInput> = z.object({
  field_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  table_name: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  field_label: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  preset: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FieldsSumOrderByAggregateInputSchema: z.ZodType<Prisma.FieldsSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumgbif_tableNullableFilterSchema: z.ZodType<Prisma.Enumgbif_tableNullableFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCountOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  filters: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsAvgOrderByAggregateInput> = z.object({
  inserted_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsMaxOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsMinOrderByAggregateInput> = z.object({
  gbif_occurrence_download_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_table: z.lazy(() => SortOrderSchema).optional(),
  created_time: z.lazy(() => SortOrderSchema).optional(),
  download_key: z.lazy(() => SortOrderSchema).optional(),
  error: z.lazy(() => SortOrderSchema).optional(),
  inserted_time: z.lazy(() => SortOrderSchema).optional(),
  inserted_count: z.lazy(() => SortOrderSchema).optional(),
  attribution: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsSumOrderByAggregateInput> = z.object({
  inserted_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumgbif_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumgbif_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional()
}).strict();

export const Gbif_occurrencesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesCountOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesMaxOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_occurrencesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_occurrencesMinOrderByAggregateInput> = z.object({
  gbif_occurrence_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaCountOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaCountOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  gbif_data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaMaxOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Gbif_taxaMinOrderByAggregateInputSchema: z.ZodType<Prisma.Gbif_taxaMinOrderByAggregateInput> = z.object({
  gbif_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableFilterSchema: z.ZodType<Prisma.FloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsRelationFilterSchema: z.ZodType<Prisma.Goal_reportsRelationFilter> = z.object({
  is: z.lazy(() => Goal_reportsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Goal_reportsWhereInputSchema).optional().nullable()
}).strict();

export const Goal_report_valuesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesCountOrderByAggregateInput> = z.object({
  goal_report_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional(),
  value_text: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_report_valuesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesAvgOrderByAggregateInput> = z.object({
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_report_valuesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesMaxOrderByAggregateInput> = z.object({
  goal_report_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional(),
  value_text: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_report_valuesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesMinOrderByAggregateInput> = z.object({
  goal_report_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional(),
  value_text: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_report_valuesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_report_valuesSumOrderByAggregateInput> = z.object({
  value_integer: z.lazy(() => SortOrderSchema).optional(),
  value_numeric: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const FloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.FloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const GoalsRelationFilterSchema: z.ZodType<Prisma.GoalsRelationFilter> = z.object({
  is: z.lazy(() => GoalsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => GoalsWhereInputSchema).optional().nullable()
}).strict();

export const Goal_reportsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_reportsCountOrderByAggregateInput> = z.object({
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_reportsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_reportsMaxOrderByAggregateInput> = z.object({
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Goal_reportsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Goal_reportsMinOrderByAggregateInput> = z.object({
  goal_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsCountOrderByAggregateInputSchema: z.ZodType<Prisma.GoalsCountOrderByAggregateInput> = z.object({
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.GoalsAvgOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.GoalsMaxOrderByAggregateInput> = z.object({
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsMinOrderByAggregateInputSchema: z.ZodType<Prisma.GoalsMinOrderByAggregateInput> = z.object({
  goal_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const GoalsSumOrderByAggregateInputSchema: z.ZodType<Prisma.GoalsSumOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringFilterSchema: z.ZodType<Prisma.StringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const Enumlayer_options_field_enumNullableFilterSchema: z.ZodType<Prisma.Enumlayer_options_field_enumNullableFilter> = z.object({
  equals: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  in: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Tile_layersRelationFilterSchema: z.ZodType<Prisma.Tile_layersRelationFilter> = z.object({
  is: z.lazy(() => Tile_layersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Tile_layersWhereInputSchema).optional().nullable()
}).strict();

export const Vector_layersRelationFilterSchema: z.ZodType<Prisma.Vector_layersRelationFilter> = z.object({
  is: z.lazy(() => Vector_layersWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Vector_layersWhereInputSchema).optional().nullable()
}).strict();

export const Layer_optionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Layer_optionsCountOrderByAggregateInput> = z.object({
  layer_option_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  queryable: z.lazy(() => SortOrderSchema).optional(),
  legend_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Layer_optionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Layer_optionsMaxOrderByAggregateInput> = z.object({
  layer_option_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  queryable: z.lazy(() => SortOrderSchema).optional(),
  legend_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Layer_optionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Layer_optionsMinOrderByAggregateInput> = z.object({
  layer_option_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  field: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  queryable: z.lazy(() => SortOrderSchema).optional(),
  legend_url: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const StringWithAggregatesFilterSchema: z.ZodType<Prisma.StringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  mode: z.lazy(() => QueryModeSchema).optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const Enumlayer_options_field_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumlayer_options_field_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  in: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NestedEnumlayer_options_field_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema).optional()
}).strict();

export const List_valuesCountOrderByAggregateInputSchema: z.ZodType<Prisma.List_valuesCountOrderByAggregateInput> = z.object({
  list_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const List_valuesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.List_valuesMaxOrderByAggregateInput> = z.object({
  list_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const List_valuesMinOrderByAggregateInputSchema: z.ZodType<Prisma.List_valuesMinOrderByAggregateInput> = z.object({
  list_value_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  value: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ListsCountOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ListsMaxOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ListsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ListsMinOrderByAggregateInput> = z.object({
  list_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesCountOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesCountOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesMaxOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const MessagesMinOrderByAggregateInputSchema: z.ZodType<Prisma.MessagesMinOrderByAggregateInput> = z.object({
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  message: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Observation_sourcesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Observation_sourcesCountOrderByAggregateInput> = z.object({
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Observation_sourcesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Observation_sourcesMaxOrderByAggregateInput> = z.object({
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Observation_sourcesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Observation_sourcesMinOrderByAggregateInput> = z.object({
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Observation_sourcesRelationFilterSchema: z.ZodType<Prisma.Observation_sourcesRelationFilter> = z.object({
  is: z.lazy(() => Observation_sourcesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Observation_sourcesWhereInputSchema).optional().nullable()
}).strict();

export const ObservationsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ObservationsCountOrderByAggregateInput> = z.object({
  observation_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  observation_data: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  author: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ObservationsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ObservationsMaxOrderByAggregateInput> = z.object({
  observation_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  author: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ObservationsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ObservationsMinOrderByAggregateInput> = z.object({
  observation_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  observation_source_id: z.lazy(() => SortOrderSchema).optional(),
  place_id: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  date: z.lazy(() => SortOrderSchema).optional(),
  author: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsCountOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsCountOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsMaxOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PersonsMinOrderByAggregateInputSchema: z.ZodType<Prisma.PersonsMinOrderByAggregateInput> = z.object({
  person_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsCountOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsMaxOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsMinOrderByAggregateInput> = z.object({
  place_level_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  name_singular: z.lazy(() => SortOrderSchema).optional(),
  name_plural: z.lazy(() => SortOrderSchema).optional(),
  name_short: z.lazy(() => SortOrderSchema).optional(),
  reports: z.lazy(() => SortOrderSchema).optional(),
  report_values: z.lazy(() => SortOrderSchema).optional(),
  actions: z.lazy(() => SortOrderSchema).optional(),
  action_values: z.lazy(() => SortOrderSchema).optional(),
  action_reports: z.lazy(() => SortOrderSchema).optional(),
  checks: z.lazy(() => SortOrderSchema).optional(),
  check_values: z.lazy(() => SortOrderSchema).optional(),
  check_taxa: z.lazy(() => SortOrderSchema).optional(),
  observations: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Place_levelsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Place_levelsSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesCountOrderByAggregateInputSchema: z.ZodType<Prisma.PlacesCountOrderByAggregateInput> = z.object({
  place_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  parent_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  bbox: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.PlacesAvgOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.PlacesMaxOrderByAggregateInput> = z.object({
  place_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  parent_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesMinOrderByAggregateInputSchema: z.ZodType<Prisma.PlacesMinOrderByAggregateInput> = z.object({
  place_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  parent_id: z.lazy(() => SortOrderSchema).optional(),
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const PlacesSumOrderByAggregateInputSchema: z.ZodType<Prisma.PlacesSumOrderByAggregateInput> = z.object({
  level: z.lazy(() => SortOrderSchema).optional(),
  since: z.lazy(() => SortOrderSchema).optional(),
  until: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Project_reportsCountOrderByAggregateInput> = z.object({
  project_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Project_reportsAvgOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Project_reportsMaxOrderByAggregateInput> = z.object({
  project_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Project_reportsMinOrderByAggregateInput> = z.object({
  project_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_reportsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Project_reportsSumOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersCountOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersCountOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersMaxOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Project_usersMinOrderByAggregateInputSchema: z.ZodType<Prisma.Project_usersMinOrderByAggregateInput> = z.object({
  project_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumproject_typeNullableFilterSchema: z.ZodType<Prisma.Enumproject_typeNullableFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const ProjectsCountOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsCountOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  places_order_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsMaxOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const ProjectsMinOrderByAggregateInputSchema: z.ZodType<Prisma.ProjectsMinOrderByAggregateInput> = z.object({
  project_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_singular: z.lazy(() => SortOrderSchema).optional(),
  subproject_name_plural: z.lazy(() => SortOrderSchema).optional(),
  subproject_order_by: z.lazy(() => SortOrderSchema).optional(),
  places_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_label_by: z.lazy(() => SortOrderSchema).optional(),
  persons_order_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_label_by: z.lazy(() => SortOrderSchema).optional(),
  goal_reports_order_by: z.lazy(() => SortOrderSchema).optional(),
  values_on_multiple_levels: z.lazy(() => SortOrderSchema).optional(),
  multiple_action_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  multiple_check_values_on_same_level: z.lazy(() => SortOrderSchema).optional(),
  files_offline: z.lazy(() => SortOrderSchema).optional(),
  files_active_projects: z.lazy(() => SortOrderSchema).optional(),
  files_active_subprojects: z.lazy(() => SortOrderSchema).optional(),
  files_active_places: z.lazy(() => SortOrderSchema).optional(),
  files_active_actions: z.lazy(() => SortOrderSchema).optional(),
  files_active_checks: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumproject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumproject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional()
}).strict();

export const Subproject_reportsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsCountOrderByAggregateInput> = z.object({
  subproject_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_reportsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsAvgOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_reportsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsMaxOrderByAggregateInput> = z.object({
  subproject_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_reportsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsMinOrderByAggregateInput> = z.object({
  subproject_report_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  year: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_reportsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_reportsSumOrderByAggregateInput> = z.object({
  year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaRelationFilterSchema: z.ZodType<Prisma.TaxaRelationFilter> = z.object({
  is: z.lazy(() => TaxaWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaxaWhereInputSchema).optional().nullable()
}).strict();

export const Subproject_taxaCountOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_taxaCountOrderByAggregateInput> = z.object({
  subproject_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_taxaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_taxaMaxOrderByAggregateInput> = z.object({
  subproject_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_taxaMinOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_taxaMinOrderByAggregateInput> = z.object({
  subproject_taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_usersCountOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_usersCountOrderByAggregateInput> = z.object({
  subproject_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_usersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_usersMaxOrderByAggregateInput> = z.object({
  subproject_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Subproject_usersMinOrderByAggregateInputSchema: z.ZodType<Prisma.Subproject_usersMinOrderByAggregateInput> = z.object({
  subproject_user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  role: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsCountOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsCountOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsAvgOrderByAggregateInput> = z.object({
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsMaxOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsMinOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsMinOrderByAggregateInput> = z.object({
  subproject_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const SubprojectsSumOrderByAggregateInputSchema: z.ZodType<Prisma.SubprojectsSumOrderByAggregateInput> = z.object({
  start_year: z.lazy(() => SortOrderSchema).optional(),
  end_year: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesRelationFilterSchema: z.ZodType<Prisma.TaxonomiesRelationFilter> = z.object({
  is: z.lazy(() => TaxonomiesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => TaxonomiesWhereInputSchema).optional().nullable()
}).strict();

export const TaxaCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaCountOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaMaxOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxaMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaxaMinOrderByAggregateInput> = z.object({
  taxon_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  id_in_source: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtaxonomy_typeNullableFilterSchema: z.ZodType<Prisma.Enumtaxonomy_typeNullableFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesCountOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesCountOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  data: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesMaxOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const TaxonomiesMinOrderByAggregateInputSchema: z.ZodType<Prisma.TaxonomiesMinOrderByAggregateInput> = z.object({
  taxonomy_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  url: z.lazy(() => SortOrderSchema).optional(),
  obsolete: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtaxonomy_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumtaxonomy_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional()
}).strict();

export const Enumtile_layer_type_enumNullableFilterSchema: z.ZodType<Prisma.Enumtile_layer_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Tile_layersCountOrderByAggregateInputSchema: z.ZodType<Prisma.Tile_layersCountOrderByAggregateInput> = z.object({
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  wmts_url_template: z.lazy(() => SortOrderSchema).optional(),
  wmts_subdomains: z.lazy(() => SortOrderSchema).optional(),
  wms_base_url: z.lazy(() => SortOrderSchema).optional(),
  wms_format: z.lazy(() => SortOrderSchema).optional(),
  wms_layer: z.lazy(() => SortOrderSchema).optional(),
  wms_parameters: z.lazy(() => SortOrderSchema).optional(),
  wms_styles: z.lazy(() => SortOrderSchema).optional(),
  wms_transparent: z.lazy(() => SortOrderSchema).optional(),
  wms_version: z.lazy(() => SortOrderSchema).optional(),
  wms_info_format: z.lazy(() => SortOrderSchema).optional(),
  wms_legend: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  grayscale: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional(),
  local_data_bounds: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Tile_layersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Tile_layersAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Tile_layersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Tile_layersMaxOrderByAggregateInput> = z.object({
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  wmts_url_template: z.lazy(() => SortOrderSchema).optional(),
  wms_base_url: z.lazy(() => SortOrderSchema).optional(),
  wms_transparent: z.lazy(() => SortOrderSchema).optional(),
  wms_version: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  grayscale: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Tile_layersMinOrderByAggregateInputSchema: z.ZodType<Prisma.Tile_layersMinOrderByAggregateInput> = z.object({
  tile_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  wmts_url_template: z.lazy(() => SortOrderSchema).optional(),
  wms_base_url: z.lazy(() => SortOrderSchema).optional(),
  wms_transparent: z.lazy(() => SortOrderSchema).optional(),
  wms_version: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  grayscale: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Tile_layersSumOrderByAggregateInputSchema: z.ZodType<Prisma.Tile_layersSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  local_data_size: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumtile_layer_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumtile_layer_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NestedEnumtile_layer_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema).optional()
}).strict();

export const Ui_optionsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  tabs: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  map_bounds: z.lazy(() => SortOrderSchema).optional(),
  local_map_show: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Ui_optionsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Ui_optionsMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  designing: z.lazy(() => SortOrderSchema).optional(),
  breadcrumbs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  navs_overflowing: z.lazy(() => SortOrderSchema).optional(),
  show_map: z.lazy(() => SortOrderSchema).optional(),
  tile_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_sorter: z.lazy(() => SortOrderSchema).optional(),
  editing_place_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_check_geometry: z.lazy(() => SortOrderSchema).optional(),
  editing_action_geometry: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumunit_typeNullableFilterSchema: z.ZodType<Prisma.Enumunit_typeNullableFilter> = z.object({
  equals: z.lazy(() => unit_typeSchema).optional().nullable(),
  in: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NestedEnumunit_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const UnitsCountOrderByAggregateInputSchema: z.ZodType<Prisma.UnitsCountOrderByAggregateInput> = z.object({
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_place_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_goal_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_subproject_taxa: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_taxa: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  summable: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UnitsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.UnitsAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UnitsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UnitsMaxOrderByAggregateInput> = z.object({
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_place_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_goal_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_subproject_taxa: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_taxa: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  summable: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UnitsMinOrderByAggregateInputSchema: z.ZodType<Prisma.UnitsMinOrderByAggregateInput> = z.object({
  unit_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_action_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_place_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_goal_report_values: z.lazy(() => SortOrderSchema).optional(),
  use_for_subproject_taxa: z.lazy(() => SortOrderSchema).optional(),
  use_for_check_taxa: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  summable: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  list_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UnitsSumOrderByAggregateInputSchema: z.ZodType<Prisma.UnitsSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumunit_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumunit_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => unit_typeSchema).optional().nullable(),
  in: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NestedEnumunit_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumunit_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumunit_typeNullableFilterSchema).optional()
}).strict();

export const MessagesRelationFilterSchema: z.ZodType<Prisma.MessagesRelationFilter> = z.object({
  is: z.lazy(() => MessagesWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => MessagesWhereInputSchema).optional().nullable()
}).strict();

export const User_messagesCountOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesCountOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesMaxOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const User_messagesMinOrderByAggregateInputSchema: z.ZodType<Prisma.User_messagesMinOrderByAggregateInput> = z.object({
  user_message_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  user_id: z.lazy(() => SortOrderSchema).optional(),
  message_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  read: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const AccountsListRelationFilterSchema: z.ZodType<Prisma.AccountsListRelationFilter> = z.object({
  every: z.lazy(() => AccountsWhereInputSchema).optional(),
  some: z.lazy(() => AccountsWhereInputSchema).optional(),
  none: z.lazy(() => AccountsWhereInputSchema).optional()
}).strict();

export const Ui_optionsRelationFilterSchema: z.ZodType<Prisma.Ui_optionsRelationFilter> = z.object({
  is: z.lazy(() => Ui_optionsWhereInputSchema).optional().nullable(),
  isNot: z.lazy(() => Ui_optionsWhereInputSchema).optional().nullable()
}).strict();

export const AccountsOrderByRelationAggregateInputSchema: z.ZodType<Prisma.AccountsOrderByRelationAggregateInput> = z.object({
  _count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCountOrderByAggregateInputSchema: z.ZodType<Prisma.UsersCountOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMaxOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersMinOrderByAggregateInputSchema: z.ZodType<Prisma.UsersMinOrderByAggregateInput> = z.object({
  user_id: z.lazy(() => SortOrderSchema).optional(),
  email: z.lazy(() => SortOrderSchema).optional(),
  auth_id: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enummarker_type_enumNullableFilterSchema: z.ZodType<Prisma.Enummarker_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  in: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Enumline_cap_enumNullableFilterSchema: z.ZodType<Prisma.Enumline_cap_enumNullableFilter> = z.object({
  equals: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  in: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Enumfill_rule_enumNullableFilterSchema: z.ZodType<Prisma.Enumfill_rule_enumNullableFilter> = z.object({
  equals: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  in: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysCountOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysCountOrderByAggregateInput> = z.object({
  vector_layer_display_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  display_property_value: z.lazy(() => SortOrderSchema).optional(),
  marker_type: z.lazy(() => SortOrderSchema).optional(),
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_symbol: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  line_cap: z.lazy(() => SortOrderSchema).optional(),
  line_join: z.lazy(() => SortOrderSchema).optional(),
  dash_array: z.lazy(() => SortOrderSchema).optional(),
  dash_offset: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_color: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_rule: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_displaysAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysAvgOrderByAggregateInput> = z.object({
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_displaysMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysMaxOrderByAggregateInput> = z.object({
  vector_layer_display_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  display_property_value: z.lazy(() => SortOrderSchema).optional(),
  marker_type: z.lazy(() => SortOrderSchema).optional(),
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_symbol: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  line_cap: z.lazy(() => SortOrderSchema).optional(),
  line_join: z.lazy(() => SortOrderSchema).optional(),
  dash_array: z.lazy(() => SortOrderSchema).optional(),
  dash_offset: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_color: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_rule: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_displaysMinOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysMinOrderByAggregateInput> = z.object({
  vector_layer_display_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  display_property_value: z.lazy(() => SortOrderSchema).optional(),
  marker_type: z.lazy(() => SortOrderSchema).optional(),
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_symbol: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  stroke: z.lazy(() => SortOrderSchema).optional(),
  color: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  line_cap: z.lazy(() => SortOrderSchema).optional(),
  line_join: z.lazy(() => SortOrderSchema).optional(),
  dash_array: z.lazy(() => SortOrderSchema).optional(),
  dash_offset: z.lazy(() => SortOrderSchema).optional(),
  fill: z.lazy(() => SortOrderSchema).optional(),
  fill_color: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_rule: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_displaysSumOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_displaysSumOrderByAggregateInput> = z.object({
  circle_marker_radius: z.lazy(() => SortOrderSchema).optional(),
  marker_size: z.lazy(() => SortOrderSchema).optional(),
  weight: z.lazy(() => SortOrderSchema).optional(),
  opacity_percent: z.lazy(() => SortOrderSchema).optional(),
  fill_opacity_percent: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enummarker_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enummarker_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  in: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NestedEnummarker_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema).optional()
}).strict();

export const Enumline_cap_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumline_cap_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  in: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NestedEnumline_cap_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema).optional()
}).strict();

export const Enumfill_rule_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumfill_rule_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  in: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NestedEnumfill_rule_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema).optional()
}).strict();

export const Vector_layer_geomsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsCountOrderByAggregateInput> = z.object({
  vector_layer_geom_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  geometry: z.lazy(() => SortOrderSchema).optional(),
  properties: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_geomsAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsAvgOrderByAggregateInput> = z.object({
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_geomsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsMaxOrderByAggregateInput> = z.object({
  vector_layer_geom_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_geomsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsMinOrderByAggregateInput> = z.object({
  vector_layer_geom_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layer_geomsSumOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layer_geomsSumOrderByAggregateInput> = z.object({
  bbox_sw_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_sw_lat: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lng: z.lazy(() => SortOrderSchema).optional(),
  bbox_ne_lat: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumvector_layer_type_enumNullableFilterSchema: z.ZodType<Prisma.Enumvector_layer_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const Vector_layersCountOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layersCountOrderByAggregateInput> = z.object({
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  display_by_property_field: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  wfs_url: z.lazy(() => SortOrderSchema).optional(),
  wfs_layer: z.lazy(() => SortOrderSchema).optional(),
  wfs_version: z.lazy(() => SortOrderSchema).optional(),
  wfs_output_format: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layersAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layersAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layersMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layersMaxOrderByAggregateInput> = z.object({
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  display_by_property_field: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  wfs_url: z.lazy(() => SortOrderSchema).optional(),
  wfs_version: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layersMinOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layersMinOrderByAggregateInput> = z.object({
  vector_layer_id: z.lazy(() => SortOrderSchema).optional(),
  account_id: z.lazy(() => SortOrderSchema).optional(),
  project_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  type: z.lazy(() => SortOrderSchema).optional(),
  display_by_property_field: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  active: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  wfs_url: z.lazy(() => SortOrderSchema).optional(),
  wfs_version: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Vector_layersSumOrderByAggregateInputSchema: z.ZodType<Prisma.Vector_layersSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional(),
  max_zoom: z.lazy(() => SortOrderSchema).optional(),
  min_zoom: z.lazy(() => SortOrderSchema).optional(),
  max_features: z.lazy(() => SortOrderSchema).optional(),
  feature_count: z.lazy(() => SortOrderSchema).optional(),
  point_count: z.lazy(() => SortOrderSchema).optional(),
  line_count: z.lazy(() => SortOrderSchema).optional(),
  polygon_count: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Enumvector_layer_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.Enumvector_layer_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NestedEnumvector_layer_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema).optional()
}).strict();

export const Widget_typesCountOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesCountOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesAvgOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesAvgOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesMaxOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesMinOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesMinOrderByAggregateInput> = z.object({
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  name: z.lazy(() => SortOrderSchema).optional(),
  needs_list: z.lazy(() => SortOrderSchema).optional(),
  sort: z.lazy(() => SortOrderSchema).optional(),
  comment: z.lazy(() => SortOrderSchema).optional(),
  label_replace_by_generated_column: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widget_typesSumOrderByAggregateInputSchema: z.ZodType<Prisma.Widget_typesSumOrderByAggregateInput> = z.object({
  sort: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widgets_for_fieldsCountOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCountOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widgets_for_fieldsMaxOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsMaxOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const Widgets_for_fieldsMinOrderByAggregateInputSchema: z.ZodType<Prisma.Widgets_for_fieldsMinOrderByAggregateInput> = z.object({
  widget_for_field_id: z.lazy(() => SortOrderSchema).optional(),
  field_type_id: z.lazy(() => SortOrderSchema).optional(),
  widget_type_id: z.lazy(() => SortOrderSchema).optional(),
  label: z.lazy(() => SortOrderSchema).optional(),
  deleted: z.lazy(() => SortOrderSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutAccountsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const Chart_subjectsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChartsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsCreateWithoutAccountsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GoalsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsCreateWithoutAccountsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Layer_optionsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const List_valuesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ObservationsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlacesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesCreateWithoutAccountsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxaCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UnitsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsCreateWithoutAccountsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsCreateWithoutAccountsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsCreateWithoutAccountsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesCreateWithoutAccountsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsCreateWithoutAccountsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateNestedManyWithoutAccountsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const StringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.StringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional()
}).strict();

export const NullableStringFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableStringFieldUpdateOperationsInput> = z.object({
  set: z.string().optional().nullable()
}).strict();

export const NullableDateTimeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableDateTimeFieldUpdateOperationsInput> = z.object({
  set: z.coerce.date().optional().nullable()
}).strict();

export const UsersUpdateOneWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutAccountsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutAccountsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutAccountsInputSchema) ]).optional(),
}).strict();

export const Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChartsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsCreateWithoutAccountsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Goal_reportsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GoalsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.GoalsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsCreateWithoutAccountsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GoalsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => GoalsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GoalsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => GoalsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GoalsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => GoalsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Layer_optionsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.List_valuesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => List_valuesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => List_valuesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ListsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlacesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesCreateWithoutAccountsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_reportsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxaUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Tile_layersUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Tile_layersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UnitsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsCreateWithoutAccountsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layersUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsCreateWithoutAccountsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsCreateWithoutAccountsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GoalsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => GoalsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GoalsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => GoalsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GoalsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => GoalsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateWithoutAccountsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => List_valuesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => List_valuesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsCreateWithoutAccountsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesCreateWithoutAccountsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => ProjectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ProjectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ProjectsWhereUniqueInputSchema),z.lazy(() => ProjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => ProjectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Tile_layersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Tile_layersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Ui_optionsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Ui_optionsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Ui_optionsWhereUniqueInputSchema),z.lazy(() => Ui_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsCreateWithoutAccountsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateWithoutAccountsInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateManyWithoutAccountsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutAccountsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyAccountsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutAccountsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layersUpdateManyWithWhereWithoutAccountsInputSchema),z.lazy(() => Vector_layersUpdateManyWithWhereWithoutAccountsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutChart_subjectsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ChartsCreateNestedOneWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsCreateNestedOneWithoutChart_subjectsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChartsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  connect: z.lazy(() => ChartsWhereUniqueInputSchema).optional()
}).strict();

export const UnitsCreateNestedOneWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsCreateNestedOneWithoutChart_subjectsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UnitsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  connect: z.lazy(() => UnitsWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumchart_subject_tableFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => chart_subject_tableSchema).optional().nullable()
}).strict();

export const NullableIntFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableIntFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumchart_subject_value_sourceFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable()
}).strict();

export const NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumchart_subject_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => chart_subject_typeSchema).optional().nullable()
}).strict();

export const NullableBoolFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableBoolFieldUpdateOperationsInput> = z.object({
  set: z.boolean().optional().nullable()
}).strict();

export const AccountsUpdateOneWithoutChart_subjectsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutChart_subjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutChart_subjectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutChart_subjectsInputSchema) ]).optional(),
}).strict();

export const ChartsUpdateOneWithoutChart_subjectsNestedInputSchema: z.ZodType<Prisma.ChartsUpdateOneWithoutChart_subjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ChartsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  upsert: z.lazy(() => ChartsUpsertWithoutChart_subjectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ChartsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutChart_subjectsInputSchema) ]).optional(),
}).strict();

export const UnitsUpdateOneWithoutChart_subjectsNestedInputSchema: z.ZodType<Prisma.UnitsUpdateOneWithoutChart_subjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutChart_subjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UnitsCreateOrConnectWithoutChart_subjectsInputSchema).optional(),
  upsert: z.lazy(() => UnitsUpsertWithoutChart_subjectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UnitsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutChart_subjectsInputSchema) ]).optional(),
}).strict();

export const Chart_subjectsCreateNestedManyWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateNestedManyWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyChartsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutChartsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutChartsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const PlacesCreateNestedOneWithoutChartsInputSchema: z.ZodType<Prisma.PlacesCreateNestedOneWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutChartsInputSchema).optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutChartsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutChartsInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateNestedManyWithoutChartsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyChartsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumchart_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumchart_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => chart_typeSchema).optional().nullable()
}).strict();

export const Chart_subjectsUpdateManyWithoutChartsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutChartsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyChartsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutChartsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutChartsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutChartsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutChartsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutChartsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutChartsInputSchema) ]).optional(),
}).strict();

export const PlacesUpdateOneWithoutChartsNestedInputSchema: z.ZodType<Prisma.PlacesUpdateOneWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutChartsInputSchema).optional(),
  upsert: z.lazy(() => PlacesUpsertWithoutChartsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutChartsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutChartsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutChartsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutChartsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutChartsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutChartsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutChartsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutChartsInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutChartsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutChartsInputSchema) ]).optional(),
}).strict();

export const Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutChartsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutChartsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyChartsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutChartsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutChartsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutFieldsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutFieldsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Field_typesCreateNestedOneWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesCreateNestedOneWithoutFieldsInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutFieldsInputSchema).optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional()
}).strict();

export const ListsCreateNestedOneWithoutFieldsInputSchema: z.ZodType<Prisma.ListsCreateNestedOneWithoutFieldsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutFieldsInputSchema).optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutFieldsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutFieldsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const Widget_typesCreateNestedOneWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateNestedOneWithoutFieldsInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutFieldsInputSchema).optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutFieldsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutFieldsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutFieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutFieldsInputSchema) ]).optional(),
}).strict();

export const Field_typesUpdateOneWithoutFieldsNestedInputSchema: z.ZodType<Prisma.Field_typesUpdateOneWithoutFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutFieldsInputSchema).optional(),
  upsert: z.lazy(() => Field_typesUpsertWithoutFieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutFieldsInputSchema) ]).optional(),
}).strict();

export const ListsUpdateOneWithoutFieldsNestedInputSchema: z.ZodType<Prisma.ListsUpdateOneWithoutFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutFieldsInputSchema).optional(),
  upsert: z.lazy(() => ListsUpsertWithoutFieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutFieldsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutFieldsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutFieldsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutFieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutFieldsInputSchema) ]).optional(),
}).strict();

export const Widget_typesUpdateOneWithoutFieldsNestedInputSchema: z.ZodType<Prisma.Widget_typesUpdateOneWithoutFieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutFieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutFieldsInputSchema).optional(),
  upsert: z.lazy(() => Widget_typesUpsertWithoutFieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutFieldsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumgbif_tableFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumgbif_tableFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => gbif_tableSchema).optional().nullable()
}).strict();

export const AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutGbif_occurrence_downloadsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutGbif_occurrencesInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutGbif_occurrencesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutGbif_occurrencesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGbif_taxaInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutGbif_taxaInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutGbif_taxaNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGbif_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGbif_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_taxaInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutGbif_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutGbif_taxaInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutGbif_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGoal_report_valuesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Goal_reportsCreateNestedOneWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsCreateNestedOneWithoutGoal_report_valuesInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Goal_reportsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  connect: z.lazy(() => Goal_reportsWhereUniqueInputSchema).optional()
}).strict();

export const UnitsCreateNestedOneWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsCreateNestedOneWithoutGoal_report_valuesInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UnitsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  connect: z.lazy(() => UnitsWhereUniqueInputSchema).optional()
}).strict();

export const NullableFloatFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableFloatFieldUpdateOperationsInput> = z.object({
  set: z.number().optional().nullable(),
  increment: z.number().optional(),
  decrement: z.number().optional(),
  multiply: z.number().optional(),
  divide: z.number().optional()
}).strict();

export const AccountsUpdateOneWithoutGoal_report_valuesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGoal_report_valuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGoal_report_valuesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]).optional(),
}).strict();

export const Goal_reportsUpdateOneWithoutGoal_report_valuesNestedInputSchema: z.ZodType<Prisma.Goal_reportsUpdateOneWithoutGoal_report_valuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Goal_reportsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  upsert: z.lazy(() => Goal_reportsUpsertWithoutGoal_report_valuesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Goal_reportsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]).optional(),
}).strict();

export const UnitsUpdateOneWithoutGoal_report_valuesNestedInputSchema: z.ZodType<Prisma.UnitsUpdateOneWithoutGoal_report_valuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UnitsCreateOrConnectWithoutGoal_report_valuesInputSchema).optional(),
  upsert: z.lazy(() => UnitsUpsertWithoutGoal_report_valuesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UnitsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]).optional(),
}).strict();

export const Goal_report_valuesCreateNestedManyWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateNestedManyWithoutGoal_reportsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyGoal_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGoal_reportsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoal_reportsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const GoalsCreateNestedOneWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsCreateNestedOneWithoutGoal_reportsInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutGoal_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GoalsCreateOrConnectWithoutGoal_reportsInputSchema).optional(),
  connect: z.lazy(() => GoalsWhereUniqueInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedCreateNestedManyWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateNestedManyWithoutGoal_reportsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyGoal_reportsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUpdateManyWithoutGoal_reportsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithoutGoal_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyGoal_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutGoal_reportsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGoal_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoal_reportsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGoal_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoal_reportsInputSchema) ]).optional(),
}).strict();

export const GoalsUpdateOneWithoutGoal_reportsNestedInputSchema: z.ZodType<Prisma.GoalsUpdateOneWithoutGoal_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutGoal_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => GoalsCreateOrConnectWithoutGoal_reportsInputSchema).optional(),
  upsert: z.lazy(() => GoalsUpsertWithoutGoal_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => GoalsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => GoalsUpdateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutGoal_reportsInputSchema) ]).optional(),
}).strict();

export const Goal_report_valuesUncheckedUpdateManyWithoutGoal_reportsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateManyWithoutGoal_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyGoal_reportsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsCreateNestedManyWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsCreateNestedManyWithoutGoalsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyGoalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutGoalsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoalsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutGoalsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGoalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGoalsInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedCreateNestedManyWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateNestedManyWithoutGoalsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyGoalsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_reportsUpdateManyWithoutGoalsNestedInputSchema: z.ZodType<Prisma.Goal_reportsUpdateManyWithoutGoalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutGoalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyGoalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutGoalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutGoalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutGoalsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutGoalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutGoalsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutGoalsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoalsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutGoalsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutGoalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGoalsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutGoalsInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutGoalsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGoalsInputSchema) ]).optional(),
}).strict();

export const Goal_reportsUncheckedUpdateManyWithoutGoalsNestedInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateManyWithoutGoalsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema).array(),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema),z.lazy(() => Goal_reportsCreateOrConnectWithoutGoalsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpsertWithWhereUniqueWithoutGoalsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_reportsCreateManyGoalsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_reportsWhereUniqueInputSchema),z.lazy(() => Goal_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpdateWithWhereUniqueWithoutGoalsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUpdateManyWithWhereWithoutGoalsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutLayer_optionsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Tile_layersCreateNestedOneWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersCreateNestedOneWithoutLayer_optionsInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Tile_layersCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  connect: z.lazy(() => Tile_layersWhereUniqueInputSchema).optional()
}).strict();

export const Vector_layersCreateNestedOneWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersCreateNestedOneWithoutLayer_optionsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumlayer_options_field_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => layer_options_field_enumSchema).optional().nullable()
}).strict();

export const AccountsUpdateOneWithoutLayer_optionsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutLayer_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutLayer_optionsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutLayer_optionsInputSchema) ]).optional(),
}).strict();

export const Tile_layersUpdateOneWithoutLayer_optionsNestedInputSchema: z.ZodType<Prisma.Tile_layersUpdateOneWithoutLayer_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Tile_layersCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  upsert: z.lazy(() => Tile_layersUpsertWithoutLayer_optionsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Tile_layersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutLayer_optionsInputSchema) ]).optional(),
}).strict();

export const Vector_layersUpdateOneWithoutLayer_optionsNestedInputSchema: z.ZodType<Prisma.Vector_layersUpdateOneWithoutLayer_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutLayer_optionsInputSchema).optional(),
  upsert: z.lazy(() => Vector_layersUpsertWithoutLayer_optionsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutLayer_optionsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutList_valuesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutList_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutList_valuesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ListsCreateNestedOneWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsCreateNestedOneWithoutList_valuesInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedCreateWithoutList_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutList_valuesInputSchema).optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutList_valuesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutList_valuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutList_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutList_valuesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutList_valuesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutList_valuesInputSchema) ]).optional(),
}).strict();

export const ListsUpdateOneWithoutList_valuesNestedInputSchema: z.ZodType<Prisma.ListsUpdateOneWithoutList_valuesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedCreateWithoutList_valuesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutList_valuesInputSchema).optional(),
  upsert: z.lazy(() => ListsUpsertWithoutList_valuesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutList_valuesInputSchema) ]).optional(),
}).strict();

export const FieldsCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.FieldsCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsCreateWithoutListsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const List_valuesCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.List_valuesCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesCreateWithoutListsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutListsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutListsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const UnitsCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.UnitsCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsCreateWithoutListsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsCreateWithoutListsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUncheckedCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUncheckedCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesCreateWithoutListsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedCreateNestedManyWithoutListsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateNestedManyWithoutListsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsCreateWithoutListsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyListsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsCreateWithoutListsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.List_valuesUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesCreateWithoutListsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => List_valuesUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => List_valuesUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutListsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutListsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutListsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutListsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutListsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutListsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutListsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutListsInputSchema) ]).optional(),
}).strict();

export const UnitsUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsCreateWithoutListsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsCreateWithoutListsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesCreateWithoutListsInputSchema).array(),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema),z.lazy(() => List_valuesCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => List_valuesUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => List_valuesCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => List_valuesWhereUniqueInputSchema),z.lazy(() => List_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => List_valuesUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => List_valuesUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => List_valuesUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedUpdateManyWithoutListsNestedInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateManyWithoutListsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsCreateWithoutListsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutListsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutListsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyListsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutListsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutListsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutListsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutListsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesCreateNestedManyWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutMessagesInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutMessagesNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutMessagesNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutMessagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateWithoutMessagesInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutMessagesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyMessagesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutMessagesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutObservation_sourcesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservation_sourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutObservation_sourcesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutObservation_sourcesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutObservation_sourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutObservation_sourcesInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const ObservationsCreateNestedManyWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsCreateNestedManyWithoutObservation_sourcesInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyObservation_sourcesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedCreateNestedManyWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateNestedManyWithoutObservation_sourcesInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyObservation_sourcesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutObservation_sourcesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutObservation_sourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservation_sourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutObservation_sourcesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutObservation_sourcesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutObservation_sourcesNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutObservation_sourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutObservation_sourcesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutObservation_sourcesInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutObservation_sourcesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]).optional(),
}).strict();

export const ObservationsUpdateManyWithoutObservation_sourcesNestedInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithoutObservation_sourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyObservation_sourcesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutObservation_sourcesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedUpdateManyWithoutObservation_sourcesNestedInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateManyWithoutObservation_sourcesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyObservation_sourcesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutObservation_sourcesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutObservationsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutObservationsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Observation_sourcesCreateNestedOneWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateNestedOneWithoutObservationsInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Observation_sourcesCreateOrConnectWithoutObservationsInputSchema).optional(),
  connect: z.lazy(() => Observation_sourcesWhereUniqueInputSchema).optional()
}).strict();

export const PlacesCreateNestedOneWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesCreateNestedOneWithoutObservationsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutObservationsInputSchema).optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutObservationsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutObservationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutObservationsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutObservationsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutObservationsInputSchema) ]).optional(),
}).strict();

export const Observation_sourcesUpdateOneWithoutObservationsNestedInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateOneWithoutObservationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Observation_sourcesCreateOrConnectWithoutObservationsInputSchema).optional(),
  upsert: z.lazy(() => Observation_sourcesUpsertWithoutObservationsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Observation_sourcesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutObservationsInputSchema) ]).optional(),
}).strict();

export const PlacesUpdateOneWithoutObservationsNestedInputSchema: z.ZodType<Prisma.PlacesUpdateOneWithoutObservationsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutObservationsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutObservationsInputSchema).optional(),
  upsert: z.lazy(() => PlacesUpsertWithoutObservationsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutObservationsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutPersonsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPersonsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutPersonsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPersonsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutPersonsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutPersonsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPersonsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutPersonsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPersonsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutPersonsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutPersonsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPersonsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutPersonsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPersonsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutPlace_levelsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutPlace_levelsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutPlace_levelsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutPlace_levelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutPlace_levelsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlace_levelsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutPlace_levelsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutPlace_levelsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutPlace_levelsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema) ]).optional(),
}).strict();

export const ChartsCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ObservationsCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlacesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const PlacesCreateNestedOneWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesCreateNestedOneWithoutOther_placesInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutOther_placesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutOther_placesInputSchema).optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional()
}).strict();

export const PlacesCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesCreateWithoutPlacesInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsCreateNestedOneWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutPlacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutPlacesInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateNestedManyWithoutPlacesInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesCreateWithoutPlacesInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyPlacesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChartsUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutPlacesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutPlacesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutPlacesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlacesInputSchema) ]).optional(),
}).strict();

export const PlacesUpdateOneWithoutOther_placesNestedInputSchema: z.ZodType<Prisma.PlacesUpdateOneWithoutOther_placesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutOther_placesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => PlacesCreateOrConnectWithoutOther_placesInputSchema).optional(),
  upsert: z.lazy(() => PlacesUpsertWithoutOther_placesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => PlacesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutOther_placesInputSchema) ]).optional(),
}).strict();

export const PlacesUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesCreateWithoutPlacesInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutPlacesNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutPlacesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutPlacesInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutPlacesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutPlacesInputSchema) ]).optional(),
}).strict();

export const ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateWithoutPlacesInputSchema).array(),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => ObservationsCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ObservationsUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ObservationsCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ObservationsWhereUniqueInputSchema),z.lazy(() => ObservationsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => ObservationsUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ObservationsUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => ObservationsUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyWithoutPlacesNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesCreateWithoutPlacesInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutPlacesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManyPlacesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutPlacesInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutPlacesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutPlacesInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutPlacesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutProject_reportsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_reportsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutProject_reportsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_reportsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutProject_reportsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutProject_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_reportsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutProject_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_reportsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutProject_reportsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutProject_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_reportsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutProject_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_reportsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutProject_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutProject_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutProject_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutProject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutProject_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutProject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutProject_usersInputSchema) ]).optional(),
}).strict();

export const ChartsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsCreateWithoutProjectsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProjectsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UnitsCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsCreateWithoutProjectsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsCreateWithoutProjectsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsCreateWithoutProjectsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateNestedManyWithoutProjectsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumproject_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumproject_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => project_typeSchema).optional().nullable()
}).strict();

export const ChartsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsCreateWithoutProjectsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ListsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_reportsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_reportsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutProjectsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutProjectsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutProjectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProjectsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Tile_layersUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Tile_layersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UnitsUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsCreateWithoutProjectsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Vector_layersUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsCreateWithoutProjectsInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema).array(),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_taxaCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_taxaWhereUniqueInputSchema),z.lazy(() => Gbif_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsCreateWithoutProjectsInputSchema).array(),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => ListsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ListsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ListsWhereUniqueInputSchema),z.lazy(() => ListsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => ListsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => ListsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema).array(),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Observation_sourcesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Observation_sourcesWhereUniqueInputSchema),z.lazy(() => Observation_sourcesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsCreateWithoutProjectsInputSchema).array(),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => PersonsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PersonsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PersonsWhereUniqueInputSchema),z.lazy(() => PersonsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => PersonsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Place_levelsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Place_levelsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Place_levelsWhereUniqueInputSchema),z.lazy(() => Place_levelsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_reportsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_reportsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_reportsWhereUniqueInputSchema),z.lazy(() => Project_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_reportsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_reportsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema).array(),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => SubprojectsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => SubprojectsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => SubprojectsWhereUniqueInputSchema),z.lazy(() => SubprojectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema).array(),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => TaxonomiesCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxonomiesCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxonomiesWhereUniqueInputSchema),z.lazy(() => TaxonomiesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Tile_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Tile_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Tile_layersWhereUniqueInputSchema),z.lazy(() => Tile_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Tile_layersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Tile_layersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsCreateWithoutProjectsInputSchema).array(),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => UnitsCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => UnitsUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => UnitsUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => UnitsCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => UnitsWhereUniqueInputSchema),z.lazy(() => UnitsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => UnitsUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => UnitsUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => UnitsUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => UnitsUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateManyWithoutProjectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema).array(),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema),z.lazy(() => Vector_layersCreateOrConnectWithoutProjectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpsertWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layersCreateManyProjectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layersWhereUniqueInputSchema),z.lazy(() => Vector_layersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpdateWithWhereUniqueWithoutProjectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layersUpdateManyWithWhereWithoutProjectsInputSchema),z.lazy(() => Vector_layersUpdateManyWithWhereWithoutProjectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutSubproject_reportsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_reportsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutSubproject_reportsInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_reportsInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutSubproject_reportsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutSubproject_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_reportsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutSubproject_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_reportsInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutSubproject_reportsNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutSubproject_reportsNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_reportsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_reportsInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutSubproject_reportsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_reportsInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutSubproject_taxaInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutSubproject_taxaInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const TaxaCreateNestedOneWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaCreateNestedOneWithoutSubproject_taxaInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxaCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  connect: z.lazy(() => TaxaWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutSubproject_taxaNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutSubproject_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutSubproject_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_taxaInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutSubproject_taxaNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutSubproject_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutSubproject_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_taxaInputSchema) ]).optional(),
}).strict();

export const TaxaUpdateOneWithoutSubproject_taxaNestedInputSchema: z.ZodType<Prisma.TaxaUpdateOneWithoutSubproject_taxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutSubproject_taxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxaCreateOrConnectWithoutSubproject_taxaInputSchema).optional(),
  upsert: z.lazy(() => TaxaUpsertWithoutSubproject_taxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaxaWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutSubproject_taxaInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutSubproject_usersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const SubprojectsCreateNestedOneWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsCreateNestedOneWithoutSubproject_usersInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutSubproject_usersInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutSubproject_usersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutSubproject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutSubproject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_usersInputSchema) ]).optional(),
}).strict();

export const SubprojectsUpdateOneWithoutSubproject_usersNestedInputSchema: z.ZodType<Prisma.SubprojectsUpdateOneWithoutSubproject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => SubprojectsCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  upsert: z.lazy(() => SubprojectsUpsertWithoutSubproject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => SubprojectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_usersInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutSubproject_usersNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutSubproject_usersNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSubproject_usersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutSubproject_usersInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutSubproject_usersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutSubproject_usersInputSchema) ]).optional(),
}).strict();

export const ChartsCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GoalsCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlacesCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManySubprojectsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const ChartsUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GoalsUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.GoalsUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GoalsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GoalsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GoalsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlacesUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutSubprojectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubprojectsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutSubprojectsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutSubprojectsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutSubprojectsInputSchema) ]).optional(),
}).strict();

export const ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => ChartsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => ChartsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => ChartsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => ChartsWhereUniqueInputSchema),z.lazy(() => ChartsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => ChartsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => ChartsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => ChartsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => GoalsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => GoalsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => GoalsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => GoalsWhereUniqueInputSchema),z.lazy(() => GoalsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => GoalsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => GoalsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => GoalsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => PlacesCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => PlacesUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => PlacesCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => PlacesWhereUniqueInputSchema),z.lazy(() => PlacesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => PlacesUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => PlacesUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => PlacesUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_reportsCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_reportsWhereUniqueInputSchema),z.lazy(() => Subproject_reportsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManySubprojectsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutSubprojectsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaCreateNestedManyWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaCreateNestedManyWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyTaxaInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxaInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const TaxonomiesCreateNestedOneWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateNestedOneWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxonomiesCreateOrConnectWithoutTaxaInputSchema).optional(),
  connect: z.lazy(() => TaxonomiesWhereUniqueInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedCreateNestedManyWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateNestedManyWithoutTaxaInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyTaxaInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_taxaUpdateManyWithoutTaxaNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyTaxaInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutTaxaInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutTaxaNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxaInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutTaxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxaInputSchema) ]).optional(),
}).strict();

export const TaxonomiesUpdateOneWithoutTaxaNestedInputSchema: z.ZodType<Prisma.TaxonomiesUpdateOneWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => TaxonomiesCreateOrConnectWithoutTaxaInputSchema).optional(),
  upsert: z.lazy(() => TaxonomiesUpsertWithoutTaxaInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => TaxonomiesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutTaxaInputSchema) ]).optional(),
}).strict();

export const Subproject_taxaUncheckedUpdateManyWithoutTaxaNestedInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateManyWithoutTaxaNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema).array(),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaCreateOrConnectWithoutTaxaInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_taxaCreateManyTaxaInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_taxaWhereUniqueInputSchema),z.lazy(() => Subproject_taxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUpdateManyWithWhereWithoutTaxaInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const TaxaCreateNestedManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateNestedManyWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateNestedManyWithoutTaxonomiesInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumtaxonomy_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => taxonomy_typeSchema).optional().nullable()
}).strict();

export const TaxaUpdateManyWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutTaxonomiesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxonomiesInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTaxonomiesInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutTaxonomiesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema) ]).optional(),
}).strict();

export const TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInput> = z.object({
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema).array(),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema),z.lazy(() => TaxaCreateOrConnectWithoutTaxonomiesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => TaxaCreateManyTaxonomiesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => TaxaWhereUniqueInputSchema),z.lazy(() => TaxaWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Layer_optionsCreateNestedManyWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateNestedManyWithoutTile_layersInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyTile_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutTile_layersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTile_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTile_layersInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutTile_layersInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTile_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTile_layersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateNestedManyWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateNestedManyWithoutTile_layersInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyTile_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumtile_layer_type_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => tile_layer_type_enumSchema).optional().nullable()
}).strict();

export const Layer_optionsUpdateManyWithoutTile_layersNestedInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithoutTile_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyTile_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutTile_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutTile_layersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutTile_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTile_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutTile_layersInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutTile_layersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTile_layersInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneRequiredWithoutTile_layersNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneRequiredWithoutTile_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTile_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutTile_layersInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutTile_layersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTile_layersInputSchema) ]).optional(),
}).strict();

export const Layer_optionsUncheckedUpdateManyWithoutTile_layersNestedInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateManyWithoutTile_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutTile_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyTile_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutTile_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutUi_optionsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUi_optionsInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutUi_optionsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutUi_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutUi_optionsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUi_optionsInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneRequiredWithoutUi_optionsNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUi_optionsInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUi_optionsInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUi_optionsInputSchema) ]).optional(),
}).strict();

export const Chart_subjectsCreateNestedManyWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateNestedManyWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyUnitsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateNestedManyWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyUnitsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUnitsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ListsCreateNestedOneWithoutUnitsInputSchema: z.ZodType<Prisma.ListsCreateNestedOneWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutUnitsInputSchema).optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutUnitsInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyUnitsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyUnitsInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumunit_typeFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumunit_typeFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => unit_typeSchema).optional().nullable()
}).strict();

export const Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyUnitsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutUnitsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyUnitsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutUnitsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutUnitsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUnitsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutUnitsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUnitsInputSchema) ]).optional(),
}).strict();

export const ListsUpdateOneWithoutUnitsNestedInputSchema: z.ZodType<Prisma.ListsUpdateOneWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ListsCreateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ListsCreateOrConnectWithoutUnitsInputSchema).optional(),
  upsert: z.lazy(() => ListsUpsertWithoutUnitsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ListsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ListsUpdateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutUnitsInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneWithoutUnitsNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutUnitsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutUnitsInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutUnitsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutUnitsInputSchema) ]).optional(),
}).strict();

export const Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema).array(),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Chart_subjectsCreateManyUnitsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Chart_subjectsWhereUniqueInputSchema),z.lazy(() => Chart_subjectsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUpdateManyWithWhereWithoutUnitsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema).array(),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Goal_report_valuesCreateManyUnitsInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),z.lazy(() => Goal_report_valuesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUpdateManyWithWhereWithoutUnitsInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const MessagesCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessagesCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => MessagesWhereUniqueInputSchema).optional()
}).strict();

export const UsersCreateNestedOneWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateNestedOneWithoutUser_messagesInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const MessagesUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.MessagesUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => MessagesCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => MessagesUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => MessagesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => MessagesUpdateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const UsersUpdateOneWithoutUser_messagesNestedInputSchema: z.ZodType<Prisma.UsersUpdateOneWithoutUser_messagesNestedInput> = z.object({
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => UsersCreateOrConnectWithoutUser_messagesInputSchema).optional(),
  upsert: z.lazy(() => UsersUpsertWithoutUser_messagesInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => UsersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => UsersUpdateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUser_messagesInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional()
}).strict();

export const User_messagesCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateNestedOneWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateNestedManyWithoutUsersInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.Ui_optionsUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => Ui_optionsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const User_messagesUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsCreateWithoutUsersInputSchema).array(),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema),z.lazy(() => AccountsCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => AccountsCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => AccountsWhereUniqueInputSchema),z.lazy(() => AccountsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => AccountsUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => AccountsUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Project_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Project_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Project_usersWhereUniqueInputSchema),z.lazy(() => Project_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Project_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema).array(),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema),z.lazy(() => Subproject_usersCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Subproject_usersCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Subproject_usersWhereUniqueInputSchema),z.lazy(() => Subproject_usersWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => Subproject_usersUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateOneWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Ui_optionsCreateOrConnectWithoutUsersInputSchema).optional(),
  upsert: z.lazy(() => Ui_optionsUpsertWithoutUsersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Ui_optionsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]).optional(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutUsersNestedInput> = z.object({
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesCreateWithoutUsersInputSchema).array(),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema),z.lazy(() => User_messagesCreateOrConnectWithoutUsersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => User_messagesCreateManyUsersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => User_messagesWhereUniqueInputSchema),z.lazy(() => User_messagesWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema),z.lazy(() => User_messagesUpdateManyWithWhereWithoutUsersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutVector_layer_displaysInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_displaysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layer_displaysInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Vector_layersCreateNestedOneWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersCreateNestedOneWithoutVector_layer_displaysInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_displaysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutVector_layer_displaysInputSchema).optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional()
}).strict();

export const NullableEnummarker_type_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnummarker_type_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => marker_type_enumSchema).optional().nullable()
}).strict();

export const NullableEnumline_cap_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumline_cap_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => line_cap_enumSchema).optional().nullable()
}).strict();

export const NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumfill_rule_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => fill_rule_enumSchema).optional().nullable()
}).strict();

export const AccountsUpdateOneWithoutVector_layer_displaysNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutVector_layer_displaysNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_displaysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layer_displaysInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutVector_layer_displaysInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layer_displaysInputSchema) ]).optional(),
}).strict();

export const Vector_layersUpdateOneWithoutVector_layer_displaysNestedInputSchema: z.ZodType<Prisma.Vector_layersUpdateOneWithoutVector_layer_displaysNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_displaysInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutVector_layer_displaysInputSchema).optional(),
  upsert: z.lazy(() => Vector_layersUpsertWithoutVector_layer_displaysInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutVector_layer_displaysInputSchema) ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutVector_layer_geomsInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_geomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layer_geomsInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const Vector_layersCreateNestedOneWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersCreateNestedOneWithoutVector_layer_geomsInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_geomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutVector_layer_geomsInputSchema).optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional()
}).strict();

export const AccountsUpdateOneWithoutVector_layer_geomsNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutVector_layer_geomsNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_geomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layer_geomsInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutVector_layer_geomsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layer_geomsInputSchema) ]).optional(),
}).strict();

export const Vector_layersUpdateOneWithoutVector_layer_geomsNestedInputSchema: z.ZodType<Prisma.Vector_layersUpdateOneWithoutVector_layer_geomsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_geomsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Vector_layersCreateOrConnectWithoutVector_layer_geomsInputSchema).optional(),
  upsert: z.lazy(() => Vector_layersUpsertWithoutVector_layer_geomsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Vector_layersWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutVector_layer_geomsInputSchema) ]).optional(),
}).strict();

export const Layer_optionsCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const AccountsCreateNestedOneWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsCreateNestedOneWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layersInputSchema).optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional()
}).strict();

export const ProjectsCreateNestedOneWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsCreateNestedOneWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutVector_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutVector_layersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyVector_layersInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema: z.ZodType<Prisma.NullableEnumvector_layer_type_enumFieldUpdateOperationsInput> = z.object({
  set: z.lazy(() => vector_layer_type_enumSchema).optional().nullable()
}).strict();

export const Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const AccountsUpdateOneWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.AccountsUpdateOneWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => AccountsCreateOrConnectWithoutVector_layersInputSchema).optional(),
  upsert: z.lazy(() => AccountsUpsertWithoutVector_layersInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => AccountsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layersInputSchema) ]).optional(),
}).strict();

export const ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.ProjectsUpdateOneRequiredWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => ProjectsCreateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutVector_layersInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => ProjectsCreateOrConnectWithoutVector_layersInputSchema).optional(),
  upsert: z.lazy(() => ProjectsUpsertWithoutVector_layersInputSchema).optional(),
  connect: z.lazy(() => ProjectsWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutVector_layersInputSchema) ]).optional(),
}).strict();

export const Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Layer_optionsCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Layer_optionsWhereUniqueInputSchema),z.lazy(() => Layer_optionsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_displaysCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInput> = z.object({
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema).array(),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Vector_layer_geomsCreateManyVector_layersInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
}).strict();

export const FieldsUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => FieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => FieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => FieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => FieldsWhereUniqueInputSchema),z.lazy(() => FieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => FieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => FieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => FieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema).array(),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema).array() ]).optional(),
  connectOrCreate: z.union([ z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema).array() ]).optional(),
  upsert: z.union([ z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  createMany: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema).optional(),
  set: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  disconnect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  delete: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  connect: z.union([ z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema).array() ]).optional(),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema).array() ]).optional(),
  updateMany: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema).array() ]).optional(),
  deleteMany: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
}).strict();

export const Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateNestedOneWithoutWidgets_for_fieldsInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional()
}).strict();

export const Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional()
}).strict();

export const Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema: z.ZodType<Prisma.Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  upsert: z.lazy(() => Field_typesUpsertWithoutWidgets_for_fieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Field_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
}).strict();

export const Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema: z.ZodType<Prisma.Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInput> = z.object({
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
  connectOrCreate: z.lazy(() => Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema).optional(),
  upsert: z.lazy(() => Widget_typesUpsertWithoutWidgets_for_fieldsInputSchema).optional(),
  disconnect: z.boolean().optional(),
  delete: z.boolean().optional(),
  connect: z.lazy(() => Widget_typesWhereUniqueInputSchema).optional(),
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]).optional(),
}).strict();

export const NestedUuidFilterSchema: z.ZodType<Prisma.NestedUuidFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableFilterSchema: z.ZodType<Prisma.NestedUuidNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableFilterSchema: z.ZodType<Prisma.NestedStringNullableFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedDateTimeNullableFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedUuidWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedIntFilterSchema: z.ZodType<Prisma.NestedIntFilter> = z.object({
  equals: z.number().optional(),
  in: z.number().array().optional(),
  notIn: z.number().array().optional(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntFilterSchema) ]).optional(),
}).strict();

export const NestedStringFilterSchema: z.ZodType<Prisma.NestedStringFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringFilterSchema) ]).optional(),
}).strict();

export const NestedUuidNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedUuidNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedUuidNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableFilterSchema: z.ZodType<Prisma.NestedIntNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringNullableWithAggregatesFilter> = z.object({
  equals: z.string().optional().nullable(),
  in: z.string().array().optional().nullable(),
  notIn: z.string().array().optional().nullable(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedStringNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedStringNullableFilterSchema).optional()
}).strict();

export const NestedDateTimeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedDateTimeNullableWithAggregatesFilter> = z.object({
  equals: z.coerce.date().optional().nullable(),
  in: z.coerce.date().array().optional().nullable(),
  notIn: z.coerce.date().array().optional().nullable(),
  lt: z.coerce.date().optional(),
  lte: z.coerce.date().optional(),
  gt: z.coerce.date().optional(),
  gte: z.coerce.date().optional(),
  not: z.union([ z.coerce.date(),z.lazy(() => NestedDateTimeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedDateTimeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedDateTimeNullableFilterSchema).optional()
}).strict();

export const NestedEnumchart_subject_tableNullableFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_tableNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumchart_subject_value_sourceNullableFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_value_sourceNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumchart_subject_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_typeNullableFilter> = z.object({
  equals: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedBoolNullableFilterSchema: z.ZodType<Prisma.NestedBoolNullableFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumchart_subject_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NestedEnumchart_subject_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_tableNullableFilterSchema).optional()
}).strict();

export const NestedIntNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedIntNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedIntNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedIntNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableFilterSchema: z.ZodType<Prisma.NestedFloatNullableFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedJsonNullableFilterSchema: z.ZodType<Prisma.NestedJsonNullableFilter> = z.object({
  equals: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
  path: z.string().array().optional(),
  string_contains: z.string().optional(),
  string_starts_with: z.string().optional(),
  string_ends_with: z.string().optional(),
  array_contains: InputJsonValue.optional().nullable(),
  array_starts_with: InputJsonValue.optional().nullable(),
  array_ends_with: InputJsonValue.optional().nullable(),
  lt: InputJsonValue.optional(),
  lte: InputJsonValue.optional(),
  gt: InputJsonValue.optional(),
  gte: InputJsonValue.optional(),
  not: z.union([ InputJsonValue,z.lazy(() => JsonNullValueFilterSchema) ]).optional(),
}).strict();

export const NestedEnumchart_subject_value_sourceNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_value_sourceNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_value_sourceSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NestedEnumchart_subject_value_sourceNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_value_sourceNullableFilterSchema).optional()
}).strict();

export const NestedEnumchart_subject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumchart_subject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_subject_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NestedEnumchart_subject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_subject_typeNullableFilterSchema).optional()
}).strict();

export const NestedBoolNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedBoolNullableWithAggregatesFilter> = z.object({
  equals: z.boolean().optional().nullable(),
  not: z.union([ z.boolean(),z.lazy(() => NestedBoolNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedBoolNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedBoolNullableFilterSchema).optional()
}).strict();

export const NestedEnumchart_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumchart_typeNullableFilter> = z.object({
  equals: z.lazy(() => chart_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NestedEnumchart_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumchart_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumchart_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => chart_typeSchema).optional().nullable(),
  in: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => chart_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NestedEnumchart_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumchart_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumchart_typeNullableFilterSchema).optional()
}).strict();

export const NestedEnumgbif_tableNullableFilterSchema: z.ZodType<Prisma.NestedEnumgbif_tableNullableFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumgbif_tableNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumgbif_tableNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => gbif_tableSchema).optional().nullable(),
  in: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  notIn: z.lazy(() => gbif_tableSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NestedEnumgbif_tableNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumgbif_tableNullableFilterSchema).optional()
}).strict();

export const NestedFloatNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedFloatNullableWithAggregatesFilter> = z.object({
  equals: z.number().optional().nullable(),
  in: z.number().array().optional().nullable(),
  notIn: z.number().array().optional().nullable(),
  lt: z.number().optional(),
  lte: z.number().optional(),
  gt: z.number().optional(),
  gte: z.number().optional(),
  not: z.union([ z.number(),z.lazy(() => NestedFloatNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _avg: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _sum: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedFloatNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedFloatNullableFilterSchema).optional()
}).strict();

export const NestedEnumlayer_options_field_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnumlayer_options_field_enumNullableFilter> = z.object({
  equals: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  in: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedStringWithAggregatesFilterSchema: z.ZodType<Prisma.NestedStringWithAggregatesFilter> = z.object({
  equals: z.string().optional(),
  in: z.string().array().optional(),
  notIn: z.string().array().optional(),
  lt: z.string().optional(),
  lte: z.string().optional(),
  gt: z.string().optional(),
  gte: z.string().optional(),
  contains: z.string().optional(),
  startsWith: z.string().optional(),
  endsWith: z.string().optional(),
  not: z.union([ z.string(),z.lazy(() => NestedStringWithAggregatesFilterSchema) ]).optional(),
  _count: z.lazy(() => NestedIntFilterSchema).optional(),
  _min: z.lazy(() => NestedStringFilterSchema).optional(),
  _max: z.lazy(() => NestedStringFilterSchema).optional()
}).strict();

export const NestedEnumlayer_options_field_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumlayer_options_field_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  in: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => layer_options_field_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NestedEnumlayer_options_field_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumlayer_options_field_enumNullableFilterSchema).optional()
}).strict();

export const NestedEnumproject_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumproject_typeNullableFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumproject_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumproject_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => project_typeSchema).optional().nullable(),
  in: z.lazy(() => project_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => project_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NestedEnumproject_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumproject_typeNullableFilterSchema).optional()
}).strict();

export const NestedEnumtaxonomy_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumtaxonomy_typeNullableFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumtaxonomy_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  in: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => taxonomy_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NestedEnumtaxonomy_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtaxonomy_typeNullableFilterSchema).optional()
}).strict();

export const NestedEnumtile_layer_type_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnumtile_layer_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumtile_layer_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumtile_layer_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => tile_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NestedEnumtile_layer_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumtile_layer_type_enumNullableFilterSchema).optional()
}).strict();

export const NestedEnumunit_typeNullableFilterSchema: z.ZodType<Prisma.NestedEnumunit_typeNullableFilter> = z.object({
  equals: z.lazy(() => unit_typeSchema).optional().nullable(),
  in: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NestedEnumunit_typeNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumunit_typeNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumunit_typeNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => unit_typeSchema).optional().nullable(),
  in: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  notIn: z.lazy(() => unit_typeSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NestedEnumunit_typeNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumunit_typeNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumunit_typeNullableFilterSchema).optional()
}).strict();

export const NestedEnummarker_type_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnummarker_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  in: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumline_cap_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnumline_cap_enumNullableFilter> = z.object({
  equals: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  in: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumfill_rule_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnumfill_rule_enumNullableFilter> = z.object({
  equals: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  in: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnummarker_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnummarker_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  in: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => marker_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NestedEnummarker_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnummarker_type_enumNullableFilterSchema).optional()
}).strict();

export const NestedEnumline_cap_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumline_cap_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  in: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => line_cap_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NestedEnumline_cap_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumline_cap_enumNullableFilterSchema).optional()
}).strict();

export const NestedEnumfill_rule_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumfill_rule_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  in: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => fill_rule_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NestedEnumfill_rule_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumfill_rule_enumNullableFilterSchema).optional()
}).strict();

export const NestedEnumvector_layer_type_enumNullableFilterSchema: z.ZodType<Prisma.NestedEnumvector_layer_type_enumNullableFilter> = z.object({
  equals: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema) ]).optional().nullable(),
}).strict();

export const NestedEnumvector_layer_type_enumNullableWithAggregatesFilterSchema: z.ZodType<Prisma.NestedEnumvector_layer_type_enumNullableWithAggregatesFilter> = z.object({
  equals: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  in: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  notIn: z.lazy(() => vector_layer_type_enumSchema).array().optional().nullable(),
  not: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NestedEnumvector_layer_type_enumNullableWithAggregatesFilterSchema) ]).optional().nullable(),
  _count: z.lazy(() => NestedIntNullableFilterSchema).optional(),
  _min: z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema).optional(),
  _max: z.lazy(() => NestedEnumvector_layer_type_enumNullableFilterSchema).optional()
}).strict();

export const UsersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Chart_subjectsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateWithoutAccountsInput> = z.object({
  chart_subject_id: z.string(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedOneWithoutChart_subjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutChart_subjectsInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateWithoutAccountsInput> = z.object({
  chart_subject_id: z.string(),
  chart_id: z.string().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Chart_subjectsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Chart_subjectsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Chart_subjectsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChartsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsCreateWithoutAccountsInput> = z.object({
  chart_id: z.string(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutChartsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutChartsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutChartsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateWithoutAccountsInput> = z.object({
  chart_id: z.string(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema).optional()
}).strict();

export const ChartsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ChartsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ChartsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ChartsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsCreateWithoutAccountsInput> = z.object({
  field_id: z.string(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutFieldsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutFieldsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutFieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateWithoutAccountsInput> = z.object({
  field_id: z.string(),
  project_id: z.string().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  field_type_id: z.string().optional().nullable(),
  widget_type_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const FieldsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.FieldsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => FieldsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.string(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_taxaCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.string(),
  project_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_taxaCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_taxaCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Goal_report_valuesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateWithoutAccountsInput> = z.object({
  goal_report_value_id: z.string(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateWithoutAccountsInput> = z.object({
  goal_report_value_id: z.string(),
  goal_report_id: z.string().optional().nullable(),
  unit_id: z.string().optional().nullable(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_report_valuesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Goal_report_valuesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Goal_reportsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsCreateWithoutAccountsInput> = z.object({
  goal_report_id: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutGoal_reportsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedOneWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateWithoutAccountsInput> = z.object({
  goal_report_id: z.string(),
  goal_id: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_reportsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Goal_reportsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Goal_reportsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const GoalsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsCreateWithoutAccountsInput> = z.object({
  goal_id: z.string(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutGoalsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateWithoutAccountsInput> = z.object({
  goal_id: z.string(),
  subproject_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const GoalsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.GoalsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => GoalsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Layer_optionsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsCreateWithoutAccountsInput> = z.object({
  layer_option_id: z.string(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateWithoutAccountsInput> = z.object({
  layer_option_id: z.string(),
  tile_layer_id: z.string().optional().nullable(),
  vector_layer_id: z.string().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Layer_optionsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Layer_optionsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Layer_optionsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const List_valuesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesCreateWithoutAccountsInput> = z.object({
  list_value_id: z.string(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutList_valuesInputSchema).optional()
}).strict();

export const List_valuesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUncheckedCreateWithoutAccountsInput> = z.object({
  list_value_id: z.string(),
  list_id: z.string().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const List_valuesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const List_valuesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.List_valuesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => List_valuesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateWithoutAccountsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutAccountsInput> = z.object({
  list_id: z.string(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ListsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ListsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Observation_sourcesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateWithoutAccountsInput> = z.object({
  observation_source_id: z.string(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutObservation_sourcesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateWithoutAccountsInput> = z.object({
  observation_source_id: z.string(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Observation_sourcesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Observation_sourcesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Observation_sourcesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ObservationsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsCreateWithoutAccountsInput> = z.object({
  observation_id: z.string(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedOneWithoutObservationsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutObservationsInputSchema).optional()
}).strict();

export const ObservationsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateWithoutAccountsInput> = z.object({
  observation_id: z.string(),
  observation_source_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ObservationsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ObservationsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ObservationsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PersonsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateWithoutAccountsInput> = z.object({
  person_id: z.string(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateWithoutAccountsInput> = z.object({
  person_id: z.string(),
  project_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.PersonsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => PersonsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Place_levelsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateWithoutAccountsInput> = z.object({
  place_level_id: z.string(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateWithoutAccountsInput> = z.object({
  place_level_id: z.string(),
  project_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Place_levelsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Place_levelsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlacesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesCreateWithoutAccountsInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutAccountsInput> = z.object({
  place_id: z.string(),
  subproject_id: z.string().optional().nullable(),
  parent_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PlacesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.PlacesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => PlacesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_reportsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsCreateWithoutAccountsInput> = z.object({
  project_report_id: z.string(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_reportsInputSchema).optional()
}).strict();

export const Project_reportsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedCreateWithoutAccountsInput> = z.object({
  project_report_id: z.string(),
  project_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_reportsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Project_reportsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Project_reportsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutAccountsInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutAccountsInput> = z.object({
  project_user_id: z.string(),
  project_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ProjectsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutAccountsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutAccountsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.ProjectsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => ProjectsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_reportsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateWithoutAccountsInput> = z.object({
  subproject_report_id: z.string(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_reportsInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedCreateWithoutAccountsInput> = z.object({
  subproject_report_id: z.string(),
  subproject_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_reportsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_reportsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_reportsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_taxaCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateWithoutAccountsInput> = z.object({
  subproject_taxon_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_taxaInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedOneWithoutSubproject_taxaInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateWithoutAccountsInput> = z.object({
  subproject_taxon_id: z.string(),
  subproject_id: z.string().optional().nullable(),
  taxon_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_taxaCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_taxaCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_taxaCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_usersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersCreateWithoutAccountsInput> = z.object({
  subproject_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutSubproject_usersInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateWithoutAccountsInput> = z.object({
  subproject_user_id: z.string(),
  subproject_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_usersCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_usersCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_usersCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SubprojectsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutAccountsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutAccountsInput> = z.object({
  subproject_id: z.string(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.SubprojectsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => SubprojectsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxaCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateWithoutAccountsInput> = z.object({
  taxon_id: z.string(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutTaxaInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateWithoutAccountsInput> = z.object({
  taxon_id: z.string(),
  taxonomy_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.TaxaCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => TaxaCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxonomiesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutAccountsInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutAccountsInput> = z.object({
  taxonomy_id: z.string(),
  project_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.TaxonomiesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => TaxonomiesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Tile_layersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersCreateWithoutAccountsInput> = z.object({
  tile_layer_id: z.string(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutTile_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTile_layersInputSchema)
}).strict();

export const Tile_layersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateWithoutAccountsInput> = z.object({
  tile_layer_id: z.string(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutTile_layersInputSchema).optional()
}).strict();

export const Tile_layersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Tile_layersCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Tile_layersCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Tile_layersCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Ui_optionsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateWithoutAccountsInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUi_optionsInputSchema)
}).strict();

export const Ui_optionsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateWithoutAccountsInput> = z.object({
  user_id: z.string(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Ui_optionsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Ui_optionsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UnitsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsCreateWithoutAccountsInput> = z.object({
  unit_id: z.string(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutUnitsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateWithoutAccountsInput> = z.object({
  unit_id: z.string(),
  project_id: z.string().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UnitsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.UnitsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => UnitsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const User_messagesCreateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutAccountsInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutAccountsInput> = z.object({
  user_message_id: z.string(),
  user_id: z.string().optional().nullable(),
  message_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layer_displaysCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateWithoutAccountsInput> = z.object({
  vector_layer_display_id: z.string(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutVector_layer_displaysInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedCreateWithoutAccountsInput> = z.object({
  vector_layer_display_id: z.string(),
  vector_layer_id: z.string().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_displaysCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_displaysCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layer_displaysCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layer_geomsCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateWithoutAccountsInput> = z.object({
  vector_layer_geom_id: z.string(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().optional().nullable(),
  bbox_sw_lat: z.number().optional().nullable(),
  bbox_ne_lng: z.number().optional().nullable(),
  bbox_ne_lat: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutVector_layer_geomsInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedCreateWithoutAccountsInput> = z.object({
  vector_layer_geom_id: z.string(),
  vector_layer_id: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().optional().nullable(),
  bbox_sw_lat: z.number().optional().nullable(),
  bbox_ne_lng: z.number().optional().nullable(),
  bbox_ne_lat: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_geomsCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layer_geomsCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layersCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersCreateWithoutAccountsInput> = z.object({
  vector_layer_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutVector_layersInputSchema)
}).strict();

export const Vector_layersUncheckedCreateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateWithoutAccountsInput> = z.object({
  vector_layer_id: z.string(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersCreateOrConnectWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersCreateOrConnectWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layersCreateManyAccountsInputEnvelopeSchema: z.ZodType<Prisma.Vector_layersCreateManyAccountsInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layersCreateManyAccountsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UsersUpsertWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutAccountsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutAccountsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutAccountsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Chart_subjectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateManyMutationInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChart_subjectsInputSchema) ]),
}).strict();

export const Chart_subjectsScalarWhereInputSchema: z.ZodType<Prisma.Chart_subjectsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Chart_subjectsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Chart_subjectsScalarWhereInputSchema),z.lazy(() => Chart_subjectsScalarWhereInputSchema).array() ]).optional(),
  chart_subject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  chart_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => Enumchart_subject_tableNullableFilterSchema),z.lazy(() => chart_subject_tableSchema) ]).optional().nullable(),
  table_level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  table_filter: z.lazy(() => JsonNullableFilterSchema).optional(),
  value_source: z.union([ z.lazy(() => Enumchart_subject_value_sourceNullableFilterSchema),z.lazy(() => chart_subject_value_sourceSchema) ]).optional().nullable(),
  value_field: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  value_unit: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumchart_subject_typeNullableFilterSchema),z.lazy(() => chart_subject_typeSchema) ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill_graded: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  connect_nulls: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ChartsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChartsUpdateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ChartsCreateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ChartsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateWithoutAccountsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ChartsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ChartsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateManyMutationInputSchema),z.lazy(() => ChartsUncheckedUpdateManyWithoutChartsInputSchema) ]),
}).strict();

export const ChartsScalarWhereInputSchema: z.ZodType<Prisma.ChartsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ChartsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ChartsScalarWhereInputSchema),z.lazy(() => ChartsScalarWhereInputSchema).array() ]).optional(),
  chart_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  years_current: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  years_previous: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  years_specific: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_last_x: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_since: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  years_until: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => Enumchart_typeNullableFilterSchema),z.lazy(() => chart_typeSchema) ]).optional().nullable(),
  title: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subjects_stacked: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  subjects_single: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  percent: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const FieldsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldsUpdateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => FieldsCreateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const FieldsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateWithoutAccountsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const FieldsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => FieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateManyMutationInputSchema),z.lazy(() => FieldsUncheckedUpdateManyWithoutFieldsInputSchema) ]),
}).strict();

export const FieldsScalarWhereInputSchema: z.ZodType<Prisma.FieldsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => FieldsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => FieldsScalarWhereInputSchema),z.lazy(() => FieldsScalarWhereInputSchema).array() ]).optional(),
  field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  field_label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  preset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsScalarWhereInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema).array() ]).optional(),
  gbif_occurrence_download_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => Enumgbif_tableNullableFilterSchema),z.lazy(() => gbif_tableSchema) ]).optional().nullable(),
  filters: z.lazy(() => JsonNullableFilterSchema).optional(),
  created_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  download_key: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  error: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  inserted_time: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  inserted_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  attribution: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const Gbif_occurrencesScalarWhereInputSchema: z.ZodType<Prisma.Gbif_occurrencesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),z.lazy(() => Gbif_occurrencesScalarWhereInputSchema).array() ]).optional(),
  gbif_occurrence_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Gbif_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateManyMutationInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema) ]),
}).strict();

export const Gbif_taxaScalarWhereInputSchema: z.ZodType<Prisma.Gbif_taxaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Gbif_taxaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Gbif_taxaScalarWhereInputSchema),z.lazy(() => Gbif_taxaScalarWhereInputSchema).array() ]).optional(),
  gbif_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  gbif_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutAccountsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateManyMutationInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const Goal_report_valuesScalarWhereInputSchema: z.ZodType<Prisma.Goal_report_valuesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_report_valuesScalarWhereInputSchema),z.lazy(() => Goal_report_valuesScalarWhereInputSchema).array() ]).optional(),
  goal_report_value_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_report_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  unit_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  value_integer: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  value_numeric: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  value_text: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Goal_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Goal_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Goal_reportsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Goal_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Goal_reportsUpdateManyMutationInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutGoal_reportsInputSchema) ]),
}).strict();

export const Goal_reportsScalarWhereInputSchema: z.ZodType<Prisma.Goal_reportsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Goal_reportsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Goal_reportsScalarWhereInputSchema),z.lazy(() => Goal_reportsScalarWhereInputSchema).array() ]).optional(),
  goal_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const GoalsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GoalsUpdateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => GoalsCreateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const GoalsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GoalsUpdateWithoutAccountsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const GoalsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => GoalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GoalsUpdateManyMutationInputSchema),z.lazy(() => GoalsUncheckedUpdateManyWithoutGoalsInputSchema) ]),
}).strict();

export const GoalsScalarWhereInputSchema: z.ZodType<Prisma.GoalsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => GoalsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => GoalsScalarWhereInputSchema),z.lazy(() => GoalsScalarWhereInputSchema).array() ]).optional(),
  goal_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Layer_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Layer_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Layer_optionsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Layer_optionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateManyMutationInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Layer_optionsScalarWhereInputSchema: z.ZodType<Prisma.Layer_optionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Layer_optionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Layer_optionsScalarWhereInputSchema),z.lazy(() => Layer_optionsScalarWhereInputSchema).array() ]).optional(),
  layer_option_id: z.union([ z.lazy(() => StringFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  tile_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  field: z.union([ z.lazy(() => Enumlayer_options_field_enumNullableFilterSchema),z.lazy(() => layer_options_field_enumSchema) ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  queryable: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  legend_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const List_valuesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => List_valuesUpdateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => List_valuesCreateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const List_valuesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => List_valuesUpdateWithoutAccountsInputSchema),z.lazy(() => List_valuesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const List_valuesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => List_valuesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => List_valuesUpdateManyMutationInputSchema),z.lazy(() => List_valuesUncheckedUpdateManyWithoutList_valuesInputSchema) ]),
}).strict();

export const List_valuesScalarWhereInputSchema: z.ZodType<Prisma.List_valuesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => List_valuesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => List_valuesScalarWhereInputSchema),z.lazy(() => List_valuesScalarWhereInputSchema).array() ]).optional(),
  list_value_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ListsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListsUpdateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateWithoutAccountsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ListsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ListsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateManyMutationInputSchema),z.lazy(() => ListsUncheckedUpdateManyWithoutListsInputSchema) ]),
}).strict();

export const ListsScalarWhereInputSchema: z.ZodType<Prisma.ListsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ListsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ListsScalarWhereInputSchema),z.lazy(() => ListsScalarWhereInputSchema).array() ]).optional(),
  list_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutAccountsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Observation_sourcesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Observation_sourcesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Observation_sourcesUpdateManyMutationInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const Observation_sourcesScalarWhereInputSchema: z.ZodType<Prisma.Observation_sourcesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Observation_sourcesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Observation_sourcesScalarWhereInputSchema),z.lazy(() => Observation_sourcesScalarWhereInputSchema).array() ]).optional(),
  observation_source_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ObservationsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ObservationsUpdateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ObservationsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateWithoutAccountsInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ObservationsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ObservationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateManyMutationInputSchema),z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservationsInputSchema) ]),
}).strict();

export const ObservationsScalarWhereInputSchema: z.ZodType<Prisma.ObservationsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ObservationsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ObservationsScalarWhereInputSchema),z.lazy(() => ObservationsScalarWhereInputSchema).array() ]).optional(),
  observation_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  observation_source_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  place_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  observation_data: z.lazy(() => JsonNullableFilterSchema).optional(),
  date: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  author: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const PersonsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PersonsUpdateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => PersonsCreateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateWithoutAccountsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const PersonsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => PersonsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateManyMutationInputSchema),z.lazy(() => PersonsUncheckedUpdateManyWithoutPersonsInputSchema) ]),
}).strict();

export const PersonsScalarWhereInputSchema: z.ZodType<Prisma.PersonsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PersonsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PersonsScalarWhereInputSchema),z.lazy(() => PersonsScalarWhereInputSchema).array() ]).optional(),
  person_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  email: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Place_levelsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateWithoutAccountsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Place_levelsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Place_levelsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateManyMutationInputSchema),z.lazy(() => Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema) ]),
}).strict();

export const Place_levelsScalarWhereInputSchema: z.ZodType<Prisma.Place_levelsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Place_levelsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Place_levelsScalarWhereInputSchema),z.lazy(() => Place_levelsScalarWhereInputSchema).array() ]).optional(),
  place_level_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  name_short: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  action_reports: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  observations: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const PlacesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const PlacesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateWithoutAccountsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const PlacesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => PlacesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateManyMutationInputSchema),z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesInputSchema) ]),
}).strict();

export const PlacesScalarWhereInputSchema: z.ZodType<Prisma.PlacesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => PlacesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => PlacesScalarWhereInputSchema),z.lazy(() => PlacesScalarWhereInputSchema).array() ]).optional(),
  place_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  parent_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  level: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  since: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  until: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  bbox: z.lazy(() => JsonNullableFilterSchema).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Project_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_reportsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_reportsUpdateManyMutationInputSchema),z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProject_reportsInputSchema) ]),
}).strict();

export const Project_reportsScalarWhereInputSchema: z.ZodType<Prisma.Project_reportsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_reportsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_reportsScalarWhereInputSchema),z.lazy(() => Project_reportsScalarWhereInputSchema).array() ]).optional(),
  project_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const Project_usersScalarWhereInputSchema: z.ZodType<Prisma.Project_usersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Project_usersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Project_usersScalarWhereInputSchema),z.lazy(() => Project_usersScalarWhereInputSchema).array() ]).optional(),
  project_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const ProjectsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ProjectsUpdateWithoutAccountsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const ProjectsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => ProjectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ProjectsUpdateManyMutationInputSchema),z.lazy(() => ProjectsUncheckedUpdateManyWithoutProjectsInputSchema) ]),
}).strict();

export const ProjectsScalarWhereInputSchema: z.ZodType<Prisma.ProjectsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => ProjectsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => ProjectsScalarWhereInputSchema),z.lazy(() => ProjectsScalarWhereInputSchema).array() ]).optional(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumproject_typeNullableFilterSchema),z.lazy(() => project_typeSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_name_plural: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  places_order_by: z.lazy(() => JsonNullableFilterSchema).optional(),
  persons_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  persons_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  files_offline: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_projects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_subprojects: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_places: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_actions: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  files_active_checks: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_reportsUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_reportsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_reportsUpdateManyMutationInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const Subproject_reportsScalarWhereInputSchema: z.ZodType<Prisma.Subproject_reportsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_reportsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_reportsScalarWhereInputSchema),z.lazy(() => Subproject_reportsScalarWhereInputSchema).array() ]).optional(),
  subproject_report_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateManyMutationInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const Subproject_taxaScalarWhereInputSchema: z.ZodType<Prisma.Subproject_taxaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_taxaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_taxaScalarWhereInputSchema),z.lazy(() => Subproject_taxaScalarWhereInputSchema).array() ]).optional(),
  subproject_taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxon_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Subproject_usersUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_usersUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateWithoutAccountsInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Subproject_usersUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Subproject_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateManyMutationInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubproject_usersInputSchema) ]),
}).strict();

export const Subproject_usersScalarWhereInputSchema: z.ZodType<Prisma.Subproject_usersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Subproject_usersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Subproject_usersScalarWhereInputSchema),z.lazy(() => Subproject_usersScalarWhereInputSchema).array() ]).optional(),
  subproject_user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  subproject_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  role: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const SubprojectsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateWithoutAccountsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const SubprojectsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => SubprojectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateManyMutationInputSchema),z.lazy(() => SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema) ]),
}).strict();

export const SubprojectsScalarWhereInputSchema: z.ZodType<Prisma.SubprojectsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => SubprojectsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => SubprojectsScalarWhereInputSchema),z.lazy(() => SubprojectsScalarWhereInputSchema).array() ]).optional(),
  subproject_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  start_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  end_year: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxaUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxaUpdateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxaCreateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateWithoutAccountsInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxaUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateManyMutationInputSchema),z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxaInputSchema) ]),
}).strict();

export const TaxaScalarWhereInputSchema: z.ZodType<Prisma.TaxaScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxaScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxaScalarWhereInputSchema),z.lazy(() => TaxaScalarWhereInputSchema).array() ]).optional(),
  taxon_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  taxonomy_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  id_in_source: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const TaxonomiesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateWithoutAccountsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => TaxonomiesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateManyMutationInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxonomiesScalarWhereInputSchema: z.ZodType<Prisma.TaxonomiesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => TaxonomiesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => TaxonomiesScalarWhereInputSchema),z.lazy(() => TaxonomiesScalarWhereInputSchema).array() ]).optional(),
  taxonomy_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtaxonomy_typeNullableFilterSchema),z.lazy(() => taxonomy_typeSchema) ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  obsolete: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  data: z.lazy(() => JsonNullableFilterSchema).optional(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Tile_layersUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Tile_layersUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Tile_layersUpdateWithoutAccountsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Tile_layersUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Tile_layersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Tile_layersUpdateManyMutationInputSchema),z.lazy(() => Tile_layersUncheckedUpdateManyWithoutTile_layersInputSchema) ]),
}).strict();

export const Tile_layersScalarWhereInputSchema: z.ZodType<Prisma.Tile_layersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Tile_layersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Tile_layersScalarWhereInputSchema),z.lazy(() => Tile_layersScalarWhereInputSchema).array() ]).optional(),
  tile_layer_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumtile_layer_type_enumNullableFilterSchema),z.lazy(() => tile_layer_type_enumSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wmts_subdomains: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_base_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wms_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_layer: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_parameters: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_styles: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_transparent: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  wms_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wms_info_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  wms_legend: z.lazy(() => JsonNullableFilterSchema).optional(),
  max_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  grayscale: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  local_data_size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  local_data_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Ui_optionsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Ui_optionsUpdateWithoutAccountsInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Ui_optionsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Ui_optionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Ui_optionsUpdateManyMutationInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutUi_optionsInputSchema) ]),
}).strict();

export const Ui_optionsScalarWhereInputSchema: z.ZodType<Prisma.Ui_optionsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Ui_optionsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Ui_optionsScalarWhereInputSchema),z.lazy(() => Ui_optionsScalarWhereInputSchema).array() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  designing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  navs_overflowing: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  tabs: z.lazy(() => JsonNullableFilterSchema).optional(),
  show_map: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  map_bounds: z.lazy(() => JsonNullableFilterSchema).optional(),
  local_map_show: z.lazy(() => JsonNullableFilterSchema).optional(),
  tile_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_place_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_check_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  editing_action_geometry: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const UnitsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UnitsUpdateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => UnitsCreateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const UnitsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateWithoutAccountsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const UnitsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => UnitsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateManyMutationInputSchema),z.lazy(() => UnitsUncheckedUpdateManyWithoutUnitsInputSchema) ]),
}).strict();

export const UnitsScalarWhereInputSchema: z.ZodType<Prisma.UnitsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => UnitsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => UnitsScalarWhereInputSchema),z.lazy(() => UnitsScalarWhereInputSchema).array() ]).optional(),
  unit_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  use_for_action_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  name: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  summable: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumunit_typeNullableFilterSchema),z.lazy(() => unit_typeSchema) ]).optional().nullable(),
  list_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutAccountsInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const User_messagesScalarWhereInputSchema: z.ZodType<Prisma.User_messagesScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => User_messagesScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => User_messagesScalarWhereInputSchema),z.lazy(() => User_messagesScalarWhereInputSchema).array() ]).optional(),
  user_message_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  message_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  read: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyMutationInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const Vector_layer_displaysScalarWhereInputSchema: z.ZodType<Prisma.Vector_layer_displaysScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),z.lazy(() => Vector_layer_displaysScalarWhereInputSchema).array() ]).optional(),
  vector_layer_display_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  display_property_value: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => Enummarker_type_enumNullableFilterSchema),z.lazy(() => marker_type_enumSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  marker_symbol: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  marker_size: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  stroke: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  weight: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => Enumline_cap_enumNullableFilterSchema),z.lazy(() => line_cap_enumSchema) ]).optional().nullable(),
  line_join: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dash_array: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  dash_offset: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  fill_color: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => Enumfill_rule_enumNullableFilterSchema),z.lazy(() => fill_rule_enumSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyMutationInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const Vector_layer_geomsScalarWhereInputSchema: z.ZodType<Prisma.Vector_layer_geomsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),z.lazy(() => Vector_layer_geomsScalarWhereInputSchema).array() ]).optional(),
  vector_layer_geom_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  vector_layer_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  geometry: z.lazy(() => JsonNullableFilterSchema).optional(),
  properties: z.lazy(() => JsonNullableFilterSchema).optional(),
  bbox_sw_lng: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.lazy(() => FloatNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const Vector_layersUpsertWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUpsertWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutAccountsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layersUpdateWithWhereUniqueWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithWhereUniqueWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layersUpdateWithoutAccountsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutAccountsInputSchema) ]),
}).strict();

export const Vector_layersUpdateManyWithWhereWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUpdateManyWithWhereWithoutAccountsInput> = z.object({
  where: z.lazy(() => Vector_layersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layersUpdateManyMutationInputSchema),z.lazy(() => Vector_layersUncheckedUpdateManyWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layersScalarWhereInputSchema: z.ZodType<Prisma.Vector_layersScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Vector_layersScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Vector_layersScalarWhereInputSchema),z.lazy(() => Vector_layersScalarWhereInputSchema).array() ]).optional(),
  vector_layer_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  project_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => Enumvector_layer_type_enumNullableFilterSchema),z.lazy(() => vector_layer_type_enumSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  sort: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  active: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
  max_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  min_zoom: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  max_features: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  wfs_url: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wfs_layer: z.lazy(() => JsonNullableFilterSchema).optional(),
  wfs_version: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  wfs_output_format: z.lazy(() => JsonNullableFilterSchema).optional(),
  feature_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  point_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  line_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  polygon_count: z.union([ z.lazy(() => IntNullableFilterSchema),z.number() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const AccountsCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutChart_subjectsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutChart_subjectsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutChart_subjectsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const ChartsCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsCreateWithoutChart_subjectsInput> = z.object({
  chart_id: z.string(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChartsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutChartsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutChartsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateWithoutChart_subjectsInput> = z.object({
  chart_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsCreateOrConnectWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsCreateOrConnectWithoutChart_subjectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChartsCreateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const UnitsCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsCreateWithoutChart_subjectsInput> = z.object({
  unit_id: z.string(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUnitsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutUnitsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateWithoutChart_subjectsInput> = z.object({
  unit_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsCreateOrConnectWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsCreateOrConnectWithoutChart_subjectsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UnitsCreateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutChart_subjectsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutChart_subjectsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutChart_subjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutChart_subjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutChart_subjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ChartsUpsertWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsUpsertWithoutChart_subjectsInput> = z.object({
  update: z.union([ z.lazy(() => ChartsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutChart_subjectsInputSchema) ]),
  create: z.union([ z.lazy(() => ChartsCreateWithoutChart_subjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const ChartsUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsUpdateWithoutChart_subjectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChartsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutChartsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutChartsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateWithoutChart_subjectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsUpsertWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsUpsertWithoutChart_subjectsInput> = z.object({
  update: z.union([ z.lazy(() => UnitsUpdateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutChart_subjectsInputSchema) ]),
  create: z.union([ z.lazy(() => UnitsCreateWithoutChart_subjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutChart_subjectsInputSchema) ]),
}).strict();

export const UnitsUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsUpdateWithoutChart_subjectsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateWithoutChart_subjectsInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateWithoutChart_subjectsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const Chart_subjectsCreateWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateWithoutChartsInput> = z.object({
  chart_subject_id: z.string(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChart_subjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutChart_subjectsInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateWithoutChartsInput> = z.object({
  chart_subject_id: z.string(),
  account_id: z.string().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsCreateOrConnectWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateOrConnectWithoutChartsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const Chart_subjectsCreateManyChartsInputEnvelopeSchema: z.ZodType<Prisma.Chart_subjectsCreateManyChartsInputEnvelope> = z.object({
  data: z.lazy(() => Chart_subjectsCreateManyChartsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutChartsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutChartsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutChartsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutChartsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutChartsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutChartsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const PlacesCreateWithoutChartsInputSchema: z.ZodType<Prisma.PlacesCreateWithoutChartsInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutChartsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutChartsInput> = z.object({
  place_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  parent_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutChartsInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutChartsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutChartsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutChartsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutChartsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutChartsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutChartsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutChartsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const Chart_subjectsUpsertWithWhereUniqueWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUpsertWithWhereUniqueWithoutChartsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutChartsInputSchema) ]),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateWithWhereUniqueWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithWhereUniqueWithoutChartsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutChartsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutChartsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateManyWithWhereWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithWhereWithoutChartsInput> = z.object({
  where: z.lazy(() => Chart_subjectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateManyMutationInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChart_subjectsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutChartsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutChartsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutChartsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutChartsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutChartsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutChartsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutChartsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutChartsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const PlacesUpsertWithoutChartsInputSchema: z.ZodType<Prisma.PlacesUpsertWithoutChartsInput> = z.object({
  update: z.union([ z.lazy(() => PlacesUpdateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutChartsInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutChartsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const PlacesUpdateWithoutChartsInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutChartsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutChartsInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutChartsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutChartsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutChartsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutChartsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutChartsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutChartsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutChartsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutChartsInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutChartsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutChartsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutChartsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutChartsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutChartsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutChartsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const FieldsCreateWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsCreateWithoutField_typesInput> = z.object({
  field_id: z.string(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutFieldsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutFieldsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutFieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateWithoutField_typesInput> = z.object({
  field_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  widget_type_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateOrConnectWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsCreateOrConnectWithoutField_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const FieldsCreateManyField_typesInputEnvelopeSchema: z.ZodType<Prisma.FieldsCreateManyField_typesInputEnvelope> = z.object({
  data: z.lazy(() => FieldsCreateManyField_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Widgets_for_fieldsCreateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.string(),
  widget_type_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateOrConnectWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateOrConnectWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsCreateManyField_typesInputEnvelopeSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyField_typesInputEnvelope> = z.object({
  data: z.lazy(() => Widgets_for_fieldsCreateManyField_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldsUpsertWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUpsertWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldsUpdateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
  create: z.union([ z.lazy(() => FieldsCreateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const FieldsUpdateWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUpdateWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateWithoutField_typesInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
}).strict();

export const FieldsUpdateManyWithWhereWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithWhereWithoutField_typesInput> = z.object({
  where: z.lazy(() => FieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateManyMutationInputSchema),z.lazy(() => FieldsUncheckedUpdateManyWithoutFieldsInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithWhereUniqueWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutField_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithWhereWithoutField_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyMutationInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widgets_for_fieldsScalarWhereInputSchema: z.ZodType<Prisma.Widgets_for_fieldsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema).array() ]).optional(),
  widget_for_field_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  field_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  widget_type_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  deleted: z.union([ z.lazy(() => BoolNullableFilterSchema),z.boolean() ]).optional().nullable(),
}).strict();

export const AccountsCreateWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutFieldsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutFieldsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutFieldsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const Field_typesCreateWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesCreateWithoutFieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUncheckedCreateWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedCreateWithoutFieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesCreateOrConnectWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesCreateOrConnectWithoutFieldsInput> = z.object({
  where: z.lazy(() => Field_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const ListsCreateWithoutFieldsInputSchema: z.ZodType<Prisma.ListsCreateWithoutFieldsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutListsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutFieldsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutFieldsInput> = z.object({
  list_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsCreateOrConnectWithoutFieldsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutFieldsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutFieldsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutFieldsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutFieldsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const Widget_typesCreateWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateWithoutFieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUncheckedCreateWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedCreateWithoutFieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesCreateOrConnectWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateOrConnectWithoutFieldsInput> = z.object({
  where: z.lazy(() => Widget_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutFieldsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutFieldsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutFieldsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutFieldsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Field_typesUpsertWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesUpsertWithoutFieldsInput> = z.object({
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutFieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const Field_typesUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesUpdateWithoutFieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesUncheckedUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateWithoutFieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const ListsUpsertWithoutFieldsInputSchema: z.ZodType<Prisma.ListsUpsertWithoutFieldsInput> = z.object({
  update: z.union([ z.lazy(() => ListsUpdateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutFieldsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const ListsUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutFieldsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutListsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutFieldsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutFieldsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutFieldsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutFieldsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutFieldsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const Widget_typesUpsertWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesUpsertWithoutFieldsInput> = z.object({
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutFieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutFieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutFieldsInputSchema) ]),
}).strict();

export const Widget_typesUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesUpdateWithoutFieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesUncheckedUpdateWithoutFieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateWithoutFieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widgets_for_fields: z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutGbif_occurrence_downloadsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutGbif_occurrence_downloadsInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrence_downloadsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutGbif_occurrence_downloadsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutGbif_occurrencesInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutGbif_occurrencesInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGbif_occurrencesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutGbif_occurrencesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGbif_taxaInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGbif_taxaInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGbif_taxaInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutGbif_taxaInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutGbif_taxaInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutGbif_taxaInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGbif_taxaInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGbif_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGbif_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGbif_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGbif_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutGbif_taxaInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutGbif_taxaInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutGbif_taxaInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutGbif_taxaInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutGbif_taxaInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGoal_report_valuesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGoal_report_valuesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGoal_report_valuesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const Goal_reportsCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsCreateWithoutGoal_report_valuesInput> = z.object({
  goal_report_id: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_reportsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedOneWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateWithoutGoal_report_valuesInput> = z.object({
  goal_report_id: z.string(),
  account_id: z.string().optional().nullable(),
  goal_id: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_reportsCreateOrConnectWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsCreateOrConnectWithoutGoal_report_valuesInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const UnitsCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsCreateWithoutGoal_report_valuesInput> = z.object({
  unit_id: z.string(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutUnitsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUnitsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutUnitsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateWithoutGoal_report_valuesInput> = z.object({
  unit_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsCreateOrConnectWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsCreateOrConnectWithoutGoal_report_valuesInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UnitsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGoal_report_valuesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGoal_report_valuesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGoal_report_valuesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUpsertWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsUpsertWithoutGoal_report_valuesInput> = z.object({
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const Goal_reportsUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsUpdateWithoutGoal_report_valuesInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_reportsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateOneWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateWithoutGoal_report_valuesInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsUpsertWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsUpsertWithoutGoal_report_valuesInput> = z.object({
  update: z.union([ z.lazy(() => UnitsUpdateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutGoal_report_valuesInputSchema) ]),
  create: z.union([ z.lazy(() => UnitsCreateWithoutGoal_report_valuesInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const UnitsUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsUpdateWithoutGoal_report_valuesInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateWithoutGoal_report_valuesInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const Goal_report_valuesCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateWithoutGoal_reportsInput> = z.object({
  goal_report_value_id: z.string(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateWithoutGoal_reportsInput> = z.object({
  goal_report_value_id: z.string(),
  account_id: z.string().optional().nullable(),
  unit_id: z.string().optional().nullable(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesCreateOrConnectWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateOrConnectWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const Goal_report_valuesCreateManyGoal_reportsInputEnvelopeSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyGoal_reportsInputEnvelope> = z.object({
  data: z.lazy(() => Goal_report_valuesCreateManyGoal_reportsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGoal_reportsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGoal_reportsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const GoalsCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsCreateWithoutGoal_reportsInput> = z.object({
  goal_id: z.string(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoalsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsUncheckedCreateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateWithoutGoal_reportsInput> = z.object({
  goal_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const GoalsCreateOrConnectWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsCreateOrConnectWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GoalsCreateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpsertWithWhereUniqueWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutGoal_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithWhereUniqueWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutGoal_reportsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithWhereWithoutGoal_reportsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateManyMutationInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGoal_reportsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoal_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoal_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGoal_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGoal_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const GoalsUpsertWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsUpsertWithoutGoal_reportsInput> = z.object({
  update: z.union([ z.lazy(() => GoalsUpdateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutGoal_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => GoalsCreateWithoutGoal_reportsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutGoal_reportsInputSchema) ]),
}).strict();

export const GoalsUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsUpdateWithoutGoal_reportsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoalsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsUncheckedUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateWithoutGoal_reportsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsCreateWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsCreateWithoutGoalsInput> = z.object({
  goal_report_id: z.string(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutGoal_reportsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedCreateWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedCreateWithoutGoalsInput> = z.object({
  goal_report_id: z.string(),
  account_id: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutGoal_reportsInputSchema).optional()
}).strict();

export const Goal_reportsCreateOrConnectWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsCreateOrConnectWithoutGoalsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const Goal_reportsCreateManyGoalsInputEnvelopeSchema: z.ZodType<Prisma.Goal_reportsCreateManyGoalsInputEnvelope> = z.object({
  data: z.lazy(() => Goal_reportsCreateManyGoalsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutGoalsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutGoalsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutGoalsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutGoalsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutGoalsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutGoalsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const Goal_reportsUpsertWithWhereUniqueWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUpsertWithWhereUniqueWithoutGoalsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Goal_reportsUpdateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutGoalsInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_reportsCreateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const Goal_reportsUpdateWithWhereUniqueWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateWithWhereUniqueWithoutGoalsInput> = z.object({
  where: z.lazy(() => Goal_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Goal_reportsUpdateWithoutGoalsInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateWithoutGoalsInputSchema) ]),
}).strict();

export const Goal_reportsUpdateManyWithWhereWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateManyWithWhereWithoutGoalsInput> = z.object({
  where: z.lazy(() => Goal_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Goal_reportsUpdateManyMutationInputSchema),z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutGoal_reportsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutGoalsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutGoalsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutGoalsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutGoalsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutGoalsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutGoalsInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutGoalsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutGoalsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutGoalsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutGoalsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutGoalsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutLayer_optionsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutLayer_optionsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutLayer_optionsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Tile_layersCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersCreateWithoutLayer_optionsInput> = z.object({
  tile_layer_id: z.string(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTile_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTile_layersInputSchema)
}).strict();

export const Tile_layersUncheckedCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateWithoutLayer_optionsInput> = z.object({
  tile_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Tile_layersCreateOrConnectWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersCreateOrConnectWithoutLayer_optionsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Vector_layersCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersCreateWithoutLayer_optionsInput> = z.object({
  vector_layer_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutVector_layersInputSchema)
}).strict();

export const Vector_layersUncheckedCreateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateWithoutLayer_optionsInput> = z.object({
  vector_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersCreateOrConnectWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersCreateOrConnectWithoutLayer_optionsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutLayer_optionsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutLayer_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutLayer_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutLayer_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutLayer_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Tile_layersUpsertWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersUpsertWithoutLayer_optionsInput> = z.object({
  update: z.union([ z.lazy(() => Tile_layersUpdateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutLayer_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Tile_layersUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersUpdateWithoutLayer_optionsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTile_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersUncheckedUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateWithoutLayer_optionsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layersUpsertWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersUpsertWithoutLayer_optionsInput> = z.object({
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutLayer_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutLayer_optionsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Vector_layersUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithoutLayer_optionsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateWithoutLayer_optionsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutList_valuesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutList_valuesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutList_valuesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutList_valuesInputSchema) ]),
}).strict();

export const ListsCreateWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsCreateWithoutList_valuesInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutListsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutList_valuesInput> = z.object({
  list_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsCreateOrConnectWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutList_valuesInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedCreateWithoutList_valuesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutList_valuesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutList_valuesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutList_valuesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutList_valuesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutList_valuesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutList_valuesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutList_valuesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ListsUpsertWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsUpsertWithoutList_valuesInput> = z.object({
  update: z.union([ z.lazy(() => ListsUpdateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutList_valuesInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutList_valuesInputSchema),z.lazy(() => ListsUncheckedCreateWithoutList_valuesInputSchema) ]),
}).strict();

export const ListsUpdateWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsUpdateWithoutList_valuesInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutListsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutList_valuesInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutList_valuesInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const FieldsCreateWithoutListsInputSchema: z.ZodType<Prisma.FieldsCreateWithoutListsInput> = z.object({
  field_id: z.string(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutFieldsInputSchema).optional(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutFieldsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutFieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateWithoutListsInput> = z.object({
  field_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  field_type_id: z.string().optional().nullable(),
  widget_type_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.FieldsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const FieldsCreateManyListsInputEnvelopeSchema: z.ZodType<Prisma.FieldsCreateManyListsInputEnvelope> = z.object({
  data: z.lazy(() => FieldsCreateManyListsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const List_valuesCreateWithoutListsInputSchema: z.ZodType<Prisma.List_valuesCreateWithoutListsInput> = z.object({
  list_value_id: z.string(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutList_valuesInputSchema).optional()
}).strict();

export const List_valuesUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUncheckedCreateWithoutListsInput> = z.object({
  list_value_id: z.string(),
  account_id: z.string().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const List_valuesCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.List_valuesCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const List_valuesCreateManyListsInputEnvelopeSchema: z.ZodType<Prisma.List_valuesCreateManyListsInputEnvelope> = z.object({
  data: z.lazy(() => List_valuesCreateManyListsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutListsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutListsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutListsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutListsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const UnitsCreateWithoutListsInputSchema: z.ZodType<Prisma.UnitsCreateWithoutListsInput> = z.object({
  unit_id: z.string(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUnitsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateWithoutListsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateWithoutListsInput> = z.object({
  unit_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsCreateOrConnectWithoutListsInputSchema: z.ZodType<Prisma.UnitsCreateOrConnectWithoutListsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const UnitsCreateManyListsInputEnvelopeSchema: z.ZodType<Prisma.UnitsCreateManyListsInputEnvelope> = z.object({
  data: z.lazy(() => UnitsCreateManyListsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldsUpsertWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.FieldsUpsertWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldsUpdateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => FieldsCreateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const FieldsUpdateWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.FieldsUpdateWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateWithoutListsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutListsInputSchema) ]),
}).strict();

export const FieldsUpdateManyWithWhereWithoutListsInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithWhereWithoutListsInput> = z.object({
  where: z.lazy(() => FieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateManyMutationInputSchema),z.lazy(() => FieldsUncheckedUpdateManyWithoutFieldsInputSchema) ]),
}).strict();

export const List_valuesUpsertWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUpsertWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => List_valuesUpdateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => List_valuesCreateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const List_valuesUpdateWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUpdateWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => List_valuesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => List_valuesUpdateWithoutListsInputSchema),z.lazy(() => List_valuesUncheckedUpdateWithoutListsInputSchema) ]),
}).strict();

export const List_valuesUpdateManyWithWhereWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUpdateManyWithWhereWithoutListsInput> = z.object({
  where: z.lazy(() => List_valuesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => List_valuesUpdateManyMutationInputSchema),z.lazy(() => List_valuesUncheckedUpdateManyWithoutList_valuesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutListsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutListsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutListsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutListsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutListsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutListsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutListsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutListsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutListsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const UnitsUpsertWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.UnitsUpsertWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UnitsUpdateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutListsInputSchema) ]),
  create: z.union([ z.lazy(() => UnitsCreateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutListsInputSchema) ]),
}).strict();

export const UnitsUpdateWithWhereUniqueWithoutListsInputSchema: z.ZodType<Prisma.UnitsUpdateWithWhereUniqueWithoutListsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateWithoutListsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutListsInputSchema) ]),
}).strict();

export const UnitsUpdateManyWithWhereWithoutListsInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithWhereWithoutListsInput> = z.object({
  where: z.lazy(() => UnitsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateManyMutationInputSchema),z.lazy(() => UnitsUncheckedUpdateManyWithoutUnitsInputSchema) ]),
}).strict();

export const User_messagesCreateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutMessagesInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutMessagesInput> = z.object({
  user_message_id: z.string(),
  account_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesCreateManyMessagesInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyMessagesInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyMessagesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutMessagesInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutMessagesInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutMessagesInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutMessagesInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutObservation_sourcesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutObservation_sourcesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutObservation_sourcesInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutObservation_sourcesInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ObservationsCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsCreateWithoutObservation_sourcesInput> = z.object({
  observation_id: z.string(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservationsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutObservationsInputSchema).optional()
}).strict();

export const ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateWithoutObservation_sourcesInput> = z.object({
  observation_id: z.string(),
  account_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsCreateOrConnectWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsCreateOrConnectWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ObservationsCreateManyObservation_sourcesInputEnvelopeSchema: z.ZodType<Prisma.ObservationsCreateManyObservation_sourcesInputEnvelope> = z.object({
  data: z.lazy(() => ObservationsCreateManyObservation_sourcesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsUpsertWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutObservation_sourcesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutObservation_sourcesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutObservation_sourcesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutObservation_sourcesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutObservation_sourcesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutObservation_sourcesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUpsertWithWhereUniqueWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ObservationsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUpdateWithWhereUniqueWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateWithoutObservation_sourcesInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const ObservationsUpdateManyWithWhereWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithWhereWithoutObservation_sourcesInput> = z.object({
  where: z.lazy(() => ObservationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateManyMutationInputSchema),z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservationsInputSchema) ]),
}).strict();

export const AccountsCreateWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutObservationsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutObservationsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutObservationsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const Observation_sourcesCreateWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateWithoutObservationsInput> = z.object({
  observation_source_id: z.string(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservation_sourcesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedCreateWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateWithoutObservationsInput> = z.object({
  observation_source_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Observation_sourcesCreateOrConnectWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateOrConnectWithoutObservationsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const PlacesCreateWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesCreateWithoutObservationsInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutObservationsInput> = z.object({
  place_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  parent_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutObservationsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutObservationsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutObservationsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutObservationsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutObservationsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutObservationsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUpsertWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesUpsertWithoutObservationsInput> = z.object({
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutObservationsInputSchema) ]),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutObservationsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const Observation_sourcesUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateWithoutObservationsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateWithoutObservationsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesUpsertWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesUpsertWithoutObservationsInput> = z.object({
  update: z.union([ z.lazy(() => PlacesUpdateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutObservationsInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutObservationsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutObservationsInputSchema) ]),
}).strict();

export const PlacesUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutObservationsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutObservationsInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutObservationsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutPersonsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutPersonsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutPersonsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutPersonsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutPersonsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutPersonsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutPersonsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPersonsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPersonsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutPersonsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutPersonsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutPersonsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPersonsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPersonsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPersonsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutPersonsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutPersonsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutPersonsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutPlace_levelsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutPlace_levelsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutPlace_levelsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutPlace_levelsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutPlace_levelsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutPlace_levelsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutPlace_levelsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlace_levelsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlace_levelsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutPlace_levelsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutPlace_levelsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutPlace_levelsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutPlace_levelsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutPlace_levelsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutPlace_levelsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutPlace_levelsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutPlace_levelsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ChartsCreateWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsCreateWithoutPlacesInput> = z.object({
  chart_id: z.string(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutChartsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChartsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutChartsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateWithoutPlacesInput> = z.object({
  chart_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema).optional()
}).strict();

export const ChartsCreateOrConnectWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsCreateOrConnectWithoutPlacesInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const ChartsCreateManyPlacesInputEnvelopeSchema: z.ZodType<Prisma.ChartsCreateManyPlacesInputEnvelope> = z.object({
  data: z.lazy(() => ChartsCreateManyPlacesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ObservationsCreateWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsCreateWithoutPlacesInput> = z.object({
  observation_id: z.string(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservationsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedOneWithoutObservationsInputSchema).optional()
}).strict();

export const ObservationsUncheckedCreateWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUncheckedCreateWithoutPlacesInput> = z.object({
  observation_id: z.string(),
  account_id: z.string().optional().nullable(),
  observation_source_id: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsCreateOrConnectWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsCreateOrConnectWithoutPlacesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const ObservationsCreateManyPlacesInputEnvelopeSchema: z.ZodType<Prisma.ObservationsCreateManyPlacesInputEnvelope> = z.object({
  data: z.lazy(() => ObservationsCreateManyPlacesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutPlacesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutPlacesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutPlacesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const PlacesCreateWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesCreateWithoutOther_placesInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutOther_placesInput> = z.object({
  place_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  parent_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutOther_placesInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutOther_placesInputSchema) ]),
}).strict();

export const PlacesCreateWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesCreateWithoutPlacesInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutPlacesInput> = z.object({
  place_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutPlacesInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const PlacesCreateManyPlacesInputEnvelopeSchema: z.ZodType<Prisma.PlacesCreateManyPlacesInputEnvelope> = z.object({
  data: z.lazy(() => PlacesCreateManyPlacesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const SubprojectsCreateWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutPlacesInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutPlacesInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutPlacesInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const ChartsUpsertWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUpsertWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChartsUpdateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutPlacesInputSchema) ]),
  create: z.union([ z.lazy(() => ChartsCreateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const ChartsUpdateWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUpdateWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateWithoutPlacesInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutPlacesInputSchema) ]),
}).strict();

export const ChartsUpdateManyWithWhereWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithWhereWithoutPlacesInput> = z.object({
  where: z.lazy(() => ChartsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateManyMutationInputSchema),z.lazy(() => ChartsUncheckedUpdateManyWithoutChartsInputSchema) ]),
}).strict();

export const ObservationsUpsertWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUpsertWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ObservationsUpdateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutPlacesInputSchema) ]),
  create: z.union([ z.lazy(() => ObservationsCreateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const ObservationsUpdateWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUpdateWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => ObservationsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateWithoutPlacesInputSchema),z.lazy(() => ObservationsUncheckedUpdateWithoutPlacesInputSchema) ]),
}).strict();

export const ObservationsUpdateManyWithWhereWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUpdateManyWithWhereWithoutPlacesInput> = z.object({
  where: z.lazy(() => ObservationsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ObservationsUpdateManyMutationInputSchema),z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservationsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutPlacesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutPlacesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutPlacesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutPlacesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutPlacesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const PlacesUpsertWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesUpsertWithoutOther_placesInput> = z.object({
  update: z.union([ z.lazy(() => PlacesUpdateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutOther_placesInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutOther_placesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutOther_placesInputSchema) ]),
}).strict();

export const PlacesUpdateWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutOther_placesInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutOther_placesInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUpsertWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUpsertWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutPlacesInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const PlacesUpdateWithWhereUniqueWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUpdateWithWhereUniqueWithoutPlacesInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateWithoutPlacesInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutPlacesInputSchema) ]),
}).strict();

export const PlacesUpdateManyWithWhereWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithWhereWithoutPlacesInput> = z.object({
  where: z.lazy(() => PlacesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateManyMutationInputSchema),z.lazy(() => PlacesUncheckedUpdateManyWithoutOther_placesInputSchema) ]),
}).strict();

export const SubprojectsUpsertWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutPlacesInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutPlacesInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutPlacesInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutPlacesInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutPlacesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutPlacesInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutProject_reportsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutProject_reportsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutProject_reportsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_reportsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutProject_reportsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutProject_reportsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutProject_reportsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_reportsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutProject_reportsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_reportsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutProject_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutProject_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutProject_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutProject_reportsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_reportsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_reportsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutProject_reportsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutProject_reportsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutProject_reportsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutProject_usersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutProject_usersInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutProject_usersInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutProject_usersInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const UsersCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutProject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutProject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutProject_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutProject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutProject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutProject_usersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutProject_usersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutProject_usersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutProject_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutProject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutProject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutProject_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutProject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutProject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutProject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ChartsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsCreateWithoutProjectsInput> = z.object({
  chart_id: z.string(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutChartsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChartsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutChartsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateWithoutProjectsInput> = z.object({
  chart_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema).optional()
}).strict();

export const ChartsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ChartsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.ChartsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => ChartsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsCreateWithoutProjectsInput> = z.object({
  field_id: z.string(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutFieldsInputSchema).optional(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutFieldsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutFieldsInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateWithoutProjectsInput> = z.object({
  field_id: z.string(),
  account_id: z.string().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  field_type_id: z.string().optional().nullable(),
  widget_type_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const FieldsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.FieldsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => FieldsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_taxaCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_taxaInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedCreateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_taxaCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_taxaCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ListsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateWithoutProjectsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutListsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutProjectsInput> = z.object({
  list_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.ListsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => ListsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Observation_sourcesCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateWithoutProjectsInput> = z.object({
  observation_source_id: z.string(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutObservation_sourcesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedCreateWithoutProjectsInput> = z.object({
  observation_source_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutObservation_sourcesInputSchema).optional()
}).strict();

export const Observation_sourcesCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Observation_sourcesCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Observation_sourcesCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Observation_sourcesCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PersonsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateWithoutProjectsInput> = z.object({
  person_id: z.string(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPersonsInputSchema).optional()
}).strict();

export const PersonsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedCreateWithoutProjectsInput> = z.object({
  person_id: z.string(),
  account_id: z.string().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.PersonsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => PersonsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Place_levelsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateWithoutProjectsInput> = z.object({
  place_level_id: z.string(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlace_levelsInputSchema).optional()
}).strict();

export const Place_levelsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedCreateWithoutProjectsInput> = z.object({
  place_level_id: z.string(),
  account_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Place_levelsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Place_levelsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_reportsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsCreateWithoutProjectsInput> = z.object({
  project_report_id: z.string(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_reportsInputSchema).optional()
}).strict();

export const Project_reportsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedCreateWithoutProjectsInput> = z.object({
  project_report_id: z.string(),
  account_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_reportsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Project_reportsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Project_reportsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutProjectsInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutProjectsInput> = z.object({
  project_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutProjectsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutProjectsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutProjectsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutProjectsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.SubprojectsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => SubprojectsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const TaxonomiesCreateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutProjectsInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutTaxonomiesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutProjectsInput> = z.object({
  taxonomy_id: z.string(),
  account_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.TaxonomiesCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => TaxonomiesCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Tile_layersCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersCreateWithoutProjectsInput> = z.object({
  tile_layer_id: z.string(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutTile_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTile_layersInputSchema).optional()
}).strict();

export const Tile_layersUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedCreateWithoutProjectsInput> = z.object({
  tile_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutTile_layersInputSchema).optional()
}).strict();

export const Tile_layersCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Tile_layersCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Tile_layersCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Tile_layersCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const UnitsCreateWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsCreateWithoutProjectsInput> = z.object({
  unit_id: z.string(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutUnitsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUnitsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUncheckedCreateWithoutProjectsInput> = z.object({
  unit_id: z.string(),
  account_id: z.string().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutUnitsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutUnitsInputSchema).optional()
}).strict();

export const UnitsCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const UnitsCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.UnitsCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => UnitsCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layersCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersCreateWithoutProjectsInput> = z.object({
  vector_layer_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersUncheckedCreateWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateWithoutProjectsInput> = z.object({
  vector_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersCreateOrConnectWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersCreateOrConnectWithoutProjectsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Vector_layersCreateManyProjectsInputEnvelopeSchema: z.ZodType<Prisma.Vector_layersCreateManyProjectsInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layersCreateManyProjectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const ChartsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChartsUpdateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => ChartsCreateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ChartsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateWithoutProjectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const ChartsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => ChartsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateManyMutationInputSchema),z.lazy(() => ChartsUncheckedUpdateManyWithoutChartsInputSchema) ]),
}).strict();

export const FieldsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldsUpdateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => FieldsCreateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const FieldsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateWithoutProjectsInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const FieldsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => FieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateManyMutationInputSchema),z.lazy(() => FieldsUncheckedUpdateManyWithoutFieldsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_taxaCreateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateWithoutProjectsInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Gbif_taxaUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Gbif_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_taxaUpdateManyMutationInputSchema),z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema) ]),
}).strict();

export const ListsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ListsUpdateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateWithoutProjectsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const ListsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => ListsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ListsUpdateManyMutationInputSchema),z.lazy(() => ListsUncheckedUpdateManyWithoutListsInputSchema) ]),
}).strict();

export const Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Observation_sourcesCreateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Observation_sourcesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Observation_sourcesUpdateWithoutProjectsInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Observation_sourcesUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Observation_sourcesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Observation_sourcesUpdateManyMutationInputSchema),z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutObservation_sourcesInputSchema) ]),
}).strict();

export const PersonsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PersonsUpdateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => PersonsCreateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateWithoutProjectsInputSchema),z.lazy(() => PersonsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const PersonsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => PersonsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PersonsUpdateManyMutationInputSchema),z.lazy(() => PersonsUncheckedUpdateManyWithoutPersonsInputSchema) ]),
}).strict();

export const Place_levelsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Place_levelsUpdateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Place_levelsCreateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateWithoutProjectsInputSchema),z.lazy(() => Place_levelsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Place_levelsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Place_levelsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Place_levelsUpdateManyMutationInputSchema),z.lazy(() => Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema) ]),
}).strict();

export const Project_reportsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_reportsUpdateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_reportsCreateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_reportsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_reportsUpdateWithoutProjectsInputSchema),z.lazy(() => Project_reportsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_reportsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_reportsUpdateManyMutationInputSchema),z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProject_reportsInputSchema) ]),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutProjectsInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutProjectsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutProjectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutProjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutProjectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateWithoutProjectsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const SubprojectsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => SubprojectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => SubprojectsUpdateManyMutationInputSchema),z.lazy(() => SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema) ]),
}).strict();

export const TaxonomiesUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateWithoutProjectsInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const TaxonomiesUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => TaxonomiesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxonomiesUpdateManyMutationInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema) ]),
}).strict();

export const Tile_layersUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Tile_layersUpdateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Tile_layersCreateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Tile_layersUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Tile_layersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Tile_layersUpdateWithoutProjectsInputSchema),z.lazy(() => Tile_layersUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Tile_layersUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Tile_layersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Tile_layersUpdateManyMutationInputSchema),z.lazy(() => Tile_layersUncheckedUpdateManyWithoutTile_layersInputSchema) ]),
}).strict();

export const UnitsUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => UnitsUpdateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => UnitsCreateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const UnitsUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => UnitsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateWithoutProjectsInputSchema),z.lazy(() => UnitsUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const UnitsUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => UnitsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => UnitsUpdateManyMutationInputSchema),z.lazy(() => UnitsUncheckedUpdateManyWithoutUnitsInputSchema) ]),
}).strict();

export const Vector_layersUpsertWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUpsertWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutProjectsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutProjectsInputSchema) ]),
}).strict();

export const Vector_layersUpdateWithWhereUniqueWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithWhereUniqueWithoutProjectsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layersUpdateWithoutProjectsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutProjectsInputSchema) ]),
}).strict();

export const Vector_layersUpdateManyWithWhereWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUpdateManyWithWhereWithoutProjectsInput> = z.object({
  where: z.lazy(() => Vector_layersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layersUpdateManyMutationInputSchema),z.lazy(() => Vector_layersUncheckedUpdateManyWithoutVector_layersInputSchema) ]),
}).strict();

export const AccountsCreateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutSubproject_reportsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutSubproject_reportsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutSubproject_reportsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutSubproject_reportsInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutSubproject_reportsInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutSubproject_reportsInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutSubproject_reportsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutSubproject_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutSubproject_reportsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutSubproject_reportsInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_reportsInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_reportsInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutSubproject_reportsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutSubproject_reportsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsCreateWithoutSubproject_taxaInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutSubproject_taxaInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutSubproject_taxaInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutSubproject_taxaInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutSubproject_taxaInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutSubproject_taxaInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const TaxaCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaCreateWithoutSubproject_taxaInput> = z.object({
  taxon_id: z.string(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxaInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateWithoutSubproject_taxaInput> = z.object({
  taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  taxonomy_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaCreateOrConnectWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaCreateOrConnectWithoutSubproject_taxaInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxaCreateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutSubproject_taxaInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutSubproject_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutSubproject_taxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutSubproject_taxaInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_taxaInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutSubproject_taxaInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutSubproject_taxaInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const TaxaUpsertWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaUpsertWithoutSubproject_taxaInput> = z.object({
  update: z.union([ z.lazy(() => TaxaUpdateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutSubproject_taxaInputSchema) ]),
  create: z.union([ z.lazy(() => TaxaCreateWithoutSubproject_taxaInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const TaxaUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaUpdateWithoutSubproject_taxaInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxaNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateWithoutSubproject_taxaInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxonomy_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountsCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutSubproject_usersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutSubproject_usersInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutSubproject_usersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const SubprojectsCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsCreateWithoutSubproject_usersInput> = z.object({
  subproject_id: z.string(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubprojectsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsUncheckedCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsUncheckedCreateWithoutSubproject_usersInput> = z.object({
  subproject_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().optional().nullable(),
  end_year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutSubprojectsInputSchema).optional()
}).strict();

export const SubprojectsCreateOrConnectWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsCreateOrConnectWithoutSubproject_usersInput> = z.object({
  where: z.lazy(() => SubprojectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const UsersCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersCreateWithoutSubproject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutSubproject_usersInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutSubproject_usersInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutSubproject_usersInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubproject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubproject_usersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutSubproject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutSubproject_usersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const SubprojectsUpsertWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsUpsertWithoutSubproject_usersInput> = z.object({
  update: z.union([ z.lazy(() => SubprojectsUpdateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedUpdateWithoutSubproject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => SubprojectsCreateWithoutSubproject_usersInputSchema),z.lazy(() => SubprojectsUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const SubprojectsUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutSubproject_usersInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutSubproject_usersInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersUpsertWithoutSubproject_usersInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutSubproject_usersInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutSubproject_usersInputSchema),z.lazy(() => UsersUncheckedCreateWithoutSubproject_usersInputSchema) ]),
}).strict();

export const UsersUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersUpdateWithoutSubproject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutSubproject_usersInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutSubproject_usersInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const ChartsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsCreateWithoutSubprojectsInput> = z.object({
  chart_id: z.string(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutChartsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChartsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutChartsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutChartsInputSchema).optional()
}).strict();

export const ChartsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUncheckedCreateWithoutSubprojectsInput> = z.object({
  chart_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  place_id: z.string().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().optional().nullable(),
  years_last_x: z.number().optional().nullable(),
  years_since: z.number().optional().nullable(),
  years_until: z.number().optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutChartsInputSchema).optional()
}).strict();

export const ChartsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ChartsCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.ChartsCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => ChartsCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrence_downloadsInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrence_downloadsCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Gbif_occurrencesCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutGbif_occurrencesInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedCreateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Gbif_occurrencesCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const GoalsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsCreateWithoutSubprojectsInput> = z.object({
  goal_id: z.string(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutGoalsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUncheckedCreateWithoutSubprojectsInput> = z.object({
  goal_id: z.string(),
  account_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutGoalsInputSchema).optional()
}).strict();

export const GoalsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const GoalsCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.GoalsCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => GoalsCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const PlacesCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesCreateWithoutSubprojectsInput> = z.object({
  place_id: z.string(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutPlacesInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutPlacesInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedOneWithoutOther_placesInputSchema).optional(),
  other_places: z.lazy(() => PlacesCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUncheckedCreateWithoutSubprojectsInput> = z.object({
  place_id: z.string(),
  account_id: z.string().optional().nullable(),
  parent_id: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  since: z.number().optional().nullable(),
  until: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutPlacesInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutPlacesInputSchema).optional()
}).strict();

export const PlacesCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const PlacesCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.PlacesCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => PlacesCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_reportsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateWithoutSubprojectsInput> = z.object({
  subproject_report_id: z.string(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_reportsInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedCreateWithoutSubprojectsInput> = z.object({
  subproject_report_id: z.string(),
  account_id: z.string().optional().nullable(),
  year: z.number().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_reportsCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_reportsCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_reportsCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_taxaCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateWithoutSubprojectsInput> = z.object({
  subproject_taxon_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_taxaInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedOneWithoutSubproject_taxaInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateWithoutSubprojectsInput> = z.object({
  subproject_taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  taxon_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_taxaCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_taxaCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_taxaCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_usersCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersCreateWithoutSubprojectsInput> = z.object({
  subproject_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_usersInputSchema).optional(),
  users: z.lazy(() => UsersCreateNestedOneWithoutSubproject_usersInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateWithoutSubprojectsInput> = z.object({
  subproject_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_usersCreateManySubprojectsInputEnvelopeSchema: z.ZodType<Prisma.Subproject_usersCreateManySubprojectsInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_usersCreateManySubprojectsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutSubprojectsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutSubprojectsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutSubprojectsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutSubprojectsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ChartsUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => ChartsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => ChartsCreateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ChartsUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ChartsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ChartsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ChartsUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => ChartsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => ChartsUpdateManyMutationInputSchema),z.lazy(() => ChartsUncheckedUpdateManyWithoutChartsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrence_downloadsCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrence_downloadsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrence_downloadsUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Gbif_occurrencesCreateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateWithoutSubprojectsInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Gbif_occurrencesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Gbif_occurrencesUpdateManyMutationInputSchema),z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema) ]),
}).strict();

export const GoalsUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => GoalsUpdateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => GoalsCreateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const GoalsUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => GoalsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => GoalsUpdateWithoutSubprojectsInputSchema),z.lazy(() => GoalsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const GoalsUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => GoalsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => GoalsUpdateManyMutationInputSchema),z.lazy(() => GoalsUncheckedUpdateManyWithoutGoalsInputSchema) ]),
}).strict();

export const PlacesUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => PlacesUpdateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => PlacesCreateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const PlacesUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => PlacesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateWithoutSubprojectsInputSchema),z.lazy(() => PlacesUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const PlacesUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => PlacesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => PlacesUpdateManyMutationInputSchema),z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesInputSchema) ]),
}).strict();

export const Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_reportsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_reportsCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_reportsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_reportsUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_reportsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_reportsUpdateManyMutationInputSchema),z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubproject_reportsInputSchema) ]),
}).strict();

export const Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateManyMutationInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUpsertWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithWhereUniqueWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateWithoutSubprojectsInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutSubprojectsInputSchema) ]),
}).strict();

export const Subproject_usersUpdateManyWithWhereWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithWhereWithoutSubprojectsInput> = z.object({
  where: z.lazy(() => Subproject_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateManyMutationInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubproject_usersInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutSubprojectsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutSubprojectsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutSubprojectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutSubprojectsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutSubprojectsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutSubprojectsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutSubprojectsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutSubprojectsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const Subproject_taxaCreateWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaCreateWithoutTaxaInput> = z.object({
  subproject_taxon_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_taxaInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_taxaInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedCreateWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedCreateWithoutTaxaInput> = z.object({
  subproject_taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaCreateOrConnectWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaCreateOrConnectWithoutTaxaInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const Subproject_taxaCreateManyTaxaInputEnvelopeSchema: z.ZodType<Prisma.Subproject_taxaCreateManyTaxaInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_taxaCreateManyTaxaInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateWithoutTaxaInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutTaxaInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutTaxaInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const TaxonomiesCreateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateWithoutTaxaInput> = z.object({
  taxonomy_id: z.string(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxonomiesInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutTaxonomiesInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedCreateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedCreateWithoutTaxaInput> = z.object({
  taxonomy_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateOrConnectWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesCreateOrConnectWithoutTaxaInput> = z.object({
  where: z.lazy(() => TaxonomiesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUpsertWithWhereUniqueWithoutTaxaInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutTaxaInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_taxaCreateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithWhereUniqueWithoutTaxaInput> = z.object({
  where: z.lazy(() => Subproject_taxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateWithoutTaxaInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateWithoutTaxaInputSchema) ]),
}).strict();

export const Subproject_taxaUpdateManyWithWhereWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyWithWhereWithoutTaxaInput> = z.object({
  where: z.lazy(() => Subproject_taxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_taxaUpdateManyMutationInputSchema),z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubproject_taxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutTaxaInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxaInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxaInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutTaxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutTaxaInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const TaxonomiesUpsertWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUpsertWithoutTaxaInput> = z.object({
  update: z.union([ z.lazy(() => TaxonomiesUpdateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedUpdateWithoutTaxaInputSchema) ]),
  create: z.union([ z.lazy(() => TaxonomiesCreateWithoutTaxaInputSchema),z.lazy(() => TaxonomiesUncheckedCreateWithoutTaxaInputSchema) ]),
}).strict();

export const TaxonomiesUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutTaxaInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutTaxaInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.string(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutTaxaInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedCreateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutTaxaInputSchema).optional()
}).strict();

export const TaxaCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaCreateManyTaxonomiesInputEnvelopeSchema: z.ZodType<Prisma.TaxaCreateManyTaxonomiesInputEnvelope> = z.object({
  data: z.lazy(() => TaxaCreateManyTaxonomiesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutTaxonomiesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutTaxonomiesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutTaxonomiesInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutTaxonomiesInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpsertWithWhereUniqueWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpsertWithWhereUniqueWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => TaxaUpdateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => TaxaCreateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpdateWithWhereUniqueWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateWithWhereUniqueWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateWithoutTaxonomiesInputSchema),z.lazy(() => TaxaUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const TaxaUpdateManyWithWhereWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateManyWithWhereWithoutTaxonomiesInput> = z.object({
  where: z.lazy(() => TaxaScalarWhereInputSchema),
  data: z.union([ z.lazy(() => TaxaUpdateManyMutationInputSchema),z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxaInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutTaxonomiesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTaxonomiesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutTaxonomiesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutTaxonomiesInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTaxonomiesInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTaxonomiesInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutTaxonomiesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const Layer_optionsCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateWithoutTile_layersInput> = z.object({
  layer_option_id: z.string(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutLayer_optionsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateWithoutTile_layersInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().optional().nullable(),
  vector_layer_id: z.string().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsCreateOrConnectWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateOrConnectWithoutTile_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const Layer_optionsCreateManyTile_layersInputEnvelopeSchema: z.ZodType<Prisma.Layer_optionsCreateManyTile_layersInputEnvelope> = z.object({
  data: z.lazy(() => Layer_optionsCreateManyTile_layersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutTile_layersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutTile_layersInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutTile_layersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutTile_layersInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutTile_layersInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutTile_layersInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpsertWithWhereUniqueWithoutTile_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutTile_layersInputSchema) ]),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithWhereUniqueWithoutTile_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateWithoutTile_layersInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutTile_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpdateManyWithWhereWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithWhereWithoutTile_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateManyMutationInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutLayer_optionsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutTile_layersInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutTile_layersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutTile_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutTile_layersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutTile_layersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutTile_layersInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutTile_layersInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutTile_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutTile_layersInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutTile_layersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutTile_layersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUi_optionsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUi_optionsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUi_optionsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const UsersCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateWithoutUi_optionsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUi_optionsInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUi_optionsInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutUi_optionsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUi_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUi_optionsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUi_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUi_optionsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const UsersUpsertWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUi_optionsInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUi_optionsInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUi_optionsInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUi_optionsInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUi_optionsInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutUsersNestedInputSchema).optional()
}).strict();

export const Chart_subjectsCreateWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateWithoutUnitsInput> = z.object({
  chart_subject_id: z.string(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutChart_subjectsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedOneWithoutChart_subjectsInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedCreateWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedCreateWithoutUnitsInput> = z.object({
  chart_subject_id: z.string(),
  account_id: z.string().optional().nullable(),
  chart_id: z.string().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsCreateOrConnectWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateOrConnectWithoutUnitsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const Chart_subjectsCreateManyUnitsInputEnvelopeSchema: z.ZodType<Prisma.Chart_subjectsCreateManyUnitsInputEnvelope> = z.object({
  data: z.lazy(() => Chart_subjectsCreateManyUnitsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Goal_report_valuesCreateWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateWithoutUnitsInput> = z.object({
  goal_report_value_id: z.string(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedOneWithoutGoal_report_valuesInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedCreateWithoutUnitsInput> = z.object({
  goal_report_value_id: z.string(),
  account_id: z.string().optional().nullable(),
  goal_report_id: z.string().optional().nullable(),
  value_integer: z.number().optional().nullable(),
  value_numeric: z.number().optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesCreateOrConnectWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateOrConnectWithoutUnitsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const Goal_report_valuesCreateManyUnitsInputEnvelopeSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyUnitsInputEnvelope> = z.object({
  data: z.lazy(() => Goal_report_valuesCreateManyUnitsInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUnitsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUnitsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUnitsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const ListsCreateWithoutUnitsInputSchema: z.ZodType<Prisma.ListsCreateWithoutUnitsInput> = z.object({
  list_id: z.string(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutListsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutListsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutListsInputSchema).optional()
}).strict();

export const ListsUncheckedCreateWithoutUnitsInputSchema: z.ZodType<Prisma.ListsUncheckedCreateWithoutUnitsInput> = z.object({
  list_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutListsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutListsInputSchema).optional()
}).strict();

export const ListsCreateOrConnectWithoutUnitsInputSchema: z.ZodType<Prisma.ListsCreateOrConnectWithoutUnitsInput> = z.object({
  where: z.lazy(() => ListsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ListsCreateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutUnitsInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutUnitsInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutUnitsInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUpsertWithWhereUniqueWithoutUnitsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutUnitsInputSchema) ]),
  create: z.union([ z.lazy(() => Chart_subjectsCreateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithWhereUniqueWithoutUnitsInput> = z.object({
  where: z.lazy(() => Chart_subjectsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateWithoutUnitsInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateWithoutUnitsInputSchema) ]),
}).strict();

export const Chart_subjectsUpdateManyWithWhereWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyWithWhereWithoutUnitsInput> = z.object({
  where: z.lazy(() => Chart_subjectsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Chart_subjectsUpdateManyMutationInputSchema),z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChart_subjectsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpsertWithWhereUniqueWithoutUnitsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutUnitsInputSchema) ]),
  create: z.union([ z.lazy(() => Goal_report_valuesCreateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithWhereUniqueWithoutUnitsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateWithoutUnitsInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateWithoutUnitsInputSchema) ]),
}).strict();

export const Goal_report_valuesUpdateManyWithWhereWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyWithWhereWithoutUnitsInput> = z.object({
  where: z.lazy(() => Goal_report_valuesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Goal_report_valuesUpdateManyMutationInputSchema),z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_report_valuesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutUnitsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUnitsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUnitsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUnitsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUnitsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ListsUpsertWithoutUnitsInputSchema: z.ZodType<Prisma.ListsUpsertWithoutUnitsInput> = z.object({
  update: z.union([ z.lazy(() => ListsUpdateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedUpdateWithoutUnitsInputSchema) ]),
  create: z.union([ z.lazy(() => ListsCreateWithoutUnitsInputSchema),z.lazy(() => ListsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const ListsUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutUnitsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutListsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutUnitsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutUnitsInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutUnitsInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutUnitsInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutUnitsInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutUnitsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutUnitsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUser_messagesInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUser_messagesInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const MessagesCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateWithoutUser_messagesInput> = z.object({
  message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUncheckedCreateWithoutUser_messagesInput> = z.object({
  message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  date: z.coerce.date().optional().nullable(),
  message: z.string().optional().nullable()
}).strict();

export const MessagesCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => MessagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const UsersCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateWithoutUser_messagesInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const UsersUncheckedCreateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUncheckedCreateWithoutUser_messagesInput> = z.object({
  user_id: z.string(),
  email: z.string().optional().nullable(),
  auth_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutUsersInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedOneWithoutUsersInputSchema).optional()
}).strict();

export const UsersCreateOrConnectWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersCreateOrConnectWithoutUser_messagesInput> = z.object({
  where: z.lazy(() => UsersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUser_messagesInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUser_messagesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUser_messagesInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const MessagesUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => MessagesUpdateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => MessagesCreateWithoutUser_messagesInputSchema),z.lazy(() => MessagesUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const MessagesUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUpdateWithoutUser_messagesInput> = z.object({
  message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const MessagesUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.MessagesUncheckedUpdateWithoutUser_messagesInput> = z.object({
  message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UsersUpsertWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUpsertWithoutUser_messagesInput> = z.object({
  update: z.union([ z.lazy(() => UsersUpdateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedUpdateWithoutUser_messagesInputSchema) ]),
  create: z.union([ z.lazy(() => UsersCreateWithoutUser_messagesInputSchema),z.lazy(() => UsersUncheckedCreateWithoutUser_messagesInputSchema) ]),
}).strict();

export const UsersUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUpdateWithoutUser_messagesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const UsersUncheckedUpdateWithoutUser_messagesInputSchema: z.ZodType<Prisma.UsersUncheckedUpdateWithoutUser_messagesInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  auth_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutUsersNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateOneWithoutUsersNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutUsersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutUsersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.AccountsCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => AccountsCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Project_usersCreateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateWithoutUsersInput> = z.object({
  project_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProject_usersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutProject_usersInputSchema).optional()
}).strict();

export const Project_usersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedCreateWithoutUsersInput> = z.object({
  project_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.Project_usersCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => Project_usersCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Subproject_usersCreateWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersCreateWithoutUsersInput> = z.object({
  subproject_user_id: z.string(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutSubproject_usersInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedOneWithoutSubproject_usersInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedCreateWithoutUsersInput> = z.object({
  subproject_user_id: z.string(),
  account_id: z.string().optional().nullable(),
  subproject_id: z.string().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Subproject_usersCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.Subproject_usersCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => Subproject_usersCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Ui_optionsCreateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateWithoutUsersInput> = z.object({
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUi_optionsInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedCreateWithoutUsersInput> = z.object({
  account_id: z.string().optional().nullable(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().optional().nullable(),
  editing_check_geometry: z.string().optional().nullable(),
  editing_action_geometry: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Ui_optionsCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => Ui_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesCreateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateWithoutUsersInput> = z.object({
  user_message_id: z.string(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutUser_messagesInputSchema).optional(),
  messages: z.lazy(() => MessagesCreateNestedOneWithoutUser_messagesInputSchema).optional()
}).strict();

export const User_messagesUncheckedCreateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedCreateWithoutUsersInput> = z.object({
  user_message_id: z.string(),
  account_id: z.string().optional().nullable(),
  message_id: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateOrConnectWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesCreateOrConnectWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesCreateManyUsersInputEnvelopeSchema: z.ZodType<Prisma.User_messagesCreateManyUsersInputEnvelope> = z.object({
  data: z.lazy(() => User_messagesCreateManyUsersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => AccountsUpdateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => AccountsUpdateWithoutUsersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const AccountsUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => AccountsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => AccountsUpdateManyMutationInputSchema),z.lazy(() => AccountsUncheckedUpdateManyWithoutAccountsInputSchema) ]),
}).strict();

export const AccountsScalarWhereInputSchema: z.ZodType<Prisma.AccountsScalarWhereInput> = z.object({
  AND: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
  OR: z.lazy(() => AccountsScalarWhereInputSchema).array().optional(),
  NOT: z.union([ z.lazy(() => AccountsScalarWhereInputSchema),z.lazy(() => AccountsScalarWhereInputSchema).array() ]).optional(),
  account_id: z.union([ z.lazy(() => UuidFilterSchema),z.string() ]).optional(),
  user_id: z.union([ z.lazy(() => UuidNullableFilterSchema),z.string() ]).optional().nullable(),
  type: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  period_start: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  period_end: z.union([ z.lazy(() => DateTimeNullableFilterSchema),z.coerce.date() ]).optional().nullable(),
  projects_label_by: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
  label: z.union([ z.lazy(() => StringNullableFilterSchema),z.string() ]).optional().nullable(),
}).strict();

export const Project_usersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Project_usersUpdateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Project_usersCreateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateWithoutUsersInputSchema),z.lazy(() => Project_usersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const Project_usersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => Project_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Project_usersUpdateManyMutationInputSchema),z.lazy(() => Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema) ]),
}).strict();

export const Subproject_usersUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Subproject_usersUpdateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Subproject_usersCreateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Subproject_usersUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => Subproject_usersWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateWithoutUsersInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const Subproject_usersUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => Subproject_usersScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Subproject_usersUpdateManyMutationInputSchema),z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubproject_usersInputSchema) ]),
}).strict();

export const Ui_optionsUpsertWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUpsertWithoutUsersInput> = z.object({
  update: z.union([ z.lazy(() => Ui_optionsUpdateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => Ui_optionsCreateWithoutUsersInputSchema),z.lazy(() => Ui_optionsUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const Ui_optionsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithoutUsersInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpsertWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpsertWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => User_messagesUpdateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutUsersInputSchema) ]),
  create: z.union([ z.lazy(() => User_messagesCreateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedCreateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesUpdateWithWhereUniqueWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateWithWhereUniqueWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateWithoutUsersInputSchema),z.lazy(() => User_messagesUncheckedUpdateWithoutUsersInputSchema) ]),
}).strict();

export const User_messagesUpdateManyWithWhereWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateManyWithWhereWithoutUsersInput> = z.object({
  where: z.lazy(() => User_messagesScalarWhereInputSchema),
  data: z.union([ z.lazy(() => User_messagesUpdateManyMutationInputSchema),z.lazy(() => User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema) ]),
}).strict();

export const AccountsCreateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsCreateWithoutVector_layer_displaysInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutVector_layer_displaysInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutVector_layer_displaysInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const Vector_layersCreateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersCreateWithoutVector_layer_displaysInput> = z.object({
  vector_layer_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutVector_layersInputSchema)
}).strict();

export const Vector_layersUncheckedCreateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateWithoutVector_layer_displaysInput> = z.object({
  vector_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersCreateOrConnectWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersCreateOrConnectWithoutVector_layer_displaysInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutVector_layer_displaysInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layer_displaysInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutVector_layer_displaysInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutVector_layer_displaysInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Vector_layersUpsertWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersUpsertWithoutVector_layer_displaysInput> = z.object({
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutVector_layer_displaysInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_displaysInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const Vector_layersUpdateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithoutVector_layer_displaysInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateWithoutVector_layer_displaysInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const AccountsCreateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsCreateWithoutVector_layer_geomsInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutVector_layer_geomsInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutVector_layer_geomsInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const Vector_layersCreateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersCreateWithoutVector_layer_geomsInput> = z.object({
  vector_layer_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutVector_layersInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layersInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutVector_layersInputSchema)
}).strict();

export const Vector_layersUncheckedCreateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedCreateWithoutVector_layer_geomsInput> = z.object({
  vector_layer_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().optional().nullable(),
  min_zoom: z.number().optional().nullable(),
  max_features: z.number().optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().optional().nullable(),
  point_count: z.number().optional().nullable(),
  line_count: z.number().optional().nullable(),
  polygon_count: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutVector_layersInputSchema).optional()
}).strict();

export const Vector_layersCreateOrConnectWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersCreateOrConnectWithoutVector_layer_geomsInput> = z.object({
  where: z.lazy(() => Vector_layersWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutVector_layer_geomsInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layer_geomsInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutVector_layer_geomsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutVector_layer_geomsInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const Vector_layersUpsertWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersUpsertWithoutVector_layer_geomsInput> = z.object({
  update: z.union([ z.lazy(() => Vector_layersUpdateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedUpdateWithoutVector_layer_geomsInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layersCreateWithoutVector_layer_geomsInputSchema),z.lazy(() => Vector_layersUncheckedCreateWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const Vector_layersUpdateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithoutVector_layer_geomsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateWithoutVector_layer_geomsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Layer_optionsCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateWithoutVector_layersInput> = z.object({
  layer_option_id: z.string(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutLayer_optionsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedOneWithoutLayer_optionsInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedCreateWithoutVector_layersInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().optional().nullable(),
  tile_layer_id: z.string().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsCreateOrConnectWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateOrConnectWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Layer_optionsCreateManyVector_layersInputEnvelopeSchema: z.ZodType<Prisma.Layer_optionsCreateManyVector_layersInputEnvelope> = z.object({
  data: z.lazy(() => Layer_optionsCreateManyVector_layersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layer_displaysCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateWithoutVector_layersInput> = z.object({
  vector_layer_display_id: z.string(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layer_displaysInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedCreateWithoutVector_layersInput> = z.object({
  vector_layer_display_id: z.string(),
  account_id: z.string().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().optional().nullable(),
  opacity_percent: z.number().optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_displaysCreateOrConnectWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateOrConnectWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_displaysCreateManyVector_layersInputEnvelopeSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyVector_layersInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layer_displaysCreateManyVector_layersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Vector_layer_geomsCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateWithoutVector_layersInput> = z.object({
  vector_layer_geom_id: z.string(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().optional().nullable(),
  bbox_sw_lat: z.number().optional().nullable(),
  bbox_ne_lng: z.number().optional().nullable(),
  bbox_ne_lat: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutVector_layer_geomsInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedCreateWithoutVector_layersInput> = z.object({
  vector_layer_geom_id: z.string(),
  account_id: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().optional().nullable(),
  bbox_sw_lat: z.number().optional().nullable(),
  bbox_ne_lng: z.number().optional().nullable(),
  bbox_ne_lat: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsCreateOrConnectWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateOrConnectWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_geomsCreateManyVector_layersInputEnvelopeSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyVector_layersInputEnvelope> = z.object({
  data: z.lazy(() => Vector_layer_geomsCreateManyVector_layersInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const AccountsCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsCreateWithoutVector_layersInput> = z.object({
  account_id: z.string(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  users: z.lazy(() => UsersCreateNestedOneWithoutAccountsInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsUncheckedCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsUncheckedCreateWithoutVector_layersInput> = z.object({
  account_id: z.string(),
  user_id: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedCreateNestedManyWithoutAccountsInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedCreateNestedManyWithoutAccountsInputSchema).optional()
}).strict();

export const AccountsCreateOrConnectWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsCreateOrConnectWithoutVector_layersInput> = z.object({
  where: z.lazy(() => AccountsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const ProjectsCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsCreateWithoutVector_layersInput> = z.object({
  project_id: z.string(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersCreateNestedManyWithoutProjectsInputSchema).optional(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsUncheckedCreateWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsUncheckedCreateWithoutVector_layersInput> = z.object({
  project_id: z.string(),
  account_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedCreateNestedManyWithoutProjectsInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedCreateNestedManyWithoutProjectsInputSchema).optional()
}).strict();

export const ProjectsCreateOrConnectWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsCreateOrConnectWithoutVector_layersInput> = z.object({
  where: z.lazy(() => ProjectsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpsertWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Layer_optionsUpdateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutVector_layersInputSchema) ]),
  create: z.union([ z.lazy(() => Layer_optionsCreateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateWithoutVector_layersInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateWithoutVector_layersInputSchema) ]),
}).strict();

export const Layer_optionsUpdateManyWithWhereWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateManyWithWhereWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Layer_optionsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Layer_optionsUpdateManyMutationInputSchema),z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutLayer_optionsInputSchema) ]),
}).strict();

export const Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpsertWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateWithoutVector_layersInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layer_displaysCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_displaysUpdateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyWithWhereWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_displaysScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_displaysUpdateManyMutationInputSchema),z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layer_displaysInputSchema) ]),
}).strict();

export const Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpsertWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateWithoutVector_layersInputSchema) ]),
  create: z.union([ z.lazy(() => Vector_layer_geomsCreateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateWithWhereUniqueWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_geomsUpdateWithoutVector_layersInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateWithoutVector_layersInputSchema) ]),
}).strict();

export const Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyWithWhereWithoutVector_layersInput> = z.object({
  where: z.lazy(() => Vector_layer_geomsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Vector_layer_geomsUpdateManyMutationInputSchema),z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layer_geomsInputSchema) ]),
}).strict();

export const AccountsUpsertWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsUpsertWithoutVector_layersInput> = z.object({
  update: z.union([ z.lazy(() => AccountsUpdateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedUpdateWithoutVector_layersInputSchema) ]),
  create: z.union([ z.lazy(() => AccountsCreateWithoutVector_layersInputSchema),z.lazy(() => AccountsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const AccountsUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutVector_layersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneWithoutAccountsNestedInputSchema).optional(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutVector_layersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const ProjectsUpsertWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsUpsertWithoutVector_layersInput> = z.object({
  update: z.union([ z.lazy(() => ProjectsUpdateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedUpdateWithoutVector_layersInputSchema) ]),
  create: z.union([ z.lazy(() => ProjectsCreateWithoutVector_layersInputSchema),z.lazy(() => ProjectsUncheckedCreateWithoutVector_layersInputSchema) ]),
}).strict();

export const ProjectsUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutVector_layersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutVector_layersInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const FieldsCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsCreateWithoutWidget_typesInput> = z.object({
  field_id: z.string(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  accounts: z.lazy(() => AccountsCreateNestedOneWithoutFieldsInputSchema).optional(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutFieldsInputSchema).optional(),
  lists: z.lazy(() => ListsCreateNestedOneWithoutFieldsInputSchema).optional(),
  projects: z.lazy(() => ProjectsCreateNestedOneWithoutFieldsInputSchema).optional()
}).strict();

export const FieldsUncheckedCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedCreateWithoutWidget_typesInput> = z.object({
  field_id: z.string(),
  account_id: z.string().optional().nullable(),
  project_id: z.string().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().optional().nullable(),
  field_type_id: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateOrConnectWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsCreateOrConnectWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const FieldsCreateManyWidget_typesInputEnvelopeSchema: z.ZodType<Prisma.FieldsCreateManyWidget_typesInputEnvelope> = z.object({
  data: z.lazy(() => FieldsCreateManyWidget_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const Widgets_for_fieldsCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.string(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  field_types: z.lazy(() => Field_typesCreateNestedOneWithoutWidgets_for_fieldsInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.string(),
  field_type_id: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateOrConnectWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsCreateManyWidget_typesInputEnvelopeSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyWidget_typesInputEnvelope> = z.object({
  data: z.lazy(() => Widgets_for_fieldsCreateManyWidget_typesInputSchema).array(),
  skipDuplicates: z.boolean().optional()
}).strict();

export const FieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUpsertWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => FieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
  create: z.union([ z.lazy(() => FieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const FieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUpdateWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => FieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => FieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
}).strict();

export const FieldsUpdateManyWithWhereWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUpdateManyWithWhereWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => FieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => FieldsUpdateManyMutationInputSchema),z.lazy(() => FieldsUncheckedUpdateManyWithoutFieldsInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  update: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
  create: z.union([ z.lazy(() => Widgets_for_fieldsCreateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedCreateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithWhereUniqueWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsWhereUniqueInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema) ]),
}).strict();

export const Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyWithWhereWithoutWidget_typesInput> = z.object({
  where: z.lazy(() => Widgets_for_fieldsScalarWhereInputSchema),
  data: z.union([ z.lazy(() => Widgets_for_fieldsUpdateManyMutationInputSchema),z.lazy(() => Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedCreateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.string(),
  name: z.string().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutField_typesInputSchema).optional()
}).strict();

export const Field_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesCreateOrConnectWithoutWidgets_for_fieldsInput> = z.object({
  where: z.lazy(() => Field_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widget_typesCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.string(),
  name: z.string().optional().nullable(),
  needs_list: z.boolean().optional().nullable(),
  sort: z.number().optional().nullable(),
  comment: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedCreateNestedManyWithoutWidget_typesInputSchema).optional()
}).strict();

export const Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesCreateOrConnectWithoutWidgets_for_fieldsInput> = z.object({
  where: z.lazy(() => Widget_typesWhereUniqueInputSchema),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesUpsertWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUpsertWithoutWidgets_for_fieldsInput> = z.object({
  update: z.union([ z.lazy(() => Field_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Field_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Field_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Field_typesUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUpdateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Field_typesUncheckedUpdateWithoutWidgets_for_fieldsInput> = z.object({
  field_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutField_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesUpsertWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUpsertWithoutWidgets_for_fieldsInput> = z.object({
  update: z.union([ z.lazy(() => Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema) ]),
  create: z.union([ z.lazy(() => Widget_typesCreateWithoutWidgets_for_fieldsInputSchema),z.lazy(() => Widget_typesUncheckedCreateWithoutWidgets_for_fieldsInputSchema) ]),
}).strict();

export const Widget_typesUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUpdateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widget_typesUncheckedUpdateWithoutWidgets_for_fieldsInput> = z.object({
  widget_type_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  needs_list: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  comment: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutWidget_typesNestedInputSchema).optional()
}).strict();

export const Chart_subjectsCreateManyAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateManyAccountsInput> = z.object({
  chart_subject_id: z.string().uuid(),
  chart_id: z.string().uuid().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsCreateManyAccountsInputSchema: z.ZodType<Prisma.ChartsCreateManyAccountsInput> = z.object({
  chart_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateManyAccountsInputSchema: z.ZodType<Prisma.FieldsCreateManyAccountsInput> = z.object({
  field_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyAccountsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyAccountsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateManyAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyAccountsInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Goal_report_valuesCreateManyAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyAccountsInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  goal_report_id: z.string().uuid().optional().nullable(),
  unit_id: z.string().uuid().optional().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_reportsCreateManyAccountsInputSchema: z.ZodType<Prisma.Goal_reportsCreateManyAccountsInput> = z.object({
  goal_report_id: z.string().uuid(),
  goal_id: z.string().uuid().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const GoalsCreateManyAccountsInputSchema: z.ZodType<Prisma.GoalsCreateManyAccountsInput> = z.object({
  goal_id: z.string().uuid(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Layer_optionsCreateManyAccountsInputSchema: z.ZodType<Prisma.Layer_optionsCreateManyAccountsInput> = z.object({
  layer_option_id: z.string(),
  tile_layer_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const List_valuesCreateManyAccountsInputSchema: z.ZodType<Prisma.List_valuesCreateManyAccountsInput> = z.object({
  list_value_id: z.string().uuid(),
  list_id: z.string().uuid().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ListsCreateManyAccountsInputSchema: z.ZodType<Prisma.ListsCreateManyAccountsInput> = z.object({
  list_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Observation_sourcesCreateManyAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateManyAccountsInput> = z.object({
  observation_source_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsCreateManyAccountsInputSchema: z.ZodType<Prisma.ObservationsCreateManyAccountsInput> = z.object({
  observation_id: z.string().uuid(),
  observation_source_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateManyAccountsInputSchema: z.ZodType<Prisma.PersonsCreateManyAccountsInput> = z.object({
  person_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateManyAccountsInputSchema: z.ZodType<Prisma.Place_levelsCreateManyAccountsInput> = z.object({
  place_level_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PlacesCreateManyAccountsInputSchema: z.ZodType<Prisma.PlacesCreateManyAccountsInput> = z.object({
  place_id: z.string().uuid(),
  subproject_id: z.string().uuid().optional().nullable(),
  parent_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsCreateManyAccountsInputSchema: z.ZodType<Prisma.Project_reportsCreateManyAccountsInput> = z.object({
  project_report_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateManyAccountsInputSchema: z.ZodType<Prisma.Project_usersCreateManyAccountsInput> = z.object({
  project_user_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ProjectsCreateManyAccountsInputSchema: z.ZodType<Prisma.ProjectsCreateManyAccountsInput> = z.object({
  project_id: z.string().uuid(),
  name: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => project_typeSchema).optional().nullable(),
  subproject_name_singular: z.string().optional().nullable(),
  subproject_name_plural: z.string().optional().nullable(),
  subproject_order_by: z.string().optional().nullable(),
  places_label_by: z.string().optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.string().optional().nullable(),
  persons_order_by: z.string().optional().nullable(),
  goal_reports_label_by: z.string().optional().nullable(),
  goal_reports_order_by: z.string().optional().nullable(),
  values_on_multiple_levels: z.string().optional().nullable(),
  multiple_action_values_on_same_level: z.string().optional().nullable(),
  multiple_check_values_on_same_level: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.boolean().optional().nullable(),
  files_active_projects: z.boolean().optional().nullable(),
  files_active_subprojects: z.boolean().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  files_active_actions: z.boolean().optional().nullable(),
  files_active_checks: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsCreateManyAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateManyAccountsInput> = z.object({
  subproject_report_id: z.string().uuid(),
  subproject_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaCreateManyAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateManyAccountsInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  subproject_id: z.string().uuid().optional().nullable(),
  taxon_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateManyAccountsInputSchema: z.ZodType<Prisma.Subproject_usersCreateManyAccountsInput> = z.object({
  subproject_user_id: z.string().uuid(),
  subproject_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsCreateManyAccountsInputSchema: z.ZodType<Prisma.SubprojectsCreateManyAccountsInput> = z.object({
  subproject_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaCreateManyAccountsInputSchema: z.ZodType<Prisma.TaxaCreateManyAccountsInput> = z.object({
  taxon_id: z.string().uuid(),
  taxonomy_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateManyAccountsInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyAccountsInput> = z.object({
  taxonomy_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Tile_layersCreateManyAccountsInputSchema: z.ZodType<Prisma.Tile_layersCreateManyAccountsInput> = z.object({
  tile_layer_id: z.string().uuid(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Ui_optionsCreateManyAccountsInputSchema: z.ZodType<Prisma.Ui_optionsCreateManyAccountsInput> = z.object({
  user_id: z.string().uuid(),
  designing: z.boolean().optional().nullable(),
  breadcrumbs_overflowing: z.boolean().optional().nullable(),
  navs_overflowing: z.boolean().optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.boolean().optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.string().optional().nullable(),
  vector_layer_sorter: z.string().optional().nullable(),
  editing_place_geometry: z.string().uuid().optional().nullable(),
  editing_check_geometry: z.string().uuid().optional().nullable(),
  editing_action_geometry: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const UnitsCreateManyAccountsInputSchema: z.ZodType<Prisma.UnitsCreateManyAccountsInput> = z.object({
  unit_id: z.string().uuid(),
  project_id: z.string().uuid().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateManyAccountsInputSchema: z.ZodType<Prisma.User_messagesCreateManyAccountsInput> = z.object({
  user_message_id: z.string().uuid(),
  user_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_displaysCreateManyAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyAccountsInput> = z.object({
  vector_layer_display_id: z.string().uuid(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsCreateManyAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyAccountsInput> = z.object({
  vector_layer_geom_id: z.string().uuid(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_sw_lat: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lat: z.number().or(z.nan()).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layersCreateManyAccountsInputSchema: z.ZodType<Prisma.Vector_layersCreateManyAccountsInput> = z.object({
  vector_layer_id: z.string().uuid(),
  project_id: z.string().uuid(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithoutAccountsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateOneWithoutChart_subjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutChart_subjectsNestedInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateWithoutAccountsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  chart_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsUncheckedUpdateManyWithoutChart_subjectsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateManyWithoutChart_subjectsInput> = z.object({
  chart_subject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  chart_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_unit: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUpdateWithoutAccountsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutChartsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutChartsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutChartsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateWithoutAccountsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateManyWithoutChartsInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateManyWithoutChartsInput> = z.object({
  chart_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUpdateWithoutAccountsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutFieldsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateWithoutAccountsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsUncheckedUpdateManyWithoutFieldsInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateManyWithoutFieldsInput> = z.object({
  field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateManyWithoutGbif_occurrence_downloadsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateManyWithoutGbif_occurrencesInput> = z.object({
  gbif_occurrence_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateWithoutAccountsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateManyWithoutGbif_taxaInput> = z.object({
  gbif_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithoutAccountsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateWithoutAccountsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  goal_report_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesUncheckedUpdateManyWithoutGoal_report_valuesInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateManyWithoutGoal_report_valuesInput> = z.object({
  goal_report_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateWithoutAccountsInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutGoal_reportsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateOneWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateWithoutAccountsInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  goal_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedUpdateManyWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateManyWithoutGoal_reportsInput> = z.object({
  goal_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  goal_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GoalsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUpdateWithoutAccountsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutGoalsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateWithoutAccountsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsUncheckedUpdateManyWithoutGoalsInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateManyWithoutGoalsInput> = z.object({
  goal_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithoutAccountsInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tile_layers: z.lazy(() => Tile_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateWithoutAccountsInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tile_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsUncheckedUpdateManyWithoutLayer_optionsInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateManyWithoutLayer_optionsInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUpdateWithoutAccountsInput> = z.object({
  list_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  lists: z.lazy(() => ListsUpdateOneWithoutList_valuesNestedInputSchema).optional()
}).strict();

export const List_valuesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateWithoutAccountsInput> = z.object({
  list_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesUncheckedUpdateManyWithoutList_valuesInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateManyWithoutList_valuesInput> = z.object({
  list_value_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutAccountsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutListsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutAccountsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateManyWithoutListsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateManyWithoutListsInput> = z.object({
  list_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Observation_sourcesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateWithoutAccountsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateWithoutAccountsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedUpdateManyWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateManyWithoutObservation_sourcesInput> = z.object({
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUpdateWithoutAccountsInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateOneWithoutObservationsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutObservationsNestedInputSchema).optional()
}).strict();

export const ObservationsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateWithoutAccountsInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  observation_source_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsUncheckedUpdateManyWithoutObservationsInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateManyWithoutObservationsInput> = z.object({
  observation_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  observation_source_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUpdateWithoutAccountsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateWithoutAccountsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PersonsUncheckedUpdateManyWithoutPersonsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateManyWithoutPersonsInput> = z.object({
  person_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithoutAccountsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateWithoutAccountsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUncheckedUpdateManyWithoutPlace_levelsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateManyWithoutPlace_levelsInput> = z.object({
  place_level_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutAccountsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutAccountsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateManyWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyWithoutPlacesInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUpdateWithoutAccountsInput> = z.object({
  project_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_reportsNestedInputSchema).optional()
}).strict();

export const Project_reportsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateWithoutAccountsInput> = z.object({
  project_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsUncheckedUpdateManyWithoutProject_reportsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateManyWithoutProject_reportsInput> = z.object({
  project_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutAccountsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutAccountsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUncheckedUpdateManyWithoutProject_usersInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateManyWithoutProject_usersInput> = z.object({
  project_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ProjectsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUpdateWithoutAccountsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateWithoutAccountsInput> = z.object({
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutProjectsNestedInputSchema).optional()
}).strict();

export const ProjectsUncheckedUpdateManyWithoutProjectsInputSchema: z.ZodType<Prisma.ProjectsUncheckedUpdateManyWithoutProjectsInput> = z.object({
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => project_typeSchema),z.lazy(() => NullableEnumproject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  places_order_by: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  persons_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  persons_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports_order_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  values_on_multiple_levels: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_action_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  multiple_check_values_on_same_level: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  files_offline: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_projects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_subprojects: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateWithoutAccountsInput> = z.object({
  subproject_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_reportsNestedInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateWithoutAccountsInput> = z.object({
  subproject_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_reportsUncheckedUpdateManyWithoutSubproject_reportsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateManyWithoutSubproject_reportsInput> = z.object({
  subproject_report_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithoutAccountsInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateOneWithoutSubproject_taxaNestedInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateWithoutAccountsInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxon_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaUncheckedUpdateManyWithoutSubproject_taxaInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateManyWithoutSubproject_taxaInput> = z.object({
  subproject_taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithoutAccountsInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutSubproject_usersNestedInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateWithoutAccountsInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersUncheckedUpdateManyWithoutSubproject_usersInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateManyWithoutSubproject_usersInput> = z.object({
  subproject_user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutAccountsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutAccountsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateManyWithoutSubprojectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateManyWithoutSubprojectsInput> = z.object({
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUpdateWithoutAccountsInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutTaxaNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateWithoutAccountsInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxonomy_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateManyWithoutTaxaInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateManyWithoutTaxaInput> = z.object({
  taxon_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxonomiesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutAccountsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutAccountsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateManyWithoutTaxonomiesInput> = z.object({
  taxonomy_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Tile_layersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUpdateWithoutAccountsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutTile_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateWithoutAccountsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersUncheckedUpdateManyWithoutTile_layersInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateManyWithoutTile_layersInput> = z.object({
  tile_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUpdateWithoutAccountsInput> = z.object({
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  users: z.lazy(() => UsersUpdateOneRequiredWithoutUi_optionsNestedInputSchema).optional()
}).strict();

export const Ui_optionsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateWithoutAccountsInput> = z.object({
  user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Ui_optionsUncheckedUpdateManyWithoutUi_optionsInputSchema: z.ZodType<Prisma.Ui_optionsUncheckedUpdateManyWithoutUi_optionsInput> = z.object({
  user_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  designing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  breadcrumbs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  navs_overflowing: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tabs: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  show_map: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  map_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  local_map_show: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  tile_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_sorter: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_place_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_check_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  editing_action_geometry: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUpdateWithoutAccountsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateWithoutAccountsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateManyWithoutUnitsInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateManyWithoutUnitsInput> = z.object({
  unit_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutAccountsInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutAccountsInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUncheckedUpdateManyWithoutUser_messagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateManyWithoutUser_messagesInput> = z.object({
  user_message_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  user_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateWithoutAccountsInput> = z.object({
  vector_layer_display_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutVector_layer_displaysNestedInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateWithoutAccountsInput> = z.object({
  vector_layer_display_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  vector_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysUncheckedUpdateManyWithoutVector_layer_displaysInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateManyWithoutVector_layer_displaysInput> = z.object({
  vector_layer_display_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateWithoutAccountsInput> = z.object({
  vector_layer_geom_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutVector_layer_geomsNestedInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateWithoutAccountsInput> = z.object({
  vector_layer_geom_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  vector_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsUncheckedUpdateManyWithoutVector_layer_geomsInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateManyWithoutVector_layer_geomsInput> = z.object({
  vector_layer_geom_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number().or(z.nan()),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layersUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithoutAccountsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneRequiredWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateWithoutAccountsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateWithoutAccountsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateManyWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateManyWithoutVector_layersInput> = z.object({
  vector_layer_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  project_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number().int().gte(-32768).lte(32767),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsCreateManyChartsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateManyChartsInput> = z.object({
  chart_subject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  value_unit: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsUpdateWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithoutChartsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChart_subjectsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutChart_subjectsNestedInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedUpdateWithoutChartsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateWithoutChartsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_unit: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsCreateManyField_typesInputSchema: z.ZodType<Prisma.FieldsCreateManyField_typesInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateManyField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyField_typesInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  widget_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUpdateWithoutField_typesInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateWithoutField_typesInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateWithoutField_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateWithoutField_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateManyWithoutWidgets_for_fieldsInput> = z.object({
  widget_for_field_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  widget_type_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesCreateManyGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyGoal_reportsInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  unit_id: z.string().uuid().optional().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithoutGoal_reportsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedUpdateWithoutGoal_reportsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateWithoutGoal_reportsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  unit_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_reportsCreateManyGoalsInputSchema: z.ZodType<Prisma.Goal_reportsCreateManyGoalsInput> = z.object({
  goal_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_reportsUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUpdateWithoutGoalsInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutGoal_reportsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const Goal_reportsUncheckedUpdateWithoutGoalsInputSchema: z.ZodType<Prisma.Goal_reportsUncheckedUpdateWithoutGoalsInput> = z.object({
  goal_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutGoal_reportsNestedInputSchema).optional()
}).strict();

export const FieldsCreateManyListsInputSchema: z.ZodType<Prisma.FieldsCreateManyListsInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const List_valuesCreateManyListsInputSchema: z.ZodType<Prisma.List_valuesCreateManyListsInput> = z.object({
  list_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  value: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const UnitsCreateManyListsInputSchema: z.ZodType<Prisma.UnitsCreateManyListsInput> = z.object({
  unit_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsUpdateWithoutListsInputSchema: z.ZodType<Prisma.FieldsUpdateWithoutListsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutFieldsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateWithoutListsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const List_valuesUpdateWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUpdateWithoutListsInput> = z.object({
  list_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutList_valuesNestedInputSchema).optional()
}).strict();

export const List_valuesUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.List_valuesUncheckedUpdateWithoutListsInput> = z.object({
  list_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const UnitsUpdateWithoutListsInputSchema: z.ZodType<Prisma.UnitsUpdateWithoutListsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateWithoutListsInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateWithoutListsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const User_messagesCreateManyMessagesInputSchema: z.ZodType<Prisma.User_messagesCreateManyMessagesInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const User_messagesUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutMessagesInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutMessagesInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutMessagesInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ObservationsCreateManyObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsCreateManyObservation_sourcesInput> = z.object({
  observation_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUpdateWithoutObservation_sourcesInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservationsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutObservationsNestedInputSchema).optional()
}).strict();

export const ObservationsUncheckedUpdateWithoutObservation_sourcesInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateWithoutObservation_sourcesInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsCreateManyPlacesInputSchema: z.ZodType<Prisma.ChartsCreateManyPlacesInput> = z.object({
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ObservationsCreateManyPlacesInputSchema: z.ZodType<Prisma.ObservationsCreateManyPlacesInput> = z.object({
  observation_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  observation_source_id: z.string().uuid().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.coerce.date().optional().nullable(),
  author: z.string().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PlacesCreateManyPlacesInputSchema: z.ZodType<Prisma.PlacesCreateManyPlacesInput> = z.object({
  place_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUpdateWithoutPlacesInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutChartsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChartsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutChartsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateWithoutPlacesInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema).optional()
}).strict();

export const ObservationsUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUpdateWithoutPlacesInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservationsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateOneWithoutObservationsNestedInputSchema).optional()
}).strict();

export const ObservationsUncheckedUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.ObservationsUncheckedUpdateWithoutPlacesInput> = z.object({
  observation_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_source_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observation_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  date: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  author: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const PlacesUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutPlacesInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutPlacesInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutPlacesInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateManyWithoutOther_placesInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateManyWithoutOther_placesInput> = z.object({
  place_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string().uuid(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number().int().gte(-2147483648).lte(2147483647),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ChartsCreateManyProjectsInputSchema: z.ZodType<Prisma.ChartsCreateManyProjectsInput> = z.object({
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsCreateManyProjectsInputSchema: z.ZodType<Prisma.FieldsCreateManyProjectsInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  widget_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyProjectsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyProjectsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const Gbif_taxaCreateManyProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaCreateManyProjectsInput> = z.object({
  gbif_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const ListsCreateManyProjectsInputSchema: z.ZodType<Prisma.ListsCreateManyProjectsInput> = z.object({
  list_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Observation_sourcesCreateManyProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesCreateManyProjectsInput> = z.object({
  observation_source_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PersonsCreateManyProjectsInputSchema: z.ZodType<Prisma.PersonsCreateManyProjectsInput> = z.object({
  person_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  email: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Place_levelsCreateManyProjectsInputSchema: z.ZodType<Prisma.Place_levelsCreateManyProjectsInput> = z.object({
  place_level_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name_singular: z.string().optional().nullable(),
  name_plural: z.string().optional().nullable(),
  name_short: z.string().optional().nullable(),
  reports: z.boolean().optional().nullable(),
  report_values: z.boolean().optional().nullable(),
  actions: z.boolean().optional().nullable(),
  action_values: z.boolean().optional().nullable(),
  action_reports: z.boolean().optional().nullable(),
  checks: z.boolean().optional().nullable(),
  check_values: z.boolean().optional().nullable(),
  check_taxa: z.boolean().optional().nullable(),
  observations: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_reportsCreateManyProjectsInputSchema: z.ZodType<Prisma.Project_reportsCreateManyProjectsInput> = z.object({
  project_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Project_usersCreateManyProjectsInputSchema: z.ZodType<Prisma.Project_usersCreateManyProjectsInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const SubprojectsCreateManyProjectsInputSchema: z.ZodType<Prisma.SubprojectsCreateManyProjectsInput> = z.object({
  subproject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  start_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  end_year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxonomiesCreateManyProjectsInputSchema: z.ZodType<Prisma.TaxonomiesCreateManyProjectsInput> = z.object({
  taxonomy_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  type: z.lazy(() => taxonomy_typeSchema).optional().nullable(),
  name: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Tile_layersCreateManyProjectsInputSchema: z.ZodType<Prisma.Tile_layersCreateManyProjectsInput> = z.object({
  tile_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  type: z.lazy(() => tile_layer_type_enumSchema).optional().nullable(),
  wmts_url_template: z.string().optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.string().optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.boolean().optional().nullable(),
  wms_version: z.string().optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  grayscale: z.boolean().optional().nullable(),
  local_data_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const UnitsCreateManyProjectsInputSchema: z.ZodType<Prisma.UnitsCreateManyProjectsInput> = z.object({
  unit_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  use_for_action_values: z.boolean().optional().nullable(),
  use_for_action_report_values: z.boolean().optional().nullable(),
  use_for_check_values: z.boolean().optional().nullable(),
  use_for_place_report_values: z.boolean().optional().nullable(),
  use_for_goal_report_values: z.boolean().optional().nullable(),
  use_for_subproject_taxa: z.boolean().optional().nullable(),
  use_for_check_taxa: z.boolean().optional().nullable(),
  name: z.string().optional().nullable(),
  summable: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  type: z.lazy(() => unit_typeSchema).optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layersCreateManyProjectsInputSchema: z.ZodType<Prisma.Vector_layersCreateManyProjectsInput> = z.object({
  vector_layer_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  type: z.lazy(() => vector_layer_type_enumSchema).optional().nullable(),
  display_by_property_field: z.string().optional().nullable(),
  sort: z.number().int().gte(-32768).lte(32767).optional().nullable(),
  active: z.boolean().optional().nullable(),
  max_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  min_zoom: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  max_features: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  wfs_url: z.string().optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.string().optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  point_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  polygon_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUpdateWithoutProjectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutChartsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChartsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutChartsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateWithoutProjectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema).optional()
}).strict();

export const FieldsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUpdateWithoutProjectsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutFieldsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  widget_types: z.lazy(() => Widget_typesUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateWithoutProjectsInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  widget_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_taxaUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUpdateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_taxaNestedInputSchema).optional()
}).strict();

export const Gbif_taxaUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Gbif_taxaUncheckedUpdateWithoutProjectsInput> = z.object({
  gbif_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const ListsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUpdateWithoutProjectsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutListsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const ListsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.ListsUncheckedUpdateWithoutProjectsInput> = z.object({
  list_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutListsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutListsNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUpdateWithoutProjectsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutObservation_sourcesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const Observation_sourcesUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Observation_sourcesUncheckedUpdateWithoutProjectsInput> = z.object({
  observation_source_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutObservation_sourcesNestedInputSchema).optional()
}).strict();

export const PersonsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUpdateWithoutProjectsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPersonsNestedInputSchema).optional()
}).strict();

export const PersonsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.PersonsUncheckedUpdateWithoutProjectsInput> = z.object({
  person_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  email: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Place_levelsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUpdateWithoutProjectsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlace_levelsNestedInputSchema).optional()
}).strict();

export const Place_levelsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Place_levelsUncheckedUpdateWithoutProjectsInput> = z.object({
  place_level_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_singular: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_plural: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name_short: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  actions: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  action_reports: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  checks: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  observations: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_reportsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUpdateWithoutProjectsInput> = z.object({
  project_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_reportsNestedInputSchema).optional()
}).strict();

export const Project_reportsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_reportsUncheckedUpdateWithoutProjectsInput> = z.object({
  project_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutProjectsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutProjectsInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const SubprojectsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUpdateWithoutProjectsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const SubprojectsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.SubprojectsUncheckedUpdateWithoutProjectsInput> = z.object({
  subproject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  start_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  end_year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutSubprojectsNestedInputSchema).optional()
}).strict();

export const TaxonomiesUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUpdateWithoutProjectsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutTaxonomiesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const TaxonomiesUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.TaxonomiesUncheckedUpdateWithoutProjectsInput> = z.object({
  taxonomy_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => taxonomy_typeSchema),z.lazy(() => NullableEnumtaxonomy_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutTaxonomiesNestedInputSchema).optional()
}).strict();

export const Tile_layersUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUpdateWithoutProjectsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutTile_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const Tile_layersUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Tile_layersUncheckedUpdateWithoutProjectsInput> = z.object({
  tile_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => tile_layer_type_enumSchema),z.lazy(() => NullableEnumtile_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_url_template: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wmts_subdomains: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_base_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_parameters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_styles: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_transparent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wms_info_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wms_legend: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  grayscale: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  local_data_bounds: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutTile_layersNestedInputSchema).optional()
}).strict();

export const UnitsUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUpdateWithoutProjectsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutUnitsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUnitsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutUnitsNestedInputSchema).optional()
}).strict();

export const UnitsUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.UnitsUncheckedUpdateWithoutProjectsInput> = z.object({
  unit_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_action_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_place_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_goal_report_values: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_subproject_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  use_for_check_taxa: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  summable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => unit_typeSchema),z.lazy(() => NullableEnumunit_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutUnitsNestedInputSchema).optional()
}).strict();

export const Vector_layersUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUpdateWithoutProjectsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const Vector_layersUncheckedUpdateWithoutProjectsInputSchema: z.ZodType<Prisma.Vector_layersUncheckedUpdateWithoutProjectsInput> = z.object({
  vector_layer_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => vector_layer_type_enumSchema),z.lazy(() => NullableEnumvector_layer_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_by_property_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  active: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  min_zoom: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  max_features: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_layer: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  wfs_version: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  wfs_output_format: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  feature_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  point_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  polygon_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutVector_layersNestedInputSchema).optional()
}).strict();

export const ChartsCreateManySubprojectsInputSchema: z.ZodType<Prisma.ChartsCreateManySubprojectsInput> = z.object({
  chart_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  place_id: z.string().uuid().optional().nullable(),
  years_current: z.boolean().optional().nullable(),
  years_previous: z.boolean().optional().nullable(),
  years_specific: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_last_x: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  years_until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  chart_type: z.lazy(() => chart_typeSchema).optional().nullable(),
  title: z.string().optional().nullable(),
  subjects_stacked: z.boolean().optional().nullable(),
  subjects_single: z.boolean().optional().nullable(),
  percent: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrence_downloadsCreateManySubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManySubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_table: z.lazy(() => gbif_tableSchema).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.coerce.date().optional().nullable(),
  download_key: z.string().optional().nullable(),
  error: z.string().optional().nullable(),
  inserted_time: z.coerce.date().optional().nullable(),
  inserted_count: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  attribution: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Gbif_occurrencesCreateManySubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManySubprojectsInput> = z.object({
  gbif_occurrence_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable()
}).strict();

export const GoalsCreateManySubprojectsInputSchema: z.ZodType<Prisma.GoalsCreateManySubprojectsInput> = z.object({
  goal_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  name: z.string().optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const PlacesCreateManySubprojectsInputSchema: z.ZodType<Prisma.PlacesCreateManySubprojectsInput> = z.object({
  place_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  parent_id: z.string().uuid().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  since: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  until: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.string().optional().nullable(),
  files_active_places: z.boolean().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_reportsCreateManySubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsCreateManySubprojectsInput> = z.object({
  subproject_report_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  year: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaCreateManySubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaCreateManySubprojectsInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  taxon_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateManySubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersCreateManySubprojectsInput> = z.object({
  subproject_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  user_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const ChartsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUpdateWithoutSubprojectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutChartsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChartsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutChartsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutChartsNestedInputSchema).optional()
}).strict();

export const ChartsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.ChartsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  chart_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  place_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_current: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_previous: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_specific: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_last_x: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  years_until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_type: z.union([ z.lazy(() => chart_typeSchema),z.lazy(() => NullableEnumchart_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  title: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_stacked: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subjects_single: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  percent: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutChartsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrence_downloadsNestedInputSchema).optional()
}).strict();

export const Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_download_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_table: z.union([ z.lazy(() => gbif_tableSchema),z.lazy(() => NullableEnumgbif_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  filters: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  created_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  download_key: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  error: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_time: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  inserted_count: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  attribution: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Gbif_occurrencesUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutGbif_occurrencesNestedInputSchema).optional()
}).strict();

export const Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Gbif_occurrencesUncheckedUpdateWithoutSubprojectsInput> = z.object({
  gbif_occurrence_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  gbif_data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const GoalsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUpdateWithoutSubprojectsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutGoalsNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoalsNestedInputSchema).optional()
}).strict();

export const GoalsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.GoalsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  goal_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutGoalsNestedInputSchema).optional()
}).strict();

export const PlacesUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUpdateWithoutSubprojectsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutPlacesNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutPlacesNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateOneWithoutOther_placesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const PlacesUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.PlacesUncheckedUpdateWithoutSubprojectsInput> = z.object({
  place_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  parent_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  since: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  until: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  files_active_places: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional(),
  other_places: z.lazy(() => PlacesUncheckedUpdateManyWithoutPlacesNestedInputSchema).optional()
}).strict();

export const Subproject_reportsUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUpdateWithoutSubprojectsInput> = z.object({
  subproject_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_reportsNestedInputSchema).optional()
}).strict();

export const Subproject_reportsUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_reportsUncheckedUpdateWithoutSubprojectsInput> = z.object({
  subproject_report_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  year: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  data: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithoutSubprojectsInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateOneWithoutSubproject_taxaNestedInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateWithoutSubprojectsInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  taxon_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithoutSubprojectsInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_usersNestedInputSchema).optional(),
  users: z.lazy(() => UsersUpdateOneWithoutSubproject_usersNestedInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedUpdateWithoutSubprojectsInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateWithoutSubprojectsInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  user_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_taxaCreateManyTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaCreateManyTaxaInput> = z.object({
  subproject_taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_taxaUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUpdateWithoutTaxaInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_taxaNestedInputSchema).optional()
}).strict();

export const Subproject_taxaUncheckedUpdateWithoutTaxaInputSchema: z.ZodType<Prisma.Subproject_taxaUncheckedUpdateWithoutTaxaInput> = z.object({
  subproject_taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const TaxaCreateManyTaxonomiesInputSchema: z.ZodType<Prisma.TaxaCreateManyTaxonomiesInput> = z.object({
  taxon_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  id_in_source: z.string().optional().nullable(),
  url: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const TaxaUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUpdateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutTaxaNestedInputSchema).optional(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutTaxaNestedInputSchema).optional()
}).strict();

export const TaxaUncheckedUpdateWithoutTaxonomiesInputSchema: z.ZodType<Prisma.TaxaUncheckedUpdateWithoutTaxonomiesInput> = z.object({
  taxon_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  id_in_source: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutTaxaNestedInputSchema).optional()
}).strict();

export const Layer_optionsCreateManyTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateManyTile_layersInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().uuid().optional().nullable(),
  vector_layer_id: z.string().uuid().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Layer_optionsUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithoutTile_layersInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutLayer_optionsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedUpdateWithoutTile_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateWithoutTile_layersInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  vector_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Chart_subjectsCreateManyUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsCreateManyUnitsInput> = z.object({
  chart_subject_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  chart_id: z.string().uuid().optional().nullable(),
  table_name: z.lazy(() => chart_subject_tableSchema).optional().nullable(),
  table_level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.lazy(() => chart_subject_value_sourceSchema).optional().nullable(),
  value_field: z.string().optional().nullable(),
  name: z.string().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  type: z.lazy(() => chart_subject_typeSchema).optional().nullable(),
  stroke: z.string().optional().nullable(),
  fill: z.string().optional().nullable(),
  fill_graded: z.boolean().optional().nullable(),
  connect_nulls: z.boolean().optional().nullable(),
  sort: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Goal_report_valuesCreateManyUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyUnitsInput> = z.object({
  goal_report_value_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  goal_report_id: z.string().uuid().optional().nullable(),
  value_integer: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  value_numeric: z.number().or(z.nan()).optional().nullable(),
  value_text: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Chart_subjectsUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUpdateWithoutUnitsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutChart_subjectsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateOneWithoutChart_subjectsNestedInputSchema).optional()
}).strict();

export const Chart_subjectsUncheckedUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.Chart_subjectsUncheckedUpdateWithoutUnitsInput> = z.object({
  chart_subject_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.lazy(() => chart_subject_tableSchema),z.lazy(() => NullableEnumchart_subject_tableFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_filter: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  value_source: z.union([ z.lazy(() => chart_subject_value_sourceSchema),z.lazy(() => NullableEnumchart_subject_value_sourceFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_field: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  type: z.union([ z.lazy(() => chart_subject_typeSchema),z.lazy(() => NullableEnumchart_subject_typeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_graded: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  connect_nulls: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  sort: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Goal_report_valuesUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUpdateWithoutUnitsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateOneWithoutGoal_report_valuesNestedInputSchema).optional()
}).strict();

export const Goal_report_valuesUncheckedUpdateWithoutUnitsInputSchema: z.ZodType<Prisma.Goal_report_valuesUncheckedUpdateWithoutUnitsInput> = z.object({
  goal_report_value_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  goal_report_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_integer: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_numeric: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value_text: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const AccountsCreateManyUsersInputSchema: z.ZodType<Prisma.AccountsCreateManyUsersInput> = z.object({
  account_id: z.string().uuid(),
  type: z.string().optional().nullable(),
  period_start: z.coerce.date().optional().nullable(),
  period_end: z.coerce.date().optional().nullable(),
  projects_label_by: z.string().optional().nullable(),
  label: z.string().optional().nullable()
}).strict();

export const Project_usersCreateManyUsersInputSchema: z.ZodType<Prisma.Project_usersCreateManyUsersInput> = z.object({
  project_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Subproject_usersCreateManyUsersInputSchema: z.ZodType<Prisma.Subproject_usersCreateManyUsersInput> = z.object({
  subproject_user_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  subproject_id: z.string().uuid().optional().nullable(),
  role: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const User_messagesCreateManyUsersInputSchema: z.ZodType<Prisma.User_messagesCreateManyUsersInput> = z.object({
  user_message_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  message_id: z.string().uuid().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  read: z.boolean().optional().nullable()
}).strict();

export const AccountsUpdateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateWithoutUsersInput> = z.object({
  account_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  chart_subjects: z.lazy(() => Chart_subjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  charts: z.lazy(() => ChartsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  fields: z.lazy(() => FieldsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrence_downloads: z.lazy(() => Gbif_occurrence_downloadsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_occurrences: z.lazy(() => Gbif_occurrencesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  gbif_taxa: z.lazy(() => Gbif_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_report_values: z.lazy(() => Goal_report_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goal_reports: z.lazy(() => Goal_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  goals: z.lazy(() => GoalsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  layer_options: z.lazy(() => Layer_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  list_values: z.lazy(() => List_valuesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observation_sources: z.lazy(() => Observation_sourcesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  observations: z.lazy(() => ObservationsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  persons: z.lazy(() => PersonsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  place_levels: z.lazy(() => Place_levelsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  places: z.lazy(() => PlacesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_reports: z.lazy(() => Project_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  project_users: z.lazy(() => Project_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_reports: z.lazy(() => Subproject_reportsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_taxa: z.lazy(() => Subproject_taxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subproject_users: z.lazy(() => Subproject_usersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxa: z.lazy(() => TaxaUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  taxonomies: z.lazy(() => TaxonomiesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  ui_options: z.lazy(() => Ui_optionsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  units: z.lazy(() => UnitsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  user_messages: z.lazy(() => User_messagesUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_displays: z.lazy(() => Vector_layer_displaysUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layer_geoms: z.lazy(() => Vector_layer_geomsUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional(),
  vector_layers: z.lazy(() => Vector_layersUncheckedUpdateManyWithoutAccountsNestedInputSchema).optional()
}).strict();

export const AccountsUncheckedUpdateManyWithoutAccountsInputSchema: z.ZodType<Prisma.AccountsUncheckedUpdateManyWithoutAccountsInput> = z.object({
  account_id: z.union([ z.string().uuid(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  type: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_start: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  period_end: z.union([ z.coerce.date(),z.lazy(() => NullableDateTimeFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  projects_label_by: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Project_usersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUpdateWithoutUsersInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutProject_usersNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutProject_usersNestedInputSchema).optional()
}).strict();

export const Project_usersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Project_usersUncheckedUpdateWithoutUsersInput> = z.object({
  project_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Subproject_usersUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUpdateWithoutUsersInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutSubproject_usersNestedInputSchema).optional(),
  subprojects: z.lazy(() => SubprojectsUpdateOneWithoutSubproject_usersNestedInputSchema).optional()
}).strict();

export const Subproject_usersUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.Subproject_usersUncheckedUpdateWithoutUsersInput> = z.object({
  subproject_user_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  subproject_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  role: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const User_messagesUpdateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUpdateWithoutUsersInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutUser_messagesNestedInputSchema).optional(),
  messages: z.lazy(() => MessagesUpdateOneWithoutUser_messagesNestedInputSchema).optional()
}).strict();

export const User_messagesUncheckedUpdateWithoutUsersInputSchema: z.ZodType<Prisma.User_messagesUncheckedUpdateWithoutUsersInput> = z.object({
  user_message_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  message_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  read: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Layer_optionsCreateManyVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsCreateManyVector_layersInput> = z.object({
  layer_option_id: z.string(),
  account_id: z.string().uuid().optional().nullable(),
  tile_layer_id: z.string().uuid().optional().nullable(),
  field: z.lazy(() => layer_options_field_enumSchema).optional().nullable(),
  value: z.string().optional().nullable(),
  label: z.string().optional().nullable(),
  queryable: z.boolean().optional().nullable(),
  legend_url: z.string().optional().nullable()
}).strict();

export const Vector_layer_displaysCreateManyVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyVector_layersInput> = z.object({
  vector_layer_display_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  display_property_value: z.string().optional().nullable(),
  marker_type: z.lazy(() => marker_type_enumSchema).optional().nullable(),
  circle_marker_radius: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  marker_symbol: z.string().optional().nullable(),
  marker_size: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  stroke: z.boolean().optional().nullable(),
  color: z.string().optional().nullable(),
  weight: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  line_cap: z.lazy(() => line_cap_enumSchema).optional().nullable(),
  line_join: z.string().optional().nullable(),
  dash_array: z.string().optional().nullable(),
  dash_offset: z.string().optional().nullable(),
  fill: z.boolean().optional().nullable(),
  fill_color: z.string().optional().nullable(),
  fill_opacity_percent: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  fill_rule: z.lazy(() => fill_rule_enumSchema).optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Vector_layer_geomsCreateManyVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyVector_layersInput> = z.object({
  vector_layer_geom_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_sw_lat: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lng: z.number().or(z.nan()).optional().nullable(),
  bbox_ne_lat: z.number().or(z.nan()).optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Layer_optionsUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUpdateWithoutVector_layersInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutLayer_optionsNestedInputSchema).optional(),
  tile_layers: z.lazy(() => Tile_layersUpdateOneWithoutLayer_optionsNestedInputSchema).optional()
}).strict();

export const Layer_optionsUncheckedUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Layer_optionsUncheckedUpdateWithoutVector_layersInput> = z.object({
  layer_option_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  tile_layer_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field: z.union([ z.lazy(() => layer_options_field_enumSchema),z.lazy(() => NullableEnumlayer_options_field_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  queryable: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  legend_url: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_displaysUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateWithoutVector_layersInput> = z.object({
  vector_layer_display_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layer_displaysNestedInputSchema).optional()
}).strict();

export const Vector_layer_displaysUncheckedUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_displaysUncheckedUpdateWithoutVector_layersInput> = z.object({
  vector_layer_display_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  display_property_value: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_type: z.union([ z.lazy(() => marker_type_enumSchema),z.lazy(() => NullableEnummarker_type_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  circle_marker_radius: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_symbol: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  marker_size: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  stroke: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  weight: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_cap: z.union([ z.lazy(() => line_cap_enumSchema),z.lazy(() => NullableEnumline_cap_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  line_join: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_array: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  dash_offset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_color: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_opacity_percent: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  fill_rule: z.union([ z.lazy(() => fill_rule_enumSchema),z.lazy(() => NullableEnumfill_rule_enumFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Vector_layer_geomsUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateWithoutVector_layersInput> = z.object({
  vector_layer_geom_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutVector_layer_geomsNestedInputSchema).optional()
}).strict();

export const Vector_layer_geomsUncheckedUpdateWithoutVector_layersInputSchema: z.ZodType<Prisma.Vector_layer_geomsUncheckedUpdateWithoutVector_layersInput> = z.object({
  vector_layer_geom_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  geometry: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  properties: z.union([ z.lazy(() => NullableJsonNullValueInputSchema),InputJsonValue ]).optional(),
  bbox_sw_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_sw_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lng: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  bbox_ne_lat: z.union([ z.number(),z.lazy(() => NullableFloatFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const FieldsCreateManyWidget_typesInputSchema: z.ZodType<Prisma.FieldsCreateManyWidget_typesInput> = z.object({
  field_id: z.string().uuid(),
  account_id: z.string().uuid().optional().nullable(),
  project_id: z.string().uuid().optional().nullable(),
  table_name: z.string().optional().nullable(),
  level: z.number().int().gte(-2147483648).lte(2147483647).optional().nullable(),
  field_type_id: z.string().uuid().optional().nullable(),
  name: z.string().optional().nullable(),
  field_label: z.string().optional().nullable(),
  list_id: z.string().uuid().optional().nullable(),
  preset: z.string().optional().nullable(),
  obsolete: z.boolean().optional().nullable(),
  label_replace_by_generated_column: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const Widgets_for_fieldsCreateManyWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyWidget_typesInput> = z.object({
  widget_for_field_id: z.string().uuid(),
  field_type_id: z.string().uuid().optional().nullable(),
  label: z.string().optional().nullable(),
  deleted: z.boolean().optional().nullable()
}).strict();

export const FieldsUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUpdateWithoutWidget_typesInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  accounts: z.lazy(() => AccountsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutFieldsNestedInputSchema).optional(),
  lists: z.lazy(() => ListsUpdateOneWithoutFieldsNestedInputSchema).optional(),
  projects: z.lazy(() => ProjectsUpdateOneWithoutFieldsNestedInputSchema).optional()
}).strict();

export const FieldsUncheckedUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.FieldsUncheckedUpdateWithoutWidget_typesInput> = z.object({
  field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  account_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  project_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  table_name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  level: z.union([ z.number(),z.lazy(() => NullableIntFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  name: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  list_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  preset: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  obsolete: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label_replace_by_generated_column: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

export const Widgets_for_fieldsUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  field_types: z.lazy(() => Field_typesUpdateOneWithoutWidgets_for_fieldsNestedInputSchema).optional()
}).strict();

export const Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInputSchema: z.ZodType<Prisma.Widgets_for_fieldsUncheckedUpdateWithoutWidget_typesInput> = z.object({
  widget_for_field_id: z.union([ z.string(),z.lazy(() => StringFieldUpdateOperationsInputSchema) ]).optional(),
  field_type_id: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  label: z.union([ z.string(),z.lazy(() => NullableStringFieldUpdateOperationsInputSchema) ]).optional().nullable(),
  deleted: z.union([ z.boolean(),z.lazy(() => NullableBoolFieldUpdateOperationsInputSchema) ]).optional().nullable(),
}).strict();

/////////////////////////////////////////
// ARGS
/////////////////////////////////////////

export const AccountsFindFirstArgsSchema: z.ZodType<Prisma.AccountsFindFirstArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindFirstArgs>

export const AccountsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.AccountsFindFirstOrThrowArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindFirstOrThrowArgs>

export const AccountsFindManyArgsSchema: z.ZodType<Prisma.AccountsFindManyArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: AccountsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.AccountsFindManyArgs>

export const AccountsAggregateArgsSchema: z.ZodType<Prisma.AccountsAggregateArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithRelationInputSchema.array(),AccountsOrderByWithRelationInputSchema ]).optional(),
  cursor: AccountsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.AccountsAggregateArgs>

export const AccountsGroupByArgsSchema: z.ZodType<Prisma.AccountsGroupByArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
  orderBy: z.union([ AccountsOrderByWithAggregationInputSchema.array(),AccountsOrderByWithAggregationInputSchema ]).optional(),
  by: AccountsScalarFieldEnumSchema.array(),
  having: AccountsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.AccountsGroupByArgs>

export const AccountsFindUniqueArgsSchema: z.ZodType<Prisma.AccountsFindUniqueArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsFindUniqueArgs>

export const AccountsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.AccountsFindUniqueOrThrowArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsFindUniqueOrThrowArgs>

export const Chart_subjectsFindFirstArgsSchema: z.ZodType<Prisma.Chart_subjectsFindFirstArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereInputSchema.optional(),
  orderBy: z.union([ Chart_subjectsOrderByWithRelationInputSchema.array(),Chart_subjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: Chart_subjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Chart_subjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsFindFirstArgs>

export const Chart_subjectsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Chart_subjectsFindFirstOrThrowArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereInputSchema.optional(),
  orderBy: z.union([ Chart_subjectsOrderByWithRelationInputSchema.array(),Chart_subjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: Chart_subjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Chart_subjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsFindFirstOrThrowArgs>

export const Chart_subjectsFindManyArgsSchema: z.ZodType<Prisma.Chart_subjectsFindManyArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereInputSchema.optional(),
  orderBy: z.union([ Chart_subjectsOrderByWithRelationInputSchema.array(),Chart_subjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: Chart_subjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Chart_subjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsFindManyArgs>

export const Chart_subjectsAggregateArgsSchema: z.ZodType<Prisma.Chart_subjectsAggregateArgs> = z.object({
  where: Chart_subjectsWhereInputSchema.optional(),
  orderBy: z.union([ Chart_subjectsOrderByWithRelationInputSchema.array(),Chart_subjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: Chart_subjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsAggregateArgs>

export const Chart_subjectsGroupByArgsSchema: z.ZodType<Prisma.Chart_subjectsGroupByArgs> = z.object({
  where: Chart_subjectsWhereInputSchema.optional(),
  orderBy: z.union([ Chart_subjectsOrderByWithAggregationInputSchema.array(),Chart_subjectsOrderByWithAggregationInputSchema ]).optional(),
  by: Chart_subjectsScalarFieldEnumSchema.array(),
  having: Chart_subjectsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsGroupByArgs>

export const Chart_subjectsFindUniqueArgsSchema: z.ZodType<Prisma.Chart_subjectsFindUniqueArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Chart_subjectsFindUniqueArgs>

export const Chart_subjectsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Chart_subjectsFindUniqueOrThrowArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Chart_subjectsFindUniqueOrThrowArgs>

export const ChartsFindFirstArgsSchema: z.ZodType<Prisma.ChartsFindFirstArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereInputSchema.optional(),
  orderBy: z.union([ ChartsOrderByWithRelationInputSchema.array(),ChartsOrderByWithRelationInputSchema ]).optional(),
  cursor: ChartsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ChartsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ChartsFindFirstArgs>

export const ChartsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ChartsFindFirstOrThrowArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereInputSchema.optional(),
  orderBy: z.union([ ChartsOrderByWithRelationInputSchema.array(),ChartsOrderByWithRelationInputSchema ]).optional(),
  cursor: ChartsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ChartsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ChartsFindFirstOrThrowArgs>

export const ChartsFindManyArgsSchema: z.ZodType<Prisma.ChartsFindManyArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereInputSchema.optional(),
  orderBy: z.union([ ChartsOrderByWithRelationInputSchema.array(),ChartsOrderByWithRelationInputSchema ]).optional(),
  cursor: ChartsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ChartsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ChartsFindManyArgs>

export const ChartsAggregateArgsSchema: z.ZodType<Prisma.ChartsAggregateArgs> = z.object({
  where: ChartsWhereInputSchema.optional(),
  orderBy: z.union([ ChartsOrderByWithRelationInputSchema.array(),ChartsOrderByWithRelationInputSchema ]).optional(),
  cursor: ChartsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ChartsAggregateArgs>

export const ChartsGroupByArgsSchema: z.ZodType<Prisma.ChartsGroupByArgs> = z.object({
  where: ChartsWhereInputSchema.optional(),
  orderBy: z.union([ ChartsOrderByWithAggregationInputSchema.array(),ChartsOrderByWithAggregationInputSchema ]).optional(),
  by: ChartsScalarFieldEnumSchema.array(),
  having: ChartsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ChartsGroupByArgs>

export const ChartsFindUniqueArgsSchema: z.ZodType<Prisma.ChartsFindUniqueArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ChartsFindUniqueArgs>

export const ChartsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ChartsFindUniqueOrThrowArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ChartsFindUniqueOrThrowArgs>

export const Field_typesFindFirstArgsSchema: z.ZodType<Prisma.Field_typesFindFirstArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindFirstArgs>

export const Field_typesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Field_typesFindFirstOrThrowArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindFirstOrThrowArgs>

export const Field_typesFindManyArgsSchema: z.ZodType<Prisma.Field_typesFindManyArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Field_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Field_typesFindManyArgs>

export const Field_typesAggregateArgsSchema: z.ZodType<Prisma.Field_typesAggregateArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithRelationInputSchema.array(),Field_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Field_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Field_typesAggregateArgs>

export const Field_typesGroupByArgsSchema: z.ZodType<Prisma.Field_typesGroupByArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
  orderBy: z.union([ Field_typesOrderByWithAggregationInputSchema.array(),Field_typesOrderByWithAggregationInputSchema ]).optional(),
  by: Field_typesScalarFieldEnumSchema.array(),
  having: Field_typesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Field_typesGroupByArgs>

export const Field_typesFindUniqueArgsSchema: z.ZodType<Prisma.Field_typesFindUniqueArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesFindUniqueArgs>

export const Field_typesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Field_typesFindUniqueOrThrowArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesFindUniqueOrThrowArgs>

export const FieldsFindFirstArgsSchema: z.ZodType<Prisma.FieldsFindFirstArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereInputSchema.optional(),
  orderBy: z.union([ FieldsOrderByWithRelationInputSchema.array(),FieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FieldsFindFirstArgs>

export const FieldsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.FieldsFindFirstOrThrowArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereInputSchema.optional(),
  orderBy: z.union([ FieldsOrderByWithRelationInputSchema.array(),FieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FieldsFindFirstOrThrowArgs>

export const FieldsFindManyArgsSchema: z.ZodType<Prisma.FieldsFindManyArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereInputSchema.optional(),
  orderBy: z.union([ FieldsOrderByWithRelationInputSchema.array(),FieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: FieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.FieldsFindManyArgs>

export const FieldsAggregateArgsSchema: z.ZodType<Prisma.FieldsAggregateArgs> = z.object({
  where: FieldsWhereInputSchema.optional(),
  orderBy: z.union([ FieldsOrderByWithRelationInputSchema.array(),FieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: FieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FieldsAggregateArgs>

export const FieldsGroupByArgsSchema: z.ZodType<Prisma.FieldsGroupByArgs> = z.object({
  where: FieldsWhereInputSchema.optional(),
  orderBy: z.union([ FieldsOrderByWithAggregationInputSchema.array(),FieldsOrderByWithAggregationInputSchema ]).optional(),
  by: FieldsScalarFieldEnumSchema.array(),
  having: FieldsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.FieldsGroupByArgs>

export const FieldsFindUniqueArgsSchema: z.ZodType<Prisma.FieldsFindUniqueArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FieldsFindUniqueArgs>

export const FieldsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.FieldsFindUniqueOrThrowArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FieldsFindUniqueOrThrowArgs>

export const Gbif_occurrence_downloadsFindFirstArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstArgs>

export const Gbif_occurrence_downloadsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstOrThrowArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindFirstOrThrowArgs>

export const Gbif_occurrence_downloadsFindManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindManyArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrence_downloadsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindManyArgs>

export const Gbif_occurrence_downloadsAggregateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsAggregateArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithRelationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrence_downloadsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsAggregateArgs>

export const Gbif_occurrence_downloadsGroupByArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsGroupByArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrence_downloadsOrderByWithAggregationInputSchema.array(),Gbif_occurrence_downloadsOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_occurrence_downloadsScalarFieldEnumSchema.array(),
  having: Gbif_occurrence_downloadsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsGroupByArgs>

export const Gbif_occurrence_downloadsFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueArgs>

export const Gbif_occurrence_downloadsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueOrThrowArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsFindUniqueOrThrowArgs>

export const Gbif_occurrencesFindFirstArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindFirstArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindFirstArgs>

export const Gbif_occurrencesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindFirstOrThrowArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindFirstOrThrowArgs>

export const Gbif_occurrencesFindManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindManyArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_occurrencesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindManyArgs>

export const Gbif_occurrencesAggregateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesAggregateArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithRelationInputSchema.array(),Gbif_occurrencesOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_occurrencesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesAggregateArgs>

export const Gbif_occurrencesGroupByArgsSchema: z.ZodType<Prisma.Gbif_occurrencesGroupByArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_occurrencesOrderByWithAggregationInputSchema.array(),Gbif_occurrencesOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_occurrencesScalarFieldEnumSchema.array(),
  having: Gbif_occurrencesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesGroupByArgs>

export const Gbif_occurrencesFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindUniqueArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindUniqueArgs>

export const Gbif_occurrencesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_occurrencesFindUniqueOrThrowArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesFindUniqueOrThrowArgs>

export const Gbif_taxaFindFirstArgsSchema: z.ZodType<Prisma.Gbif_taxaFindFirstArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindFirstArgs>

export const Gbif_taxaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Gbif_taxaFindFirstOrThrowArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindFirstOrThrowArgs>

export const Gbif_taxaFindManyArgsSchema: z.ZodType<Prisma.Gbif_taxaFindManyArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Gbif_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaFindManyArgs>

export const Gbif_taxaAggregateArgsSchema: z.ZodType<Prisma.Gbif_taxaAggregateArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithRelationInputSchema.array(),Gbif_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Gbif_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaAggregateArgs>

export const Gbif_taxaGroupByArgsSchema: z.ZodType<Prisma.Gbif_taxaGroupByArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Gbif_taxaOrderByWithAggregationInputSchema.array(),Gbif_taxaOrderByWithAggregationInputSchema ]).optional(),
  by: Gbif_taxaScalarFieldEnumSchema.array(),
  having: Gbif_taxaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaGroupByArgs>

export const Gbif_taxaFindUniqueArgsSchema: z.ZodType<Prisma.Gbif_taxaFindUniqueArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaFindUniqueArgs>

export const Gbif_taxaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Gbif_taxaFindUniqueOrThrowArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaFindUniqueOrThrowArgs>

export const Goal_report_valuesFindFirstArgsSchema: z.ZodType<Prisma.Goal_report_valuesFindFirstArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereInputSchema.optional(),
  orderBy: z.union([ Goal_report_valuesOrderByWithRelationInputSchema.array(),Goal_report_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_report_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_report_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesFindFirstArgs>

export const Goal_report_valuesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Goal_report_valuesFindFirstOrThrowArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereInputSchema.optional(),
  orderBy: z.union([ Goal_report_valuesOrderByWithRelationInputSchema.array(),Goal_report_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_report_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_report_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesFindFirstOrThrowArgs>

export const Goal_report_valuesFindManyArgsSchema: z.ZodType<Prisma.Goal_report_valuesFindManyArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereInputSchema.optional(),
  orderBy: z.union([ Goal_report_valuesOrderByWithRelationInputSchema.array(),Goal_report_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_report_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_report_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesFindManyArgs>

export const Goal_report_valuesAggregateArgsSchema: z.ZodType<Prisma.Goal_report_valuesAggregateArgs> = z.object({
  where: Goal_report_valuesWhereInputSchema.optional(),
  orderBy: z.union([ Goal_report_valuesOrderByWithRelationInputSchema.array(),Goal_report_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_report_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesAggregateArgs>

export const Goal_report_valuesGroupByArgsSchema: z.ZodType<Prisma.Goal_report_valuesGroupByArgs> = z.object({
  where: Goal_report_valuesWhereInputSchema.optional(),
  orderBy: z.union([ Goal_report_valuesOrderByWithAggregationInputSchema.array(),Goal_report_valuesOrderByWithAggregationInputSchema ]).optional(),
  by: Goal_report_valuesScalarFieldEnumSchema.array(),
  having: Goal_report_valuesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesGroupByArgs>

export const Goal_report_valuesFindUniqueArgsSchema: z.ZodType<Prisma.Goal_report_valuesFindUniqueArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_report_valuesFindUniqueArgs>

export const Goal_report_valuesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Goal_report_valuesFindUniqueOrThrowArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_report_valuesFindUniqueOrThrowArgs>

export const Goal_reportsFindFirstArgsSchema: z.ZodType<Prisma.Goal_reportsFindFirstArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Goal_reportsOrderByWithRelationInputSchema.array(),Goal_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsFindFirstArgs>

export const Goal_reportsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Goal_reportsFindFirstOrThrowArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Goal_reportsOrderByWithRelationInputSchema.array(),Goal_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsFindFirstOrThrowArgs>

export const Goal_reportsFindManyArgsSchema: z.ZodType<Prisma.Goal_reportsFindManyArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Goal_reportsOrderByWithRelationInputSchema.array(),Goal_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Goal_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsFindManyArgs>

export const Goal_reportsAggregateArgsSchema: z.ZodType<Prisma.Goal_reportsAggregateArgs> = z.object({
  where: Goal_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Goal_reportsOrderByWithRelationInputSchema.array(),Goal_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Goal_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsAggregateArgs>

export const Goal_reportsGroupByArgsSchema: z.ZodType<Prisma.Goal_reportsGroupByArgs> = z.object({
  where: Goal_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Goal_reportsOrderByWithAggregationInputSchema.array(),Goal_reportsOrderByWithAggregationInputSchema ]).optional(),
  by: Goal_reportsScalarFieldEnumSchema.array(),
  having: Goal_reportsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsGroupByArgs>

export const Goal_reportsFindUniqueArgsSchema: z.ZodType<Prisma.Goal_reportsFindUniqueArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_reportsFindUniqueArgs>

export const Goal_reportsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Goal_reportsFindUniqueOrThrowArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_reportsFindUniqueOrThrowArgs>

export const GoalsFindFirstArgsSchema: z.ZodType<Prisma.GoalsFindFirstArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereInputSchema.optional(),
  orderBy: z.union([ GoalsOrderByWithRelationInputSchema.array(),GoalsOrderByWithRelationInputSchema ]).optional(),
  cursor: GoalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: GoalsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.GoalsFindFirstArgs>

export const GoalsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.GoalsFindFirstOrThrowArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereInputSchema.optional(),
  orderBy: z.union([ GoalsOrderByWithRelationInputSchema.array(),GoalsOrderByWithRelationInputSchema ]).optional(),
  cursor: GoalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: GoalsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.GoalsFindFirstOrThrowArgs>

export const GoalsFindManyArgsSchema: z.ZodType<Prisma.GoalsFindManyArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereInputSchema.optional(),
  orderBy: z.union([ GoalsOrderByWithRelationInputSchema.array(),GoalsOrderByWithRelationInputSchema ]).optional(),
  cursor: GoalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: GoalsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.GoalsFindManyArgs>

export const GoalsAggregateArgsSchema: z.ZodType<Prisma.GoalsAggregateArgs> = z.object({
  where: GoalsWhereInputSchema.optional(),
  orderBy: z.union([ GoalsOrderByWithRelationInputSchema.array(),GoalsOrderByWithRelationInputSchema ]).optional(),
  cursor: GoalsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.GoalsAggregateArgs>

export const GoalsGroupByArgsSchema: z.ZodType<Prisma.GoalsGroupByArgs> = z.object({
  where: GoalsWhereInputSchema.optional(),
  orderBy: z.union([ GoalsOrderByWithAggregationInputSchema.array(),GoalsOrderByWithAggregationInputSchema ]).optional(),
  by: GoalsScalarFieldEnumSchema.array(),
  having: GoalsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.GoalsGroupByArgs>

export const GoalsFindUniqueArgsSchema: z.ZodType<Prisma.GoalsFindUniqueArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.GoalsFindUniqueArgs>

export const GoalsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.GoalsFindUniqueOrThrowArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.GoalsFindUniqueOrThrowArgs>

export const Layer_optionsFindFirstArgsSchema: z.ZodType<Prisma.Layer_optionsFindFirstArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Layer_optionsOrderByWithRelationInputSchema.array(),Layer_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Layer_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Layer_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsFindFirstArgs>

export const Layer_optionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Layer_optionsFindFirstOrThrowArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Layer_optionsOrderByWithRelationInputSchema.array(),Layer_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Layer_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Layer_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsFindFirstOrThrowArgs>

export const Layer_optionsFindManyArgsSchema: z.ZodType<Prisma.Layer_optionsFindManyArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Layer_optionsOrderByWithRelationInputSchema.array(),Layer_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Layer_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Layer_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsFindManyArgs>

export const Layer_optionsAggregateArgsSchema: z.ZodType<Prisma.Layer_optionsAggregateArgs> = z.object({
  where: Layer_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Layer_optionsOrderByWithRelationInputSchema.array(),Layer_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Layer_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsAggregateArgs>

export const Layer_optionsGroupByArgsSchema: z.ZodType<Prisma.Layer_optionsGroupByArgs> = z.object({
  where: Layer_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Layer_optionsOrderByWithAggregationInputSchema.array(),Layer_optionsOrderByWithAggregationInputSchema ]).optional(),
  by: Layer_optionsScalarFieldEnumSchema.array(),
  having: Layer_optionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsGroupByArgs>

export const Layer_optionsFindUniqueArgsSchema: z.ZodType<Prisma.Layer_optionsFindUniqueArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Layer_optionsFindUniqueArgs>

export const Layer_optionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Layer_optionsFindUniqueOrThrowArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Layer_optionsFindUniqueOrThrowArgs>

export const List_valuesFindFirstArgsSchema: z.ZodType<Prisma.List_valuesFindFirstArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereInputSchema.optional(),
  orderBy: z.union([ List_valuesOrderByWithRelationInputSchema.array(),List_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: List_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: List_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.List_valuesFindFirstArgs>

export const List_valuesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.List_valuesFindFirstOrThrowArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereInputSchema.optional(),
  orderBy: z.union([ List_valuesOrderByWithRelationInputSchema.array(),List_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: List_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: List_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.List_valuesFindFirstOrThrowArgs>

export const List_valuesFindManyArgsSchema: z.ZodType<Prisma.List_valuesFindManyArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereInputSchema.optional(),
  orderBy: z.union([ List_valuesOrderByWithRelationInputSchema.array(),List_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: List_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: List_valuesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.List_valuesFindManyArgs>

export const List_valuesAggregateArgsSchema: z.ZodType<Prisma.List_valuesAggregateArgs> = z.object({
  where: List_valuesWhereInputSchema.optional(),
  orderBy: z.union([ List_valuesOrderByWithRelationInputSchema.array(),List_valuesOrderByWithRelationInputSchema ]).optional(),
  cursor: List_valuesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.List_valuesAggregateArgs>

export const List_valuesGroupByArgsSchema: z.ZodType<Prisma.List_valuesGroupByArgs> = z.object({
  where: List_valuesWhereInputSchema.optional(),
  orderBy: z.union([ List_valuesOrderByWithAggregationInputSchema.array(),List_valuesOrderByWithAggregationInputSchema ]).optional(),
  by: List_valuesScalarFieldEnumSchema.array(),
  having: List_valuesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.List_valuesGroupByArgs>

export const List_valuesFindUniqueArgsSchema: z.ZodType<Prisma.List_valuesFindUniqueArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.List_valuesFindUniqueArgs>

export const List_valuesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.List_valuesFindUniqueOrThrowArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.List_valuesFindUniqueOrThrowArgs>

export const ListsFindFirstArgsSchema: z.ZodType<Prisma.ListsFindFirstArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindFirstArgs>

export const ListsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ListsFindFirstOrThrowArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindFirstOrThrowArgs>

export const ListsFindManyArgsSchema: z.ZodType<Prisma.ListsFindManyArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ListsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ListsFindManyArgs>

export const ListsAggregateArgsSchema: z.ZodType<Prisma.ListsAggregateArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithRelationInputSchema.array(),ListsOrderByWithRelationInputSchema ]).optional(),
  cursor: ListsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ListsAggregateArgs>

export const ListsGroupByArgsSchema: z.ZodType<Prisma.ListsGroupByArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
  orderBy: z.union([ ListsOrderByWithAggregationInputSchema.array(),ListsOrderByWithAggregationInputSchema ]).optional(),
  by: ListsScalarFieldEnumSchema.array(),
  having: ListsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ListsGroupByArgs>

export const ListsFindUniqueArgsSchema: z.ZodType<Prisma.ListsFindUniqueArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsFindUniqueArgs>

export const ListsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ListsFindUniqueOrThrowArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsFindUniqueOrThrowArgs>

export const MessagesFindFirstArgsSchema: z.ZodType<Prisma.MessagesFindFirstArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindFirstArgs>

export const MessagesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.MessagesFindFirstOrThrowArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindFirstOrThrowArgs>

export const MessagesFindManyArgsSchema: z.ZodType<Prisma.MessagesFindManyArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: MessagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.MessagesFindManyArgs>

export const MessagesAggregateArgsSchema: z.ZodType<Prisma.MessagesAggregateArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithRelationInputSchema.array(),MessagesOrderByWithRelationInputSchema ]).optional(),
  cursor: MessagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.MessagesAggregateArgs>

export const MessagesGroupByArgsSchema: z.ZodType<Prisma.MessagesGroupByArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
  orderBy: z.union([ MessagesOrderByWithAggregationInputSchema.array(),MessagesOrderByWithAggregationInputSchema ]).optional(),
  by: MessagesScalarFieldEnumSchema.array(),
  having: MessagesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.MessagesGroupByArgs>

export const MessagesFindUniqueArgsSchema: z.ZodType<Prisma.MessagesFindUniqueArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesFindUniqueArgs>

export const MessagesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.MessagesFindUniqueOrThrowArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesFindUniqueOrThrowArgs>

export const Observation_sourcesFindFirstArgsSchema: z.ZodType<Prisma.Observation_sourcesFindFirstArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereInputSchema.optional(),
  orderBy: z.union([ Observation_sourcesOrderByWithRelationInputSchema.array(),Observation_sourcesOrderByWithRelationInputSchema ]).optional(),
  cursor: Observation_sourcesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Observation_sourcesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesFindFirstArgs>

export const Observation_sourcesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Observation_sourcesFindFirstOrThrowArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereInputSchema.optional(),
  orderBy: z.union([ Observation_sourcesOrderByWithRelationInputSchema.array(),Observation_sourcesOrderByWithRelationInputSchema ]).optional(),
  cursor: Observation_sourcesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Observation_sourcesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesFindFirstOrThrowArgs>

export const Observation_sourcesFindManyArgsSchema: z.ZodType<Prisma.Observation_sourcesFindManyArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereInputSchema.optional(),
  orderBy: z.union([ Observation_sourcesOrderByWithRelationInputSchema.array(),Observation_sourcesOrderByWithRelationInputSchema ]).optional(),
  cursor: Observation_sourcesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Observation_sourcesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesFindManyArgs>

export const Observation_sourcesAggregateArgsSchema: z.ZodType<Prisma.Observation_sourcesAggregateArgs> = z.object({
  where: Observation_sourcesWhereInputSchema.optional(),
  orderBy: z.union([ Observation_sourcesOrderByWithRelationInputSchema.array(),Observation_sourcesOrderByWithRelationInputSchema ]).optional(),
  cursor: Observation_sourcesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesAggregateArgs>

export const Observation_sourcesGroupByArgsSchema: z.ZodType<Prisma.Observation_sourcesGroupByArgs> = z.object({
  where: Observation_sourcesWhereInputSchema.optional(),
  orderBy: z.union([ Observation_sourcesOrderByWithAggregationInputSchema.array(),Observation_sourcesOrderByWithAggregationInputSchema ]).optional(),
  by: Observation_sourcesScalarFieldEnumSchema.array(),
  having: Observation_sourcesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesGroupByArgs>

export const Observation_sourcesFindUniqueArgsSchema: z.ZodType<Prisma.Observation_sourcesFindUniqueArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Observation_sourcesFindUniqueArgs>

export const Observation_sourcesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Observation_sourcesFindUniqueOrThrowArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Observation_sourcesFindUniqueOrThrowArgs>

export const ObservationsFindFirstArgsSchema: z.ZodType<Prisma.ObservationsFindFirstArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereInputSchema.optional(),
  orderBy: z.union([ ObservationsOrderByWithRelationInputSchema.array(),ObservationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ObservationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ObservationsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ObservationsFindFirstArgs>

export const ObservationsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ObservationsFindFirstOrThrowArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereInputSchema.optional(),
  orderBy: z.union([ ObservationsOrderByWithRelationInputSchema.array(),ObservationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ObservationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ObservationsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ObservationsFindFirstOrThrowArgs>

export const ObservationsFindManyArgsSchema: z.ZodType<Prisma.ObservationsFindManyArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereInputSchema.optional(),
  orderBy: z.union([ ObservationsOrderByWithRelationInputSchema.array(),ObservationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ObservationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ObservationsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ObservationsFindManyArgs>

export const ObservationsAggregateArgsSchema: z.ZodType<Prisma.ObservationsAggregateArgs> = z.object({
  where: ObservationsWhereInputSchema.optional(),
  orderBy: z.union([ ObservationsOrderByWithRelationInputSchema.array(),ObservationsOrderByWithRelationInputSchema ]).optional(),
  cursor: ObservationsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ObservationsAggregateArgs>

export const ObservationsGroupByArgsSchema: z.ZodType<Prisma.ObservationsGroupByArgs> = z.object({
  where: ObservationsWhereInputSchema.optional(),
  orderBy: z.union([ ObservationsOrderByWithAggregationInputSchema.array(),ObservationsOrderByWithAggregationInputSchema ]).optional(),
  by: ObservationsScalarFieldEnumSchema.array(),
  having: ObservationsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ObservationsGroupByArgs>

export const ObservationsFindUniqueArgsSchema: z.ZodType<Prisma.ObservationsFindUniqueArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ObservationsFindUniqueArgs>

export const ObservationsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ObservationsFindUniqueOrThrowArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ObservationsFindUniqueOrThrowArgs>

export const PersonsFindFirstArgsSchema: z.ZodType<Prisma.PersonsFindFirstArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindFirstArgs>

export const PersonsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PersonsFindFirstOrThrowArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindFirstOrThrowArgs>

export const PersonsFindManyArgsSchema: z.ZodType<Prisma.PersonsFindManyArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PersonsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PersonsFindManyArgs>

export const PersonsAggregateArgsSchema: z.ZodType<Prisma.PersonsAggregateArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithRelationInputSchema.array(),PersonsOrderByWithRelationInputSchema ]).optional(),
  cursor: PersonsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PersonsAggregateArgs>

export const PersonsGroupByArgsSchema: z.ZodType<Prisma.PersonsGroupByArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
  orderBy: z.union([ PersonsOrderByWithAggregationInputSchema.array(),PersonsOrderByWithAggregationInputSchema ]).optional(),
  by: PersonsScalarFieldEnumSchema.array(),
  having: PersonsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PersonsGroupByArgs>

export const PersonsFindUniqueArgsSchema: z.ZodType<Prisma.PersonsFindUniqueArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsFindUniqueArgs>

export const PersonsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PersonsFindUniqueOrThrowArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsFindUniqueOrThrowArgs>

export const Place_levelsFindFirstArgsSchema: z.ZodType<Prisma.Place_levelsFindFirstArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindFirstArgs>

export const Place_levelsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Place_levelsFindFirstOrThrowArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindFirstOrThrowArgs>

export const Place_levelsFindManyArgsSchema: z.ZodType<Prisma.Place_levelsFindManyArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Place_levelsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsFindManyArgs>

export const Place_levelsAggregateArgsSchema: z.ZodType<Prisma.Place_levelsAggregateArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithRelationInputSchema.array(),Place_levelsOrderByWithRelationInputSchema ]).optional(),
  cursor: Place_levelsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsAggregateArgs>

export const Place_levelsGroupByArgsSchema: z.ZodType<Prisma.Place_levelsGroupByArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
  orderBy: z.union([ Place_levelsOrderByWithAggregationInputSchema.array(),Place_levelsOrderByWithAggregationInputSchema ]).optional(),
  by: Place_levelsScalarFieldEnumSchema.array(),
  having: Place_levelsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsGroupByArgs>

export const Place_levelsFindUniqueArgsSchema: z.ZodType<Prisma.Place_levelsFindUniqueArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsFindUniqueArgs>

export const Place_levelsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Place_levelsFindUniqueOrThrowArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsFindUniqueOrThrowArgs>

export const PlacesFindFirstArgsSchema: z.ZodType<Prisma.PlacesFindFirstArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereInputSchema.optional(),
  orderBy: z.union([ PlacesOrderByWithRelationInputSchema.array(),PlacesOrderByWithRelationInputSchema ]).optional(),
  cursor: PlacesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PlacesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PlacesFindFirstArgs>

export const PlacesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.PlacesFindFirstOrThrowArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereInputSchema.optional(),
  orderBy: z.union([ PlacesOrderByWithRelationInputSchema.array(),PlacesOrderByWithRelationInputSchema ]).optional(),
  cursor: PlacesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PlacesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PlacesFindFirstOrThrowArgs>

export const PlacesFindManyArgsSchema: z.ZodType<Prisma.PlacesFindManyArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereInputSchema.optional(),
  orderBy: z.union([ PlacesOrderByWithRelationInputSchema.array(),PlacesOrderByWithRelationInputSchema ]).optional(),
  cursor: PlacesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: PlacesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.PlacesFindManyArgs>

export const PlacesAggregateArgsSchema: z.ZodType<Prisma.PlacesAggregateArgs> = z.object({
  where: PlacesWhereInputSchema.optional(),
  orderBy: z.union([ PlacesOrderByWithRelationInputSchema.array(),PlacesOrderByWithRelationInputSchema ]).optional(),
  cursor: PlacesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PlacesAggregateArgs>

export const PlacesGroupByArgsSchema: z.ZodType<Prisma.PlacesGroupByArgs> = z.object({
  where: PlacesWhereInputSchema.optional(),
  orderBy: z.union([ PlacesOrderByWithAggregationInputSchema.array(),PlacesOrderByWithAggregationInputSchema ]).optional(),
  by: PlacesScalarFieldEnumSchema.array(),
  having: PlacesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.PlacesGroupByArgs>

export const PlacesFindUniqueArgsSchema: z.ZodType<Prisma.PlacesFindUniqueArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PlacesFindUniqueArgs>

export const PlacesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.PlacesFindUniqueOrThrowArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PlacesFindUniqueOrThrowArgs>

export const Project_reportsFindFirstArgsSchema: z.ZodType<Prisma.Project_reportsFindFirstArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Project_reportsOrderByWithRelationInputSchema.array(),Project_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsFindFirstArgs>

export const Project_reportsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Project_reportsFindFirstOrThrowArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Project_reportsOrderByWithRelationInputSchema.array(),Project_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsFindFirstOrThrowArgs>

export const Project_reportsFindManyArgsSchema: z.ZodType<Prisma.Project_reportsFindManyArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Project_reportsOrderByWithRelationInputSchema.array(),Project_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsFindManyArgs>

export const Project_reportsAggregateArgsSchema: z.ZodType<Prisma.Project_reportsAggregateArgs> = z.object({
  where: Project_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Project_reportsOrderByWithRelationInputSchema.array(),Project_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsAggregateArgs>

export const Project_reportsGroupByArgsSchema: z.ZodType<Prisma.Project_reportsGroupByArgs> = z.object({
  where: Project_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Project_reportsOrderByWithAggregationInputSchema.array(),Project_reportsOrderByWithAggregationInputSchema ]).optional(),
  by: Project_reportsScalarFieldEnumSchema.array(),
  having: Project_reportsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsGroupByArgs>

export const Project_reportsFindUniqueArgsSchema: z.ZodType<Prisma.Project_reportsFindUniqueArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_reportsFindUniqueArgs>

export const Project_reportsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Project_reportsFindUniqueOrThrowArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_reportsFindUniqueOrThrowArgs>

export const Project_usersFindFirstArgsSchema: z.ZodType<Prisma.Project_usersFindFirstArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindFirstArgs>

export const Project_usersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Project_usersFindFirstOrThrowArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindFirstOrThrowArgs>

export const Project_usersFindManyArgsSchema: z.ZodType<Prisma.Project_usersFindManyArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Project_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Project_usersFindManyArgs>

export const Project_usersAggregateArgsSchema: z.ZodType<Prisma.Project_usersAggregateArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithRelationInputSchema.array(),Project_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Project_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_usersAggregateArgs>

export const Project_usersGroupByArgsSchema: z.ZodType<Prisma.Project_usersGroupByArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
  orderBy: z.union([ Project_usersOrderByWithAggregationInputSchema.array(),Project_usersOrderByWithAggregationInputSchema ]).optional(),
  by: Project_usersScalarFieldEnumSchema.array(),
  having: Project_usersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Project_usersGroupByArgs>

export const Project_usersFindUniqueArgsSchema: z.ZodType<Prisma.Project_usersFindUniqueArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersFindUniqueArgs>

export const Project_usersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Project_usersFindUniqueOrThrowArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersFindUniqueOrThrowArgs>

export const ProjectsFindFirstArgsSchema: z.ZodType<Prisma.ProjectsFindFirstArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindFirstArgs>

export const ProjectsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.ProjectsFindFirstOrThrowArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindFirstOrThrowArgs>

export const ProjectsFindManyArgsSchema: z.ZodType<Prisma.ProjectsFindManyArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: ProjectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.ProjectsFindManyArgs>

export const ProjectsAggregateArgsSchema: z.ZodType<Prisma.ProjectsAggregateArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithRelationInputSchema.array(),ProjectsOrderByWithRelationInputSchema ]).optional(),
  cursor: ProjectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectsAggregateArgs>

export const ProjectsGroupByArgsSchema: z.ZodType<Prisma.ProjectsGroupByArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
  orderBy: z.union([ ProjectsOrderByWithAggregationInputSchema.array(),ProjectsOrderByWithAggregationInputSchema ]).optional(),
  by: ProjectsScalarFieldEnumSchema.array(),
  having: ProjectsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.ProjectsGroupByArgs>

export const ProjectsFindUniqueArgsSchema: z.ZodType<Prisma.ProjectsFindUniqueArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsFindUniqueArgs>

export const ProjectsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.ProjectsFindUniqueOrThrowArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsFindUniqueOrThrowArgs>

export const Subproject_reportsFindFirstArgsSchema: z.ZodType<Prisma.Subproject_reportsFindFirstArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_reportsOrderByWithRelationInputSchema.array(),Subproject_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsFindFirstArgs>

export const Subproject_reportsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Subproject_reportsFindFirstOrThrowArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_reportsOrderByWithRelationInputSchema.array(),Subproject_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsFindFirstOrThrowArgs>

export const Subproject_reportsFindManyArgsSchema: z.ZodType<Prisma.Subproject_reportsFindManyArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_reportsOrderByWithRelationInputSchema.array(),Subproject_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_reportsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsFindManyArgs>

export const Subproject_reportsAggregateArgsSchema: z.ZodType<Prisma.Subproject_reportsAggregateArgs> = z.object({
  where: Subproject_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_reportsOrderByWithRelationInputSchema.array(),Subproject_reportsOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_reportsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsAggregateArgs>

export const Subproject_reportsGroupByArgsSchema: z.ZodType<Prisma.Subproject_reportsGroupByArgs> = z.object({
  where: Subproject_reportsWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_reportsOrderByWithAggregationInputSchema.array(),Subproject_reportsOrderByWithAggregationInputSchema ]).optional(),
  by: Subproject_reportsScalarFieldEnumSchema.array(),
  having: Subproject_reportsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsGroupByArgs>

export const Subproject_reportsFindUniqueArgsSchema: z.ZodType<Prisma.Subproject_reportsFindUniqueArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_reportsFindUniqueArgs>

export const Subproject_reportsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Subproject_reportsFindUniqueOrThrowArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_reportsFindUniqueOrThrowArgs>

export const Subproject_taxaFindFirstArgsSchema: z.ZodType<Prisma.Subproject_taxaFindFirstArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_taxaOrderByWithRelationInputSchema.array(),Subproject_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaFindFirstArgs>

export const Subproject_taxaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Subproject_taxaFindFirstOrThrowArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_taxaOrderByWithRelationInputSchema.array(),Subproject_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaFindFirstOrThrowArgs>

export const Subproject_taxaFindManyArgsSchema: z.ZodType<Prisma.Subproject_taxaFindManyArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_taxaOrderByWithRelationInputSchema.array(),Subproject_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_taxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaFindManyArgs>

export const Subproject_taxaAggregateArgsSchema: z.ZodType<Prisma.Subproject_taxaAggregateArgs> = z.object({
  where: Subproject_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_taxaOrderByWithRelationInputSchema.array(),Subproject_taxaOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_taxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaAggregateArgs>

export const Subproject_taxaGroupByArgsSchema: z.ZodType<Prisma.Subproject_taxaGroupByArgs> = z.object({
  where: Subproject_taxaWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_taxaOrderByWithAggregationInputSchema.array(),Subproject_taxaOrderByWithAggregationInputSchema ]).optional(),
  by: Subproject_taxaScalarFieldEnumSchema.array(),
  having: Subproject_taxaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaGroupByArgs>

export const Subproject_taxaFindUniqueArgsSchema: z.ZodType<Prisma.Subproject_taxaFindUniqueArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_taxaFindUniqueArgs>

export const Subproject_taxaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Subproject_taxaFindUniqueOrThrowArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_taxaFindUniqueOrThrowArgs>

export const Subproject_usersFindFirstArgsSchema: z.ZodType<Prisma.Subproject_usersFindFirstArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_usersOrderByWithRelationInputSchema.array(),Subproject_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersFindFirstArgs>

export const Subproject_usersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Subproject_usersFindFirstOrThrowArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_usersOrderByWithRelationInputSchema.array(),Subproject_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersFindFirstOrThrowArgs>

export const Subproject_usersFindManyArgsSchema: z.ZodType<Prisma.Subproject_usersFindManyArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_usersOrderByWithRelationInputSchema.array(),Subproject_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Subproject_usersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersFindManyArgs>

export const Subproject_usersAggregateArgsSchema: z.ZodType<Prisma.Subproject_usersAggregateArgs> = z.object({
  where: Subproject_usersWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_usersOrderByWithRelationInputSchema.array(),Subproject_usersOrderByWithRelationInputSchema ]).optional(),
  cursor: Subproject_usersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersAggregateArgs>

export const Subproject_usersGroupByArgsSchema: z.ZodType<Prisma.Subproject_usersGroupByArgs> = z.object({
  where: Subproject_usersWhereInputSchema.optional(),
  orderBy: z.union([ Subproject_usersOrderByWithAggregationInputSchema.array(),Subproject_usersOrderByWithAggregationInputSchema ]).optional(),
  by: Subproject_usersScalarFieldEnumSchema.array(),
  having: Subproject_usersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersGroupByArgs>

export const Subproject_usersFindUniqueArgsSchema: z.ZodType<Prisma.Subproject_usersFindUniqueArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_usersFindUniqueArgs>

export const Subproject_usersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Subproject_usersFindUniqueOrThrowArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_usersFindUniqueOrThrowArgs>

export const SubprojectsFindFirstArgsSchema: z.ZodType<Prisma.SubprojectsFindFirstArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindFirstArgs>

export const SubprojectsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.SubprojectsFindFirstOrThrowArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindFirstOrThrowArgs>

export const SubprojectsFindManyArgsSchema: z.ZodType<Prisma.SubprojectsFindManyArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: SubprojectsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsFindManyArgs>

export const SubprojectsAggregateArgsSchema: z.ZodType<Prisma.SubprojectsAggregateArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithRelationInputSchema.array(),SubprojectsOrderByWithRelationInputSchema ]).optional(),
  cursor: SubprojectsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsAggregateArgs>

export const SubprojectsGroupByArgsSchema: z.ZodType<Prisma.SubprojectsGroupByArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
  orderBy: z.union([ SubprojectsOrderByWithAggregationInputSchema.array(),SubprojectsOrderByWithAggregationInputSchema ]).optional(),
  by: SubprojectsScalarFieldEnumSchema.array(),
  having: SubprojectsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsGroupByArgs>

export const SubprojectsFindUniqueArgsSchema: z.ZodType<Prisma.SubprojectsFindUniqueArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsFindUniqueArgs>

export const SubprojectsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.SubprojectsFindUniqueOrThrowArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsFindUniqueOrThrowArgs>

export const TaxaFindFirstArgsSchema: z.ZodType<Prisma.TaxaFindFirstArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindFirstArgs>

export const TaxaFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaxaFindFirstOrThrowArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindFirstOrThrowArgs>

export const TaxaFindManyArgsSchema: z.ZodType<Prisma.TaxaFindManyArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxaScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxaFindManyArgs>

export const TaxaAggregateArgsSchema: z.ZodType<Prisma.TaxaAggregateArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithRelationInputSchema.array(),TaxaOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxaWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxaAggregateArgs>

export const TaxaGroupByArgsSchema: z.ZodType<Prisma.TaxaGroupByArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
  orderBy: z.union([ TaxaOrderByWithAggregationInputSchema.array(),TaxaOrderByWithAggregationInputSchema ]).optional(),
  by: TaxaScalarFieldEnumSchema.array(),
  having: TaxaScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxaGroupByArgs>

export const TaxaFindUniqueArgsSchema: z.ZodType<Prisma.TaxaFindUniqueArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaFindUniqueArgs>

export const TaxaFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaxaFindUniqueOrThrowArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaFindUniqueOrThrowArgs>

export const TaxonomiesFindFirstArgsSchema: z.ZodType<Prisma.TaxonomiesFindFirstArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindFirstArgs>

export const TaxonomiesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.TaxonomiesFindFirstOrThrowArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindFirstOrThrowArgs>

export const TaxonomiesFindManyArgsSchema: z.ZodType<Prisma.TaxonomiesFindManyArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: TaxonomiesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesFindManyArgs>

export const TaxonomiesAggregateArgsSchema: z.ZodType<Prisma.TaxonomiesAggregateArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithRelationInputSchema.array(),TaxonomiesOrderByWithRelationInputSchema ]).optional(),
  cursor: TaxonomiesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesAggregateArgs>

export const TaxonomiesGroupByArgsSchema: z.ZodType<Prisma.TaxonomiesGroupByArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
  orderBy: z.union([ TaxonomiesOrderByWithAggregationInputSchema.array(),TaxonomiesOrderByWithAggregationInputSchema ]).optional(),
  by: TaxonomiesScalarFieldEnumSchema.array(),
  having: TaxonomiesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesGroupByArgs>

export const TaxonomiesFindUniqueArgsSchema: z.ZodType<Prisma.TaxonomiesFindUniqueArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesFindUniqueArgs>

export const TaxonomiesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.TaxonomiesFindUniqueOrThrowArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesFindUniqueOrThrowArgs>

export const Tile_layersFindFirstArgsSchema: z.ZodType<Prisma.Tile_layersFindFirstArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereInputSchema.optional(),
  orderBy: z.union([ Tile_layersOrderByWithRelationInputSchema.array(),Tile_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Tile_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Tile_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersFindFirstArgs>

export const Tile_layersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Tile_layersFindFirstOrThrowArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereInputSchema.optional(),
  orderBy: z.union([ Tile_layersOrderByWithRelationInputSchema.array(),Tile_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Tile_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Tile_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersFindFirstOrThrowArgs>

export const Tile_layersFindManyArgsSchema: z.ZodType<Prisma.Tile_layersFindManyArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereInputSchema.optional(),
  orderBy: z.union([ Tile_layersOrderByWithRelationInputSchema.array(),Tile_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Tile_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Tile_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersFindManyArgs>

export const Tile_layersAggregateArgsSchema: z.ZodType<Prisma.Tile_layersAggregateArgs> = z.object({
  where: Tile_layersWhereInputSchema.optional(),
  orderBy: z.union([ Tile_layersOrderByWithRelationInputSchema.array(),Tile_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Tile_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersAggregateArgs>

export const Tile_layersGroupByArgsSchema: z.ZodType<Prisma.Tile_layersGroupByArgs> = z.object({
  where: Tile_layersWhereInputSchema.optional(),
  orderBy: z.union([ Tile_layersOrderByWithAggregationInputSchema.array(),Tile_layersOrderByWithAggregationInputSchema ]).optional(),
  by: Tile_layersScalarFieldEnumSchema.array(),
  having: Tile_layersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersGroupByArgs>

export const Tile_layersFindUniqueArgsSchema: z.ZodType<Prisma.Tile_layersFindUniqueArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Tile_layersFindUniqueArgs>

export const Tile_layersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Tile_layersFindUniqueOrThrowArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Tile_layersFindUniqueOrThrowArgs>

export const Ui_optionsFindFirstArgsSchema: z.ZodType<Prisma.Ui_optionsFindFirstArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindFirstArgs>

export const Ui_optionsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Ui_optionsFindFirstOrThrowArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindFirstOrThrowArgs>

export const Ui_optionsFindManyArgsSchema: z.ZodType<Prisma.Ui_optionsFindManyArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Ui_optionsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsFindManyArgs>

export const Ui_optionsAggregateArgsSchema: z.ZodType<Prisma.Ui_optionsAggregateArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithRelationInputSchema.array(),Ui_optionsOrderByWithRelationInputSchema ]).optional(),
  cursor: Ui_optionsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsAggregateArgs>

export const Ui_optionsGroupByArgsSchema: z.ZodType<Prisma.Ui_optionsGroupByArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
  orderBy: z.union([ Ui_optionsOrderByWithAggregationInputSchema.array(),Ui_optionsOrderByWithAggregationInputSchema ]).optional(),
  by: Ui_optionsScalarFieldEnumSchema.array(),
  having: Ui_optionsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsGroupByArgs>

export const Ui_optionsFindUniqueArgsSchema: z.ZodType<Prisma.Ui_optionsFindUniqueArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsFindUniqueArgs>

export const Ui_optionsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Ui_optionsFindUniqueOrThrowArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsFindUniqueOrThrowArgs>

export const UnitsFindFirstArgsSchema: z.ZodType<Prisma.UnitsFindFirstArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereInputSchema.optional(),
  orderBy: z.union([ UnitsOrderByWithRelationInputSchema.array(),UnitsOrderByWithRelationInputSchema ]).optional(),
  cursor: UnitsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UnitsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UnitsFindFirstArgs>

export const UnitsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UnitsFindFirstOrThrowArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereInputSchema.optional(),
  orderBy: z.union([ UnitsOrderByWithRelationInputSchema.array(),UnitsOrderByWithRelationInputSchema ]).optional(),
  cursor: UnitsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UnitsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UnitsFindFirstOrThrowArgs>

export const UnitsFindManyArgsSchema: z.ZodType<Prisma.UnitsFindManyArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereInputSchema.optional(),
  orderBy: z.union([ UnitsOrderByWithRelationInputSchema.array(),UnitsOrderByWithRelationInputSchema ]).optional(),
  cursor: UnitsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UnitsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UnitsFindManyArgs>

export const UnitsAggregateArgsSchema: z.ZodType<Prisma.UnitsAggregateArgs> = z.object({
  where: UnitsWhereInputSchema.optional(),
  orderBy: z.union([ UnitsOrderByWithRelationInputSchema.array(),UnitsOrderByWithRelationInputSchema ]).optional(),
  cursor: UnitsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UnitsAggregateArgs>

export const UnitsGroupByArgsSchema: z.ZodType<Prisma.UnitsGroupByArgs> = z.object({
  where: UnitsWhereInputSchema.optional(),
  orderBy: z.union([ UnitsOrderByWithAggregationInputSchema.array(),UnitsOrderByWithAggregationInputSchema ]).optional(),
  by: UnitsScalarFieldEnumSchema.array(),
  having: UnitsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UnitsGroupByArgs>

export const UnitsFindUniqueArgsSchema: z.ZodType<Prisma.UnitsFindUniqueArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UnitsFindUniqueArgs>

export const UnitsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UnitsFindUniqueOrThrowArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UnitsFindUniqueOrThrowArgs>

export const User_messagesFindFirstArgsSchema: z.ZodType<Prisma.User_messagesFindFirstArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindFirstArgs>

export const User_messagesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.User_messagesFindFirstOrThrowArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindFirstOrThrowArgs>

export const User_messagesFindManyArgsSchema: z.ZodType<Prisma.User_messagesFindManyArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: User_messagesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.User_messagesFindManyArgs>

export const User_messagesAggregateArgsSchema: z.ZodType<Prisma.User_messagesAggregateArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithRelationInputSchema.array(),User_messagesOrderByWithRelationInputSchema ]).optional(),
  cursor: User_messagesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.User_messagesAggregateArgs>

export const User_messagesGroupByArgsSchema: z.ZodType<Prisma.User_messagesGroupByArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
  orderBy: z.union([ User_messagesOrderByWithAggregationInputSchema.array(),User_messagesOrderByWithAggregationInputSchema ]).optional(),
  by: User_messagesScalarFieldEnumSchema.array(),
  having: User_messagesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.User_messagesGroupByArgs>

export const User_messagesFindUniqueArgsSchema: z.ZodType<Prisma.User_messagesFindUniqueArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesFindUniqueArgs>

export const User_messagesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.User_messagesFindUniqueOrThrowArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesFindUniqueOrThrowArgs>

export const UsersFindFirstArgsSchema: z.ZodType<Prisma.UsersFindFirstArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindFirstArgs>

export const UsersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.UsersFindFirstOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindFirstOrThrowArgs>

export const UsersFindManyArgsSchema: z.ZodType<Prisma.UsersFindManyArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: UsersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.UsersFindManyArgs>

export const UsersAggregateArgsSchema: z.ZodType<Prisma.UsersAggregateArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithRelationInputSchema.array(),UsersOrderByWithRelationInputSchema ]).optional(),
  cursor: UsersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UsersAggregateArgs>

export const UsersGroupByArgsSchema: z.ZodType<Prisma.UsersGroupByArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
  orderBy: z.union([ UsersOrderByWithAggregationInputSchema.array(),UsersOrderByWithAggregationInputSchema ]).optional(),
  by: UsersScalarFieldEnumSchema.array(),
  having: UsersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.UsersGroupByArgs>

export const UsersFindUniqueArgsSchema: z.ZodType<Prisma.UsersFindUniqueArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersFindUniqueArgs>

export const UsersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.UsersFindUniqueOrThrowArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersFindUniqueOrThrowArgs>

export const Vector_layer_displaysFindFirstArgsSchema: z.ZodType<Prisma.Vector_layer_displaysFindFirstArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_displaysOrderByWithRelationInputSchema.array(),Vector_layer_displaysOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_displaysWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_displaysScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysFindFirstArgs>

export const Vector_layer_displaysFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Vector_layer_displaysFindFirstOrThrowArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_displaysOrderByWithRelationInputSchema.array(),Vector_layer_displaysOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_displaysWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_displaysScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysFindFirstOrThrowArgs>

export const Vector_layer_displaysFindManyArgsSchema: z.ZodType<Prisma.Vector_layer_displaysFindManyArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_displaysOrderByWithRelationInputSchema.array(),Vector_layer_displaysOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_displaysWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_displaysScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysFindManyArgs>

export const Vector_layer_displaysAggregateArgsSchema: z.ZodType<Prisma.Vector_layer_displaysAggregateArgs> = z.object({
  where: Vector_layer_displaysWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_displaysOrderByWithRelationInputSchema.array(),Vector_layer_displaysOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_displaysWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysAggregateArgs>

export const Vector_layer_displaysGroupByArgsSchema: z.ZodType<Prisma.Vector_layer_displaysGroupByArgs> = z.object({
  where: Vector_layer_displaysWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_displaysOrderByWithAggregationInputSchema.array(),Vector_layer_displaysOrderByWithAggregationInputSchema ]).optional(),
  by: Vector_layer_displaysScalarFieldEnumSchema.array(),
  having: Vector_layer_displaysScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysGroupByArgs>

export const Vector_layer_displaysFindUniqueArgsSchema: z.ZodType<Prisma.Vector_layer_displaysFindUniqueArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_displaysFindUniqueArgs>

export const Vector_layer_displaysFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Vector_layer_displaysFindUniqueOrThrowArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_displaysFindUniqueOrThrowArgs>

export const Vector_layer_geomsFindFirstArgsSchema: z.ZodType<Prisma.Vector_layer_geomsFindFirstArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_geomsOrderByWithRelationInputSchema.array(),Vector_layer_geomsOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_geomsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_geomsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsFindFirstArgs>

export const Vector_layer_geomsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Vector_layer_geomsFindFirstOrThrowArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_geomsOrderByWithRelationInputSchema.array(),Vector_layer_geomsOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_geomsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_geomsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsFindFirstOrThrowArgs>

export const Vector_layer_geomsFindManyArgsSchema: z.ZodType<Prisma.Vector_layer_geomsFindManyArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_geomsOrderByWithRelationInputSchema.array(),Vector_layer_geomsOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_geomsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layer_geomsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsFindManyArgs>

export const Vector_layer_geomsAggregateArgsSchema: z.ZodType<Prisma.Vector_layer_geomsAggregateArgs> = z.object({
  where: Vector_layer_geomsWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_geomsOrderByWithRelationInputSchema.array(),Vector_layer_geomsOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layer_geomsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsAggregateArgs>

export const Vector_layer_geomsGroupByArgsSchema: z.ZodType<Prisma.Vector_layer_geomsGroupByArgs> = z.object({
  where: Vector_layer_geomsWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layer_geomsOrderByWithAggregationInputSchema.array(),Vector_layer_geomsOrderByWithAggregationInputSchema ]).optional(),
  by: Vector_layer_geomsScalarFieldEnumSchema.array(),
  having: Vector_layer_geomsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsGroupByArgs>

export const Vector_layer_geomsFindUniqueArgsSchema: z.ZodType<Prisma.Vector_layer_geomsFindUniqueArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_geomsFindUniqueArgs>

export const Vector_layer_geomsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Vector_layer_geomsFindUniqueOrThrowArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_geomsFindUniqueOrThrowArgs>

export const Vector_layersFindFirstArgsSchema: z.ZodType<Prisma.Vector_layersFindFirstArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layersOrderByWithRelationInputSchema.array(),Vector_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersFindFirstArgs>

export const Vector_layersFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Vector_layersFindFirstOrThrowArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layersOrderByWithRelationInputSchema.array(),Vector_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersFindFirstOrThrowArgs>

export const Vector_layersFindManyArgsSchema: z.ZodType<Prisma.Vector_layersFindManyArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layersOrderByWithRelationInputSchema.array(),Vector_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Vector_layersScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersFindManyArgs>

export const Vector_layersAggregateArgsSchema: z.ZodType<Prisma.Vector_layersAggregateArgs> = z.object({
  where: Vector_layersWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layersOrderByWithRelationInputSchema.array(),Vector_layersOrderByWithRelationInputSchema ]).optional(),
  cursor: Vector_layersWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersAggregateArgs>

export const Vector_layersGroupByArgsSchema: z.ZodType<Prisma.Vector_layersGroupByArgs> = z.object({
  where: Vector_layersWhereInputSchema.optional(),
  orderBy: z.union([ Vector_layersOrderByWithAggregationInputSchema.array(),Vector_layersOrderByWithAggregationInputSchema ]).optional(),
  by: Vector_layersScalarFieldEnumSchema.array(),
  having: Vector_layersScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersGroupByArgs>

export const Vector_layersFindUniqueArgsSchema: z.ZodType<Prisma.Vector_layersFindUniqueArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layersFindUniqueArgs>

export const Vector_layersFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Vector_layersFindUniqueOrThrowArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layersFindUniqueOrThrowArgs>

export const Widget_typesFindFirstArgsSchema: z.ZodType<Prisma.Widget_typesFindFirstArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindFirstArgs>

export const Widget_typesFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Widget_typesFindFirstOrThrowArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindFirstOrThrowArgs>

export const Widget_typesFindManyArgsSchema: z.ZodType<Prisma.Widget_typesFindManyArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widget_typesScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesFindManyArgs>

export const Widget_typesAggregateArgsSchema: z.ZodType<Prisma.Widget_typesAggregateArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithRelationInputSchema.array(),Widget_typesOrderByWithRelationInputSchema ]).optional(),
  cursor: Widget_typesWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesAggregateArgs>

export const Widget_typesGroupByArgsSchema: z.ZodType<Prisma.Widget_typesGroupByArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
  orderBy: z.union([ Widget_typesOrderByWithAggregationInputSchema.array(),Widget_typesOrderByWithAggregationInputSchema ]).optional(),
  by: Widget_typesScalarFieldEnumSchema.array(),
  having: Widget_typesScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesGroupByArgs>

export const Widget_typesFindUniqueArgsSchema: z.ZodType<Prisma.Widget_typesFindUniqueArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesFindUniqueArgs>

export const Widget_typesFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Widget_typesFindUniqueOrThrowArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesFindUniqueOrThrowArgs>

export const Widgets_for_fieldsFindFirstArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindFirstArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindFirstArgs>

export const Widgets_for_fieldsFindFirstOrThrowArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindFirstOrThrowArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindFirstOrThrowArgs>

export const Widgets_for_fieldsFindManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindManyArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
  distinct: Widgets_for_fieldsScalarFieldEnumSchema.array().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindManyArgs>

export const Widgets_for_fieldsAggregateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsAggregateArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithRelationInputSchema.array(),Widgets_for_fieldsOrderByWithRelationInputSchema ]).optional(),
  cursor: Widgets_for_fieldsWhereUniqueInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsAggregateArgs>

export const Widgets_for_fieldsGroupByArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsGroupByArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
  orderBy: z.union([ Widgets_for_fieldsOrderByWithAggregationInputSchema.array(),Widgets_for_fieldsOrderByWithAggregationInputSchema ]).optional(),
  by: Widgets_for_fieldsScalarFieldEnumSchema.array(),
  having: Widgets_for_fieldsScalarWhereWithAggregatesInputSchema.optional(),
  take: z.number().optional(),
  skip: z.number().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsGroupByArgs>

export const Widgets_for_fieldsFindUniqueArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindUniqueArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindUniqueArgs>

export const Widgets_for_fieldsFindUniqueOrThrowArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsFindUniqueOrThrowArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsFindUniqueOrThrowArgs>

export const AccountsCreateArgsSchema: z.ZodType<Prisma.AccountsCreateArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  data: z.union([ AccountsCreateInputSchema,AccountsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.AccountsCreateArgs>

export const AccountsUpsertArgsSchema: z.ZodType<Prisma.AccountsUpsertArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
  create: z.union([ AccountsCreateInputSchema,AccountsUncheckedCreateInputSchema ]),
  update: z.union([ AccountsUpdateInputSchema,AccountsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.AccountsUpsertArgs>

export const AccountsCreateManyArgsSchema: z.ZodType<Prisma.AccountsCreateManyArgs> = z.object({
  data: AccountsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.AccountsCreateManyArgs>

export const AccountsDeleteArgsSchema: z.ZodType<Prisma.AccountsDeleteArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsDeleteArgs>

export const AccountsUpdateArgsSchema: z.ZodType<Prisma.AccountsUpdateArgs> = z.object({
  select: AccountsSelectSchema.optional(),
  include: AccountsIncludeSchema.optional(),
  data: z.union([ AccountsUpdateInputSchema,AccountsUncheckedUpdateInputSchema ]),
  where: AccountsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.AccountsUpdateArgs>

export const AccountsUpdateManyArgsSchema: z.ZodType<Prisma.AccountsUpdateManyArgs> = z.object({
  data: z.union([ AccountsUpdateManyMutationInputSchema,AccountsUncheckedUpdateManyInputSchema ]),
  where: AccountsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.AccountsUpdateManyArgs>

export const AccountsDeleteManyArgsSchema: z.ZodType<Prisma.AccountsDeleteManyArgs> = z.object({
  where: AccountsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.AccountsDeleteManyArgs>

export const Chart_subjectsCreateArgsSchema: z.ZodType<Prisma.Chart_subjectsCreateArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  data: z.union([ Chart_subjectsCreateInputSchema,Chart_subjectsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Chart_subjectsCreateArgs>

export const Chart_subjectsUpsertArgsSchema: z.ZodType<Prisma.Chart_subjectsUpsertArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereUniqueInputSchema,
  create: z.union([ Chart_subjectsCreateInputSchema,Chart_subjectsUncheckedCreateInputSchema ]),
  update: z.union([ Chart_subjectsUpdateInputSchema,Chart_subjectsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Chart_subjectsUpsertArgs>

export const Chart_subjectsCreateManyArgsSchema: z.ZodType<Prisma.Chart_subjectsCreateManyArgs> = z.object({
  data: Chart_subjectsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsCreateManyArgs>

export const Chart_subjectsDeleteArgsSchema: z.ZodType<Prisma.Chart_subjectsDeleteArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  where: Chart_subjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Chart_subjectsDeleteArgs>

export const Chart_subjectsUpdateArgsSchema: z.ZodType<Prisma.Chart_subjectsUpdateArgs> = z.object({
  select: Chart_subjectsSelectSchema.optional(),
  include: Chart_subjectsIncludeSchema.optional(),
  data: z.union([ Chart_subjectsUpdateInputSchema,Chart_subjectsUncheckedUpdateInputSchema ]),
  where: Chart_subjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Chart_subjectsUpdateArgs>

export const Chart_subjectsUpdateManyArgsSchema: z.ZodType<Prisma.Chart_subjectsUpdateManyArgs> = z.object({
  data: z.union([ Chart_subjectsUpdateManyMutationInputSchema,Chart_subjectsUncheckedUpdateManyInputSchema ]),
  where: Chart_subjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsUpdateManyArgs>

export const Chart_subjectsDeleteManyArgsSchema: z.ZodType<Prisma.Chart_subjectsDeleteManyArgs> = z.object({
  where: Chart_subjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Chart_subjectsDeleteManyArgs>

export const ChartsCreateArgsSchema: z.ZodType<Prisma.ChartsCreateArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  data: z.union([ ChartsCreateInputSchema,ChartsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ChartsCreateArgs>

export const ChartsUpsertArgsSchema: z.ZodType<Prisma.ChartsUpsertArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereUniqueInputSchema,
  create: z.union([ ChartsCreateInputSchema,ChartsUncheckedCreateInputSchema ]),
  update: z.union([ ChartsUpdateInputSchema,ChartsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ChartsUpsertArgs>

export const ChartsCreateManyArgsSchema: z.ZodType<Prisma.ChartsCreateManyArgs> = z.object({
  data: ChartsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ChartsCreateManyArgs>

export const ChartsDeleteArgsSchema: z.ZodType<Prisma.ChartsDeleteArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  where: ChartsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ChartsDeleteArgs>

export const ChartsUpdateArgsSchema: z.ZodType<Prisma.ChartsUpdateArgs> = z.object({
  select: ChartsSelectSchema.optional(),
  include: ChartsIncludeSchema.optional(),
  data: z.union([ ChartsUpdateInputSchema,ChartsUncheckedUpdateInputSchema ]),
  where: ChartsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ChartsUpdateArgs>

export const ChartsUpdateManyArgsSchema: z.ZodType<Prisma.ChartsUpdateManyArgs> = z.object({
  data: z.union([ ChartsUpdateManyMutationInputSchema,ChartsUncheckedUpdateManyInputSchema ]),
  where: ChartsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ChartsUpdateManyArgs>

export const ChartsDeleteManyArgsSchema: z.ZodType<Prisma.ChartsDeleteManyArgs> = z.object({
  where: ChartsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ChartsDeleteManyArgs>

export const Field_typesCreateArgsSchema: z.ZodType<Prisma.Field_typesCreateArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  data: z.union([ Field_typesCreateInputSchema,Field_typesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Field_typesCreateArgs>

export const Field_typesUpsertArgsSchema: z.ZodType<Prisma.Field_typesUpsertArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
  create: z.union([ Field_typesCreateInputSchema,Field_typesUncheckedCreateInputSchema ]),
  update: z.union([ Field_typesUpdateInputSchema,Field_typesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Field_typesUpsertArgs>

export const Field_typesCreateManyArgsSchema: z.ZodType<Prisma.Field_typesCreateManyArgs> = z.object({
  data: Field_typesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Field_typesCreateManyArgs>

export const Field_typesDeleteArgsSchema: z.ZodType<Prisma.Field_typesDeleteArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesDeleteArgs>

export const Field_typesUpdateArgsSchema: z.ZodType<Prisma.Field_typesUpdateArgs> = z.object({
  select: Field_typesSelectSchema.optional(),
  include: Field_typesIncludeSchema.optional(),
  data: z.union([ Field_typesUpdateInputSchema,Field_typesUncheckedUpdateInputSchema ]),
  where: Field_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Field_typesUpdateArgs>

export const Field_typesUpdateManyArgsSchema: z.ZodType<Prisma.Field_typesUpdateManyArgs> = z.object({
  data: z.union([ Field_typesUpdateManyMutationInputSchema,Field_typesUncheckedUpdateManyInputSchema ]),
  where: Field_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Field_typesUpdateManyArgs>

export const Field_typesDeleteManyArgsSchema: z.ZodType<Prisma.Field_typesDeleteManyArgs> = z.object({
  where: Field_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Field_typesDeleteManyArgs>

export const FieldsCreateArgsSchema: z.ZodType<Prisma.FieldsCreateArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  data: z.union([ FieldsCreateInputSchema,FieldsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.FieldsCreateArgs>

export const FieldsUpsertArgsSchema: z.ZodType<Prisma.FieldsUpsertArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereUniqueInputSchema,
  create: z.union([ FieldsCreateInputSchema,FieldsUncheckedCreateInputSchema ]),
  update: z.union([ FieldsUpdateInputSchema,FieldsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.FieldsUpsertArgs>

export const FieldsCreateManyArgsSchema: z.ZodType<Prisma.FieldsCreateManyArgs> = z.object({
  data: FieldsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.FieldsCreateManyArgs>

export const FieldsDeleteArgsSchema: z.ZodType<Prisma.FieldsDeleteArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  where: FieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FieldsDeleteArgs>

export const FieldsUpdateArgsSchema: z.ZodType<Prisma.FieldsUpdateArgs> = z.object({
  select: FieldsSelectSchema.optional(),
  include: FieldsIncludeSchema.optional(),
  data: z.union([ FieldsUpdateInputSchema,FieldsUncheckedUpdateInputSchema ]),
  where: FieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.FieldsUpdateArgs>

export const FieldsUpdateManyArgsSchema: z.ZodType<Prisma.FieldsUpdateManyArgs> = z.object({
  data: z.union([ FieldsUpdateManyMutationInputSchema,FieldsUncheckedUpdateManyInputSchema ]),
  where: FieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FieldsUpdateManyArgs>

export const FieldsDeleteManyArgsSchema: z.ZodType<Prisma.FieldsDeleteManyArgs> = z.object({
  where: FieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.FieldsDeleteManyArgs>

export const Gbif_occurrence_downloadsCreateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  data: z.union([ Gbif_occurrence_downloadsCreateInputSchema,Gbif_occurrence_downloadsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsCreateArgs>

export const Gbif_occurrence_downloadsUpsertArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
  create: z.union([ Gbif_occurrence_downloadsCreateInputSchema,Gbif_occurrence_downloadsUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_occurrence_downloadsUpdateInputSchema,Gbif_occurrence_downloadsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpsertArgs>

export const Gbif_occurrence_downloadsCreateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyArgs> = z.object({
  data: Gbif_occurrence_downloadsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsCreateManyArgs>

export const Gbif_occurrence_downloadsDeleteArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteArgs>

export const Gbif_occurrence_downloadsUpdateArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateArgs> = z.object({
  select: Gbif_occurrence_downloadsSelectSchema.optional(),
  include: Gbif_occurrence_downloadsIncludeSchema.optional(),
  data: z.union([ Gbif_occurrence_downloadsUpdateInputSchema,Gbif_occurrence_downloadsUncheckedUpdateInputSchema ]),
  where: Gbif_occurrence_downloadsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateArgs>

export const Gbif_occurrence_downloadsUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyArgs> = z.object({
  data: z.union([ Gbif_occurrence_downloadsUpdateManyMutationInputSchema,Gbif_occurrence_downloadsUncheckedUpdateManyInputSchema ]),
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsUpdateManyArgs>

export const Gbif_occurrence_downloadsDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteManyArgs> = z.object({
  where: Gbif_occurrence_downloadsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrence_downloadsDeleteManyArgs>

export const Gbif_occurrencesCreateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesCreateArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  data: z.union([ Gbif_occurrencesCreateInputSchema,Gbif_occurrencesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesCreateArgs>

export const Gbif_occurrencesUpsertArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpsertArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
  create: z.union([ Gbif_occurrencesCreateInputSchema,Gbif_occurrencesUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_occurrencesUpdateInputSchema,Gbif_occurrencesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpsertArgs>

export const Gbif_occurrencesCreateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesCreateManyArgs> = z.object({
  data: Gbif_occurrencesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesCreateManyArgs>

export const Gbif_occurrencesDeleteArgsSchema: z.ZodType<Prisma.Gbif_occurrencesDeleteArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesDeleteArgs>

export const Gbif_occurrencesUpdateArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateArgs> = z.object({
  select: Gbif_occurrencesSelectSchema.optional(),
  include: Gbif_occurrencesIncludeSchema.optional(),
  data: z.union([ Gbif_occurrencesUpdateInputSchema,Gbif_occurrencesUncheckedUpdateInputSchema ]),
  where: Gbif_occurrencesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpdateArgs>

export const Gbif_occurrencesUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesUpdateManyArgs> = z.object({
  data: z.union([ Gbif_occurrencesUpdateManyMutationInputSchema,Gbif_occurrencesUncheckedUpdateManyInputSchema ]),
  where: Gbif_occurrencesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesUpdateManyArgs>

export const Gbif_occurrencesDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_occurrencesDeleteManyArgs> = z.object({
  where: Gbif_occurrencesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_occurrencesDeleteManyArgs>

export const Gbif_taxaCreateArgsSchema: z.ZodType<Prisma.Gbif_taxaCreateArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  data: z.union([ Gbif_taxaCreateInputSchema,Gbif_taxaUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_taxaCreateArgs>

export const Gbif_taxaUpsertArgsSchema: z.ZodType<Prisma.Gbif_taxaUpsertArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
  create: z.union([ Gbif_taxaCreateInputSchema,Gbif_taxaUncheckedCreateInputSchema ]),
  update: z.union([ Gbif_taxaUpdateInputSchema,Gbif_taxaUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Gbif_taxaUpsertArgs>

export const Gbif_taxaCreateManyArgsSchema: z.ZodType<Prisma.Gbif_taxaCreateManyArgs> = z.object({
  data: Gbif_taxaCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaCreateManyArgs>

export const Gbif_taxaDeleteArgsSchema: z.ZodType<Prisma.Gbif_taxaDeleteArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaDeleteArgs>

export const Gbif_taxaUpdateArgsSchema: z.ZodType<Prisma.Gbif_taxaUpdateArgs> = z.object({
  select: Gbif_taxaSelectSchema.optional(),
  include: Gbif_taxaIncludeSchema.optional(),
  data: z.union([ Gbif_taxaUpdateInputSchema,Gbif_taxaUncheckedUpdateInputSchema ]),
  where: Gbif_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Gbif_taxaUpdateArgs>

export const Gbif_taxaUpdateManyArgsSchema: z.ZodType<Prisma.Gbif_taxaUpdateManyArgs> = z.object({
  data: z.union([ Gbif_taxaUpdateManyMutationInputSchema,Gbif_taxaUncheckedUpdateManyInputSchema ]),
  where: Gbif_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaUpdateManyArgs>

export const Gbif_taxaDeleteManyArgsSchema: z.ZodType<Prisma.Gbif_taxaDeleteManyArgs> = z.object({
  where: Gbif_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Gbif_taxaDeleteManyArgs>

export const Goal_report_valuesCreateArgsSchema: z.ZodType<Prisma.Goal_report_valuesCreateArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  data: z.union([ Goal_report_valuesCreateInputSchema,Goal_report_valuesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Goal_report_valuesCreateArgs>

export const Goal_report_valuesUpsertArgsSchema: z.ZodType<Prisma.Goal_report_valuesUpsertArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereUniqueInputSchema,
  create: z.union([ Goal_report_valuesCreateInputSchema,Goal_report_valuesUncheckedCreateInputSchema ]),
  update: z.union([ Goal_report_valuesUpdateInputSchema,Goal_report_valuesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Goal_report_valuesUpsertArgs>

export const Goal_report_valuesCreateManyArgsSchema: z.ZodType<Prisma.Goal_report_valuesCreateManyArgs> = z.object({
  data: Goal_report_valuesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesCreateManyArgs>

export const Goal_report_valuesDeleteArgsSchema: z.ZodType<Prisma.Goal_report_valuesDeleteArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  where: Goal_report_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_report_valuesDeleteArgs>

export const Goal_report_valuesUpdateArgsSchema: z.ZodType<Prisma.Goal_report_valuesUpdateArgs> = z.object({
  select: Goal_report_valuesSelectSchema.optional(),
  include: Goal_report_valuesIncludeSchema.optional(),
  data: z.union([ Goal_report_valuesUpdateInputSchema,Goal_report_valuesUncheckedUpdateInputSchema ]),
  where: Goal_report_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_report_valuesUpdateArgs>

export const Goal_report_valuesUpdateManyArgsSchema: z.ZodType<Prisma.Goal_report_valuesUpdateManyArgs> = z.object({
  data: z.union([ Goal_report_valuesUpdateManyMutationInputSchema,Goal_report_valuesUncheckedUpdateManyInputSchema ]),
  where: Goal_report_valuesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesUpdateManyArgs>

export const Goal_report_valuesDeleteManyArgsSchema: z.ZodType<Prisma.Goal_report_valuesDeleteManyArgs> = z.object({
  where: Goal_report_valuesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Goal_report_valuesDeleteManyArgs>

export const Goal_reportsCreateArgsSchema: z.ZodType<Prisma.Goal_reportsCreateArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  data: z.union([ Goal_reportsCreateInputSchema,Goal_reportsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Goal_reportsCreateArgs>

export const Goal_reportsUpsertArgsSchema: z.ZodType<Prisma.Goal_reportsUpsertArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereUniqueInputSchema,
  create: z.union([ Goal_reportsCreateInputSchema,Goal_reportsUncheckedCreateInputSchema ]),
  update: z.union([ Goal_reportsUpdateInputSchema,Goal_reportsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Goal_reportsUpsertArgs>

export const Goal_reportsCreateManyArgsSchema: z.ZodType<Prisma.Goal_reportsCreateManyArgs> = z.object({
  data: Goal_reportsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsCreateManyArgs>

export const Goal_reportsDeleteArgsSchema: z.ZodType<Prisma.Goal_reportsDeleteArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  where: Goal_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_reportsDeleteArgs>

export const Goal_reportsUpdateArgsSchema: z.ZodType<Prisma.Goal_reportsUpdateArgs> = z.object({
  select: Goal_reportsSelectSchema.optional(),
  include: Goal_reportsIncludeSchema.optional(),
  data: z.union([ Goal_reportsUpdateInputSchema,Goal_reportsUncheckedUpdateInputSchema ]),
  where: Goal_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Goal_reportsUpdateArgs>

export const Goal_reportsUpdateManyArgsSchema: z.ZodType<Prisma.Goal_reportsUpdateManyArgs> = z.object({
  data: z.union([ Goal_reportsUpdateManyMutationInputSchema,Goal_reportsUncheckedUpdateManyInputSchema ]),
  where: Goal_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsUpdateManyArgs>

export const Goal_reportsDeleteManyArgsSchema: z.ZodType<Prisma.Goal_reportsDeleteManyArgs> = z.object({
  where: Goal_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Goal_reportsDeleteManyArgs>

export const GoalsCreateArgsSchema: z.ZodType<Prisma.GoalsCreateArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  data: z.union([ GoalsCreateInputSchema,GoalsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.GoalsCreateArgs>

export const GoalsUpsertArgsSchema: z.ZodType<Prisma.GoalsUpsertArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereUniqueInputSchema,
  create: z.union([ GoalsCreateInputSchema,GoalsUncheckedCreateInputSchema ]),
  update: z.union([ GoalsUpdateInputSchema,GoalsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.GoalsUpsertArgs>

export const GoalsCreateManyArgsSchema: z.ZodType<Prisma.GoalsCreateManyArgs> = z.object({
  data: GoalsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.GoalsCreateManyArgs>

export const GoalsDeleteArgsSchema: z.ZodType<Prisma.GoalsDeleteArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  where: GoalsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.GoalsDeleteArgs>

export const GoalsUpdateArgsSchema: z.ZodType<Prisma.GoalsUpdateArgs> = z.object({
  select: GoalsSelectSchema.optional(),
  include: GoalsIncludeSchema.optional(),
  data: z.union([ GoalsUpdateInputSchema,GoalsUncheckedUpdateInputSchema ]),
  where: GoalsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.GoalsUpdateArgs>

export const GoalsUpdateManyArgsSchema: z.ZodType<Prisma.GoalsUpdateManyArgs> = z.object({
  data: z.union([ GoalsUpdateManyMutationInputSchema,GoalsUncheckedUpdateManyInputSchema ]),
  where: GoalsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.GoalsUpdateManyArgs>

export const GoalsDeleteManyArgsSchema: z.ZodType<Prisma.GoalsDeleteManyArgs> = z.object({
  where: GoalsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.GoalsDeleteManyArgs>

export const Layer_optionsCreateArgsSchema: z.ZodType<Prisma.Layer_optionsCreateArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  data: z.union([ Layer_optionsCreateInputSchema,Layer_optionsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Layer_optionsCreateArgs>

export const Layer_optionsUpsertArgsSchema: z.ZodType<Prisma.Layer_optionsUpsertArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereUniqueInputSchema,
  create: z.union([ Layer_optionsCreateInputSchema,Layer_optionsUncheckedCreateInputSchema ]),
  update: z.union([ Layer_optionsUpdateInputSchema,Layer_optionsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Layer_optionsUpsertArgs>

export const Layer_optionsCreateManyArgsSchema: z.ZodType<Prisma.Layer_optionsCreateManyArgs> = z.object({
  data: Layer_optionsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsCreateManyArgs>

export const Layer_optionsDeleteArgsSchema: z.ZodType<Prisma.Layer_optionsDeleteArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  where: Layer_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Layer_optionsDeleteArgs>

export const Layer_optionsUpdateArgsSchema: z.ZodType<Prisma.Layer_optionsUpdateArgs> = z.object({
  select: Layer_optionsSelectSchema.optional(),
  include: Layer_optionsIncludeSchema.optional(),
  data: z.union([ Layer_optionsUpdateInputSchema,Layer_optionsUncheckedUpdateInputSchema ]),
  where: Layer_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Layer_optionsUpdateArgs>

export const Layer_optionsUpdateManyArgsSchema: z.ZodType<Prisma.Layer_optionsUpdateManyArgs> = z.object({
  data: z.union([ Layer_optionsUpdateManyMutationInputSchema,Layer_optionsUncheckedUpdateManyInputSchema ]),
  where: Layer_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsUpdateManyArgs>

export const Layer_optionsDeleteManyArgsSchema: z.ZodType<Prisma.Layer_optionsDeleteManyArgs> = z.object({
  where: Layer_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Layer_optionsDeleteManyArgs>

export const List_valuesCreateArgsSchema: z.ZodType<Prisma.List_valuesCreateArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  data: z.union([ List_valuesCreateInputSchema,List_valuesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.List_valuesCreateArgs>

export const List_valuesUpsertArgsSchema: z.ZodType<Prisma.List_valuesUpsertArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereUniqueInputSchema,
  create: z.union([ List_valuesCreateInputSchema,List_valuesUncheckedCreateInputSchema ]),
  update: z.union([ List_valuesUpdateInputSchema,List_valuesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.List_valuesUpsertArgs>

export const List_valuesCreateManyArgsSchema: z.ZodType<Prisma.List_valuesCreateManyArgs> = z.object({
  data: List_valuesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.List_valuesCreateManyArgs>

export const List_valuesDeleteArgsSchema: z.ZodType<Prisma.List_valuesDeleteArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  where: List_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.List_valuesDeleteArgs>

export const List_valuesUpdateArgsSchema: z.ZodType<Prisma.List_valuesUpdateArgs> = z.object({
  select: List_valuesSelectSchema.optional(),
  include: List_valuesIncludeSchema.optional(),
  data: z.union([ List_valuesUpdateInputSchema,List_valuesUncheckedUpdateInputSchema ]),
  where: List_valuesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.List_valuesUpdateArgs>

export const List_valuesUpdateManyArgsSchema: z.ZodType<Prisma.List_valuesUpdateManyArgs> = z.object({
  data: z.union([ List_valuesUpdateManyMutationInputSchema,List_valuesUncheckedUpdateManyInputSchema ]),
  where: List_valuesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.List_valuesUpdateManyArgs>

export const List_valuesDeleteManyArgsSchema: z.ZodType<Prisma.List_valuesDeleteManyArgs> = z.object({
  where: List_valuesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.List_valuesDeleteManyArgs>

export const ListsCreateArgsSchema: z.ZodType<Prisma.ListsCreateArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  data: z.union([ ListsCreateInputSchema,ListsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ListsCreateArgs>

export const ListsUpsertArgsSchema: z.ZodType<Prisma.ListsUpsertArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
  create: z.union([ ListsCreateInputSchema,ListsUncheckedCreateInputSchema ]),
  update: z.union([ ListsUpdateInputSchema,ListsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ListsUpsertArgs>

export const ListsCreateManyArgsSchema: z.ZodType<Prisma.ListsCreateManyArgs> = z.object({
  data: ListsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ListsCreateManyArgs>

export const ListsDeleteArgsSchema: z.ZodType<Prisma.ListsDeleteArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsDeleteArgs>

export const ListsUpdateArgsSchema: z.ZodType<Prisma.ListsUpdateArgs> = z.object({
  select: ListsSelectSchema.optional(),
  include: ListsIncludeSchema.optional(),
  data: z.union([ ListsUpdateInputSchema,ListsUncheckedUpdateInputSchema ]),
  where: ListsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ListsUpdateArgs>

export const ListsUpdateManyArgsSchema: z.ZodType<Prisma.ListsUpdateManyArgs> = z.object({
  data: z.union([ ListsUpdateManyMutationInputSchema,ListsUncheckedUpdateManyInputSchema ]),
  where: ListsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ListsUpdateManyArgs>

export const ListsDeleteManyArgsSchema: z.ZodType<Prisma.ListsDeleteManyArgs> = z.object({
  where: ListsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ListsDeleteManyArgs>

export const MessagesCreateArgsSchema: z.ZodType<Prisma.MessagesCreateArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  data: z.union([ MessagesCreateInputSchema,MessagesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.MessagesCreateArgs>

export const MessagesUpsertArgsSchema: z.ZodType<Prisma.MessagesUpsertArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
  create: z.union([ MessagesCreateInputSchema,MessagesUncheckedCreateInputSchema ]),
  update: z.union([ MessagesUpdateInputSchema,MessagesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.MessagesUpsertArgs>

export const MessagesCreateManyArgsSchema: z.ZodType<Prisma.MessagesCreateManyArgs> = z.object({
  data: MessagesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.MessagesCreateManyArgs>

export const MessagesDeleteArgsSchema: z.ZodType<Prisma.MessagesDeleteArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesDeleteArgs>

export const MessagesUpdateArgsSchema: z.ZodType<Prisma.MessagesUpdateArgs> = z.object({
  select: MessagesSelectSchema.optional(),
  include: MessagesIncludeSchema.optional(),
  data: z.union([ MessagesUpdateInputSchema,MessagesUncheckedUpdateInputSchema ]),
  where: MessagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.MessagesUpdateArgs>

export const MessagesUpdateManyArgsSchema: z.ZodType<Prisma.MessagesUpdateManyArgs> = z.object({
  data: z.union([ MessagesUpdateManyMutationInputSchema,MessagesUncheckedUpdateManyInputSchema ]),
  where: MessagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.MessagesUpdateManyArgs>

export const MessagesDeleteManyArgsSchema: z.ZodType<Prisma.MessagesDeleteManyArgs> = z.object({
  where: MessagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.MessagesDeleteManyArgs>

export const Observation_sourcesCreateArgsSchema: z.ZodType<Prisma.Observation_sourcesCreateArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  data: z.union([ Observation_sourcesCreateInputSchema,Observation_sourcesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Observation_sourcesCreateArgs>

export const Observation_sourcesUpsertArgsSchema: z.ZodType<Prisma.Observation_sourcesUpsertArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereUniqueInputSchema,
  create: z.union([ Observation_sourcesCreateInputSchema,Observation_sourcesUncheckedCreateInputSchema ]),
  update: z.union([ Observation_sourcesUpdateInputSchema,Observation_sourcesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Observation_sourcesUpsertArgs>

export const Observation_sourcesCreateManyArgsSchema: z.ZodType<Prisma.Observation_sourcesCreateManyArgs> = z.object({
  data: Observation_sourcesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesCreateManyArgs>

export const Observation_sourcesDeleteArgsSchema: z.ZodType<Prisma.Observation_sourcesDeleteArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  where: Observation_sourcesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Observation_sourcesDeleteArgs>

export const Observation_sourcesUpdateArgsSchema: z.ZodType<Prisma.Observation_sourcesUpdateArgs> = z.object({
  select: Observation_sourcesSelectSchema.optional(),
  include: Observation_sourcesIncludeSchema.optional(),
  data: z.union([ Observation_sourcesUpdateInputSchema,Observation_sourcesUncheckedUpdateInputSchema ]),
  where: Observation_sourcesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Observation_sourcesUpdateArgs>

export const Observation_sourcesUpdateManyArgsSchema: z.ZodType<Prisma.Observation_sourcesUpdateManyArgs> = z.object({
  data: z.union([ Observation_sourcesUpdateManyMutationInputSchema,Observation_sourcesUncheckedUpdateManyInputSchema ]),
  where: Observation_sourcesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesUpdateManyArgs>

export const Observation_sourcesDeleteManyArgsSchema: z.ZodType<Prisma.Observation_sourcesDeleteManyArgs> = z.object({
  where: Observation_sourcesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Observation_sourcesDeleteManyArgs>

export const ObservationsCreateArgsSchema: z.ZodType<Prisma.ObservationsCreateArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  data: z.union([ ObservationsCreateInputSchema,ObservationsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ObservationsCreateArgs>

export const ObservationsUpsertArgsSchema: z.ZodType<Prisma.ObservationsUpsertArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereUniqueInputSchema,
  create: z.union([ ObservationsCreateInputSchema,ObservationsUncheckedCreateInputSchema ]),
  update: z.union([ ObservationsUpdateInputSchema,ObservationsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ObservationsUpsertArgs>

export const ObservationsCreateManyArgsSchema: z.ZodType<Prisma.ObservationsCreateManyArgs> = z.object({
  data: ObservationsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ObservationsCreateManyArgs>

export const ObservationsDeleteArgsSchema: z.ZodType<Prisma.ObservationsDeleteArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  where: ObservationsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ObservationsDeleteArgs>

export const ObservationsUpdateArgsSchema: z.ZodType<Prisma.ObservationsUpdateArgs> = z.object({
  select: ObservationsSelectSchema.optional(),
  include: ObservationsIncludeSchema.optional(),
  data: z.union([ ObservationsUpdateInputSchema,ObservationsUncheckedUpdateInputSchema ]),
  where: ObservationsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ObservationsUpdateArgs>

export const ObservationsUpdateManyArgsSchema: z.ZodType<Prisma.ObservationsUpdateManyArgs> = z.object({
  data: z.union([ ObservationsUpdateManyMutationInputSchema,ObservationsUncheckedUpdateManyInputSchema ]),
  where: ObservationsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ObservationsUpdateManyArgs>

export const ObservationsDeleteManyArgsSchema: z.ZodType<Prisma.ObservationsDeleteManyArgs> = z.object({
  where: ObservationsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ObservationsDeleteManyArgs>

export const PersonsCreateArgsSchema: z.ZodType<Prisma.PersonsCreateArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  data: z.union([ PersonsCreateInputSchema,PersonsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.PersonsCreateArgs>

export const PersonsUpsertArgsSchema: z.ZodType<Prisma.PersonsUpsertArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
  create: z.union([ PersonsCreateInputSchema,PersonsUncheckedCreateInputSchema ]),
  update: z.union([ PersonsUpdateInputSchema,PersonsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.PersonsUpsertArgs>

export const PersonsCreateManyArgsSchema: z.ZodType<Prisma.PersonsCreateManyArgs> = z.object({
  data: PersonsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.PersonsCreateManyArgs>

export const PersonsDeleteArgsSchema: z.ZodType<Prisma.PersonsDeleteArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsDeleteArgs>

export const PersonsUpdateArgsSchema: z.ZodType<Prisma.PersonsUpdateArgs> = z.object({
  select: PersonsSelectSchema.optional(),
  include: PersonsIncludeSchema.optional(),
  data: z.union([ PersonsUpdateInputSchema,PersonsUncheckedUpdateInputSchema ]),
  where: PersonsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PersonsUpdateArgs>

export const PersonsUpdateManyArgsSchema: z.ZodType<Prisma.PersonsUpdateManyArgs> = z.object({
  data: z.union([ PersonsUpdateManyMutationInputSchema,PersonsUncheckedUpdateManyInputSchema ]),
  where: PersonsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PersonsUpdateManyArgs>

export const PersonsDeleteManyArgsSchema: z.ZodType<Prisma.PersonsDeleteManyArgs> = z.object({
  where: PersonsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PersonsDeleteManyArgs>

export const Place_levelsCreateArgsSchema: z.ZodType<Prisma.Place_levelsCreateArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  data: z.union([ Place_levelsCreateInputSchema,Place_levelsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Place_levelsCreateArgs>

export const Place_levelsUpsertArgsSchema: z.ZodType<Prisma.Place_levelsUpsertArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
  create: z.union([ Place_levelsCreateInputSchema,Place_levelsUncheckedCreateInputSchema ]),
  update: z.union([ Place_levelsUpdateInputSchema,Place_levelsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Place_levelsUpsertArgs>

export const Place_levelsCreateManyArgsSchema: z.ZodType<Prisma.Place_levelsCreateManyArgs> = z.object({
  data: Place_levelsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Place_levelsCreateManyArgs>

export const Place_levelsDeleteArgsSchema: z.ZodType<Prisma.Place_levelsDeleteArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsDeleteArgs>

export const Place_levelsUpdateArgsSchema: z.ZodType<Prisma.Place_levelsUpdateArgs> = z.object({
  select: Place_levelsSelectSchema.optional(),
  include: Place_levelsIncludeSchema.optional(),
  data: z.union([ Place_levelsUpdateInputSchema,Place_levelsUncheckedUpdateInputSchema ]),
  where: Place_levelsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Place_levelsUpdateArgs>

export const Place_levelsUpdateManyArgsSchema: z.ZodType<Prisma.Place_levelsUpdateManyArgs> = z.object({
  data: z.union([ Place_levelsUpdateManyMutationInputSchema,Place_levelsUncheckedUpdateManyInputSchema ]),
  where: Place_levelsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Place_levelsUpdateManyArgs>

export const Place_levelsDeleteManyArgsSchema: z.ZodType<Prisma.Place_levelsDeleteManyArgs> = z.object({
  where: Place_levelsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Place_levelsDeleteManyArgs>

export const PlacesCreateArgsSchema: z.ZodType<Prisma.PlacesCreateArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  data: z.union([ PlacesCreateInputSchema,PlacesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.PlacesCreateArgs>

export const PlacesUpsertArgsSchema: z.ZodType<Prisma.PlacesUpsertArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereUniqueInputSchema,
  create: z.union([ PlacesCreateInputSchema,PlacesUncheckedCreateInputSchema ]),
  update: z.union([ PlacesUpdateInputSchema,PlacesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.PlacesUpsertArgs>

export const PlacesCreateManyArgsSchema: z.ZodType<Prisma.PlacesCreateManyArgs> = z.object({
  data: PlacesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.PlacesCreateManyArgs>

export const PlacesDeleteArgsSchema: z.ZodType<Prisma.PlacesDeleteArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  where: PlacesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PlacesDeleteArgs>

export const PlacesUpdateArgsSchema: z.ZodType<Prisma.PlacesUpdateArgs> = z.object({
  select: PlacesSelectSchema.optional(),
  include: PlacesIncludeSchema.optional(),
  data: z.union([ PlacesUpdateInputSchema,PlacesUncheckedUpdateInputSchema ]),
  where: PlacesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.PlacesUpdateArgs>

export const PlacesUpdateManyArgsSchema: z.ZodType<Prisma.PlacesUpdateManyArgs> = z.object({
  data: z.union([ PlacesUpdateManyMutationInputSchema,PlacesUncheckedUpdateManyInputSchema ]),
  where: PlacesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PlacesUpdateManyArgs>

export const PlacesDeleteManyArgsSchema: z.ZodType<Prisma.PlacesDeleteManyArgs> = z.object({
  where: PlacesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.PlacesDeleteManyArgs>

export const Project_reportsCreateArgsSchema: z.ZodType<Prisma.Project_reportsCreateArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  data: z.union([ Project_reportsCreateInputSchema,Project_reportsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_reportsCreateArgs>

export const Project_reportsUpsertArgsSchema: z.ZodType<Prisma.Project_reportsUpsertArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereUniqueInputSchema,
  create: z.union([ Project_reportsCreateInputSchema,Project_reportsUncheckedCreateInputSchema ]),
  update: z.union([ Project_reportsUpdateInputSchema,Project_reportsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_reportsUpsertArgs>

export const Project_reportsCreateManyArgsSchema: z.ZodType<Prisma.Project_reportsCreateManyArgs> = z.object({
  data: Project_reportsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Project_reportsCreateManyArgs>

export const Project_reportsDeleteArgsSchema: z.ZodType<Prisma.Project_reportsDeleteArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  where: Project_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_reportsDeleteArgs>

export const Project_reportsUpdateArgsSchema: z.ZodType<Prisma.Project_reportsUpdateArgs> = z.object({
  select: Project_reportsSelectSchema.optional(),
  include: Project_reportsIncludeSchema.optional(),
  data: z.union([ Project_reportsUpdateInputSchema,Project_reportsUncheckedUpdateInputSchema ]),
  where: Project_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_reportsUpdateArgs>

export const Project_reportsUpdateManyArgsSchema: z.ZodType<Prisma.Project_reportsUpdateManyArgs> = z.object({
  data: z.union([ Project_reportsUpdateManyMutationInputSchema,Project_reportsUncheckedUpdateManyInputSchema ]),
  where: Project_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_reportsUpdateManyArgs>

export const Project_reportsDeleteManyArgsSchema: z.ZodType<Prisma.Project_reportsDeleteManyArgs> = z.object({
  where: Project_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_reportsDeleteManyArgs>

export const Project_usersCreateArgsSchema: z.ZodType<Prisma.Project_usersCreateArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  data: z.union([ Project_usersCreateInputSchema,Project_usersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_usersCreateArgs>

export const Project_usersUpsertArgsSchema: z.ZodType<Prisma.Project_usersUpsertArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
  create: z.union([ Project_usersCreateInputSchema,Project_usersUncheckedCreateInputSchema ]),
  update: z.union([ Project_usersUpdateInputSchema,Project_usersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Project_usersUpsertArgs>

export const Project_usersCreateManyArgsSchema: z.ZodType<Prisma.Project_usersCreateManyArgs> = z.object({
  data: Project_usersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Project_usersCreateManyArgs>

export const Project_usersDeleteArgsSchema: z.ZodType<Prisma.Project_usersDeleteArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersDeleteArgs>

export const Project_usersUpdateArgsSchema: z.ZodType<Prisma.Project_usersUpdateArgs> = z.object({
  select: Project_usersSelectSchema.optional(),
  include: Project_usersIncludeSchema.optional(),
  data: z.union([ Project_usersUpdateInputSchema,Project_usersUncheckedUpdateInputSchema ]),
  where: Project_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Project_usersUpdateArgs>

export const Project_usersUpdateManyArgsSchema: z.ZodType<Prisma.Project_usersUpdateManyArgs> = z.object({
  data: z.union([ Project_usersUpdateManyMutationInputSchema,Project_usersUncheckedUpdateManyInputSchema ]),
  where: Project_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_usersUpdateManyArgs>

export const Project_usersDeleteManyArgsSchema: z.ZodType<Prisma.Project_usersDeleteManyArgs> = z.object({
  where: Project_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Project_usersDeleteManyArgs>

export const ProjectsCreateArgsSchema: z.ZodType<Prisma.ProjectsCreateArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  data: z.union([ ProjectsCreateInputSchema,ProjectsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectsCreateArgs>

export const ProjectsUpsertArgsSchema: z.ZodType<Prisma.ProjectsUpsertArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
  create: z.union([ ProjectsCreateInputSchema,ProjectsUncheckedCreateInputSchema ]),
  update: z.union([ ProjectsUpdateInputSchema,ProjectsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.ProjectsUpsertArgs>

export const ProjectsCreateManyArgsSchema: z.ZodType<Prisma.ProjectsCreateManyArgs> = z.object({
  data: ProjectsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.ProjectsCreateManyArgs>

export const ProjectsDeleteArgsSchema: z.ZodType<Prisma.ProjectsDeleteArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsDeleteArgs>

export const ProjectsUpdateArgsSchema: z.ZodType<Prisma.ProjectsUpdateArgs> = z.object({
  select: ProjectsSelectSchema.optional(),
  include: ProjectsIncludeSchema.optional(),
  data: z.union([ ProjectsUpdateInputSchema,ProjectsUncheckedUpdateInputSchema ]),
  where: ProjectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.ProjectsUpdateArgs>

export const ProjectsUpdateManyArgsSchema: z.ZodType<Prisma.ProjectsUpdateManyArgs> = z.object({
  data: z.union([ ProjectsUpdateManyMutationInputSchema,ProjectsUncheckedUpdateManyInputSchema ]),
  where: ProjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectsUpdateManyArgs>

export const ProjectsDeleteManyArgsSchema: z.ZodType<Prisma.ProjectsDeleteManyArgs> = z.object({
  where: ProjectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.ProjectsDeleteManyArgs>

export const Subproject_reportsCreateArgsSchema: z.ZodType<Prisma.Subproject_reportsCreateArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  data: z.union([ Subproject_reportsCreateInputSchema,Subproject_reportsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_reportsCreateArgs>

export const Subproject_reportsUpsertArgsSchema: z.ZodType<Prisma.Subproject_reportsUpsertArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereUniqueInputSchema,
  create: z.union([ Subproject_reportsCreateInputSchema,Subproject_reportsUncheckedCreateInputSchema ]),
  update: z.union([ Subproject_reportsUpdateInputSchema,Subproject_reportsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_reportsUpsertArgs>

export const Subproject_reportsCreateManyArgsSchema: z.ZodType<Prisma.Subproject_reportsCreateManyArgs> = z.object({
  data: Subproject_reportsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsCreateManyArgs>

export const Subproject_reportsDeleteArgsSchema: z.ZodType<Prisma.Subproject_reportsDeleteArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  where: Subproject_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_reportsDeleteArgs>

export const Subproject_reportsUpdateArgsSchema: z.ZodType<Prisma.Subproject_reportsUpdateArgs> = z.object({
  select: Subproject_reportsSelectSchema.optional(),
  include: Subproject_reportsIncludeSchema.optional(),
  data: z.union([ Subproject_reportsUpdateInputSchema,Subproject_reportsUncheckedUpdateInputSchema ]),
  where: Subproject_reportsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_reportsUpdateArgs>

export const Subproject_reportsUpdateManyArgsSchema: z.ZodType<Prisma.Subproject_reportsUpdateManyArgs> = z.object({
  data: z.union([ Subproject_reportsUpdateManyMutationInputSchema,Subproject_reportsUncheckedUpdateManyInputSchema ]),
  where: Subproject_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsUpdateManyArgs>

export const Subproject_reportsDeleteManyArgsSchema: z.ZodType<Prisma.Subproject_reportsDeleteManyArgs> = z.object({
  where: Subproject_reportsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_reportsDeleteManyArgs>

export const Subproject_taxaCreateArgsSchema: z.ZodType<Prisma.Subproject_taxaCreateArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  data: z.union([ Subproject_taxaCreateInputSchema,Subproject_taxaUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_taxaCreateArgs>

export const Subproject_taxaUpsertArgsSchema: z.ZodType<Prisma.Subproject_taxaUpsertArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereUniqueInputSchema,
  create: z.union([ Subproject_taxaCreateInputSchema,Subproject_taxaUncheckedCreateInputSchema ]),
  update: z.union([ Subproject_taxaUpdateInputSchema,Subproject_taxaUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_taxaUpsertArgs>

export const Subproject_taxaCreateManyArgsSchema: z.ZodType<Prisma.Subproject_taxaCreateManyArgs> = z.object({
  data: Subproject_taxaCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaCreateManyArgs>

export const Subproject_taxaDeleteArgsSchema: z.ZodType<Prisma.Subproject_taxaDeleteArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  where: Subproject_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_taxaDeleteArgs>

export const Subproject_taxaUpdateArgsSchema: z.ZodType<Prisma.Subproject_taxaUpdateArgs> = z.object({
  select: Subproject_taxaSelectSchema.optional(),
  include: Subproject_taxaIncludeSchema.optional(),
  data: z.union([ Subproject_taxaUpdateInputSchema,Subproject_taxaUncheckedUpdateInputSchema ]),
  where: Subproject_taxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_taxaUpdateArgs>

export const Subproject_taxaUpdateManyArgsSchema: z.ZodType<Prisma.Subproject_taxaUpdateManyArgs> = z.object({
  data: z.union([ Subproject_taxaUpdateManyMutationInputSchema,Subproject_taxaUncheckedUpdateManyInputSchema ]),
  where: Subproject_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaUpdateManyArgs>

export const Subproject_taxaDeleteManyArgsSchema: z.ZodType<Prisma.Subproject_taxaDeleteManyArgs> = z.object({
  where: Subproject_taxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_taxaDeleteManyArgs>

export const Subproject_usersCreateArgsSchema: z.ZodType<Prisma.Subproject_usersCreateArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  data: z.union([ Subproject_usersCreateInputSchema,Subproject_usersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_usersCreateArgs>

export const Subproject_usersUpsertArgsSchema: z.ZodType<Prisma.Subproject_usersUpsertArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereUniqueInputSchema,
  create: z.union([ Subproject_usersCreateInputSchema,Subproject_usersUncheckedCreateInputSchema ]),
  update: z.union([ Subproject_usersUpdateInputSchema,Subproject_usersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Subproject_usersUpsertArgs>

export const Subproject_usersCreateManyArgsSchema: z.ZodType<Prisma.Subproject_usersCreateManyArgs> = z.object({
  data: Subproject_usersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersCreateManyArgs>

export const Subproject_usersDeleteArgsSchema: z.ZodType<Prisma.Subproject_usersDeleteArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  where: Subproject_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_usersDeleteArgs>

export const Subproject_usersUpdateArgsSchema: z.ZodType<Prisma.Subproject_usersUpdateArgs> = z.object({
  select: Subproject_usersSelectSchema.optional(),
  include: Subproject_usersIncludeSchema.optional(),
  data: z.union([ Subproject_usersUpdateInputSchema,Subproject_usersUncheckedUpdateInputSchema ]),
  where: Subproject_usersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Subproject_usersUpdateArgs>

export const Subproject_usersUpdateManyArgsSchema: z.ZodType<Prisma.Subproject_usersUpdateManyArgs> = z.object({
  data: z.union([ Subproject_usersUpdateManyMutationInputSchema,Subproject_usersUncheckedUpdateManyInputSchema ]),
  where: Subproject_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersUpdateManyArgs>

export const Subproject_usersDeleteManyArgsSchema: z.ZodType<Prisma.Subproject_usersDeleteManyArgs> = z.object({
  where: Subproject_usersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Subproject_usersDeleteManyArgs>

export const SubprojectsCreateArgsSchema: z.ZodType<Prisma.SubprojectsCreateArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  data: z.union([ SubprojectsCreateInputSchema,SubprojectsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.SubprojectsCreateArgs>

export const SubprojectsUpsertArgsSchema: z.ZodType<Prisma.SubprojectsUpsertArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
  create: z.union([ SubprojectsCreateInputSchema,SubprojectsUncheckedCreateInputSchema ]),
  update: z.union([ SubprojectsUpdateInputSchema,SubprojectsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.SubprojectsUpsertArgs>

export const SubprojectsCreateManyArgsSchema: z.ZodType<Prisma.SubprojectsCreateManyArgs> = z.object({
  data: SubprojectsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.SubprojectsCreateManyArgs>

export const SubprojectsDeleteArgsSchema: z.ZodType<Prisma.SubprojectsDeleteArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsDeleteArgs>

export const SubprojectsUpdateArgsSchema: z.ZodType<Prisma.SubprojectsUpdateArgs> = z.object({
  select: SubprojectsSelectSchema.optional(),
  include: SubprojectsIncludeSchema.optional(),
  data: z.union([ SubprojectsUpdateInputSchema,SubprojectsUncheckedUpdateInputSchema ]),
  where: SubprojectsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.SubprojectsUpdateArgs>

export const SubprojectsUpdateManyArgsSchema: z.ZodType<Prisma.SubprojectsUpdateManyArgs> = z.object({
  data: z.union([ SubprojectsUpdateManyMutationInputSchema,SubprojectsUncheckedUpdateManyInputSchema ]),
  where: SubprojectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.SubprojectsUpdateManyArgs>

export const SubprojectsDeleteManyArgsSchema: z.ZodType<Prisma.SubprojectsDeleteManyArgs> = z.object({
  where: SubprojectsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.SubprojectsDeleteManyArgs>

export const TaxaCreateArgsSchema: z.ZodType<Prisma.TaxaCreateArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  data: z.union([ TaxaCreateInputSchema,TaxaUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxaCreateArgs>

export const TaxaUpsertArgsSchema: z.ZodType<Prisma.TaxaUpsertArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
  create: z.union([ TaxaCreateInputSchema,TaxaUncheckedCreateInputSchema ]),
  update: z.union([ TaxaUpdateInputSchema,TaxaUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxaUpsertArgs>

export const TaxaCreateManyArgsSchema: z.ZodType<Prisma.TaxaCreateManyArgs> = z.object({
  data: TaxaCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaxaCreateManyArgs>

export const TaxaDeleteArgsSchema: z.ZodType<Prisma.TaxaDeleteArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaDeleteArgs>

export const TaxaUpdateArgsSchema: z.ZodType<Prisma.TaxaUpdateArgs> = z.object({
  select: TaxaSelectSchema.optional(),
  include: TaxaIncludeSchema.optional(),
  data: z.union([ TaxaUpdateInputSchema,TaxaUncheckedUpdateInputSchema ]),
  where: TaxaWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxaUpdateArgs>

export const TaxaUpdateManyArgsSchema: z.ZodType<Prisma.TaxaUpdateManyArgs> = z.object({
  data: z.union([ TaxaUpdateManyMutationInputSchema,TaxaUncheckedUpdateManyInputSchema ]),
  where: TaxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxaUpdateManyArgs>

export const TaxaDeleteManyArgsSchema: z.ZodType<Prisma.TaxaDeleteManyArgs> = z.object({
  where: TaxaWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxaDeleteManyArgs>

export const TaxonomiesCreateArgsSchema: z.ZodType<Prisma.TaxonomiesCreateArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  data: z.union([ TaxonomiesCreateInputSchema,TaxonomiesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxonomiesCreateArgs>

export const TaxonomiesUpsertArgsSchema: z.ZodType<Prisma.TaxonomiesUpsertArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
  create: z.union([ TaxonomiesCreateInputSchema,TaxonomiesUncheckedCreateInputSchema ]),
  update: z.union([ TaxonomiesUpdateInputSchema,TaxonomiesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.TaxonomiesUpsertArgs>

export const TaxonomiesCreateManyArgsSchema: z.ZodType<Prisma.TaxonomiesCreateManyArgs> = z.object({
  data: TaxonomiesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesCreateManyArgs>

export const TaxonomiesDeleteArgsSchema: z.ZodType<Prisma.TaxonomiesDeleteArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesDeleteArgs>

export const TaxonomiesUpdateArgsSchema: z.ZodType<Prisma.TaxonomiesUpdateArgs> = z.object({
  select: TaxonomiesSelectSchema.optional(),
  include: TaxonomiesIncludeSchema.optional(),
  data: z.union([ TaxonomiesUpdateInputSchema,TaxonomiesUncheckedUpdateInputSchema ]),
  where: TaxonomiesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.TaxonomiesUpdateArgs>

export const TaxonomiesUpdateManyArgsSchema: z.ZodType<Prisma.TaxonomiesUpdateManyArgs> = z.object({
  data: z.union([ TaxonomiesUpdateManyMutationInputSchema,TaxonomiesUncheckedUpdateManyInputSchema ]),
  where: TaxonomiesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesUpdateManyArgs>

export const TaxonomiesDeleteManyArgsSchema: z.ZodType<Prisma.TaxonomiesDeleteManyArgs> = z.object({
  where: TaxonomiesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.TaxonomiesDeleteManyArgs>

export const Tile_layersCreateArgsSchema: z.ZodType<Prisma.Tile_layersCreateArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  data: z.union([ Tile_layersCreateInputSchema,Tile_layersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Tile_layersCreateArgs>

export const Tile_layersUpsertArgsSchema: z.ZodType<Prisma.Tile_layersUpsertArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereUniqueInputSchema,
  create: z.union([ Tile_layersCreateInputSchema,Tile_layersUncheckedCreateInputSchema ]),
  update: z.union([ Tile_layersUpdateInputSchema,Tile_layersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Tile_layersUpsertArgs>

export const Tile_layersCreateManyArgsSchema: z.ZodType<Prisma.Tile_layersCreateManyArgs> = z.object({
  data: Tile_layersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Tile_layersCreateManyArgs>

export const Tile_layersDeleteArgsSchema: z.ZodType<Prisma.Tile_layersDeleteArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  where: Tile_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Tile_layersDeleteArgs>

export const Tile_layersUpdateArgsSchema: z.ZodType<Prisma.Tile_layersUpdateArgs> = z.object({
  select: Tile_layersSelectSchema.optional(),
  include: Tile_layersIncludeSchema.optional(),
  data: z.union([ Tile_layersUpdateInputSchema,Tile_layersUncheckedUpdateInputSchema ]),
  where: Tile_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Tile_layersUpdateArgs>

export const Tile_layersUpdateManyArgsSchema: z.ZodType<Prisma.Tile_layersUpdateManyArgs> = z.object({
  data: z.union([ Tile_layersUpdateManyMutationInputSchema,Tile_layersUncheckedUpdateManyInputSchema ]),
  where: Tile_layersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Tile_layersUpdateManyArgs>

export const Tile_layersDeleteManyArgsSchema: z.ZodType<Prisma.Tile_layersDeleteManyArgs> = z.object({
  where: Tile_layersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Tile_layersDeleteManyArgs>

export const Ui_optionsCreateArgsSchema: z.ZodType<Prisma.Ui_optionsCreateArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  data: z.union([ Ui_optionsCreateInputSchema,Ui_optionsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Ui_optionsCreateArgs>

export const Ui_optionsUpsertArgsSchema: z.ZodType<Prisma.Ui_optionsUpsertArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
  create: z.union([ Ui_optionsCreateInputSchema,Ui_optionsUncheckedCreateInputSchema ]),
  update: z.union([ Ui_optionsUpdateInputSchema,Ui_optionsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Ui_optionsUpsertArgs>

export const Ui_optionsCreateManyArgsSchema: z.ZodType<Prisma.Ui_optionsCreateManyArgs> = z.object({
  data: Ui_optionsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsCreateManyArgs>

export const Ui_optionsDeleteArgsSchema: z.ZodType<Prisma.Ui_optionsDeleteArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsDeleteArgs>

export const Ui_optionsUpdateArgsSchema: z.ZodType<Prisma.Ui_optionsUpdateArgs> = z.object({
  select: Ui_optionsSelectSchema.optional(),
  include: Ui_optionsIncludeSchema.optional(),
  data: z.union([ Ui_optionsUpdateInputSchema,Ui_optionsUncheckedUpdateInputSchema ]),
  where: Ui_optionsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Ui_optionsUpdateArgs>

export const Ui_optionsUpdateManyArgsSchema: z.ZodType<Prisma.Ui_optionsUpdateManyArgs> = z.object({
  data: z.union([ Ui_optionsUpdateManyMutationInputSchema,Ui_optionsUncheckedUpdateManyInputSchema ]),
  where: Ui_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsUpdateManyArgs>

export const Ui_optionsDeleteManyArgsSchema: z.ZodType<Prisma.Ui_optionsDeleteManyArgs> = z.object({
  where: Ui_optionsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Ui_optionsDeleteManyArgs>

export const UnitsCreateArgsSchema: z.ZodType<Prisma.UnitsCreateArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  data: z.union([ UnitsCreateInputSchema,UnitsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.UnitsCreateArgs>

export const UnitsUpsertArgsSchema: z.ZodType<Prisma.UnitsUpsertArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereUniqueInputSchema,
  create: z.union([ UnitsCreateInputSchema,UnitsUncheckedCreateInputSchema ]),
  update: z.union([ UnitsUpdateInputSchema,UnitsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.UnitsUpsertArgs>

export const UnitsCreateManyArgsSchema: z.ZodType<Prisma.UnitsCreateManyArgs> = z.object({
  data: UnitsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.UnitsCreateManyArgs>

export const UnitsDeleteArgsSchema: z.ZodType<Prisma.UnitsDeleteArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  where: UnitsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UnitsDeleteArgs>

export const UnitsUpdateArgsSchema: z.ZodType<Prisma.UnitsUpdateArgs> = z.object({
  select: UnitsSelectSchema.optional(),
  include: UnitsIncludeSchema.optional(),
  data: z.union([ UnitsUpdateInputSchema,UnitsUncheckedUpdateInputSchema ]),
  where: UnitsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UnitsUpdateArgs>

export const UnitsUpdateManyArgsSchema: z.ZodType<Prisma.UnitsUpdateManyArgs> = z.object({
  data: z.union([ UnitsUpdateManyMutationInputSchema,UnitsUncheckedUpdateManyInputSchema ]),
  where: UnitsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UnitsUpdateManyArgs>

export const UnitsDeleteManyArgsSchema: z.ZodType<Prisma.UnitsDeleteManyArgs> = z.object({
  where: UnitsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UnitsDeleteManyArgs>

export const User_messagesCreateArgsSchema: z.ZodType<Prisma.User_messagesCreateArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  data: z.union([ User_messagesCreateInputSchema,User_messagesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.User_messagesCreateArgs>

export const User_messagesUpsertArgsSchema: z.ZodType<Prisma.User_messagesUpsertArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
  create: z.union([ User_messagesCreateInputSchema,User_messagesUncheckedCreateInputSchema ]),
  update: z.union([ User_messagesUpdateInputSchema,User_messagesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.User_messagesUpsertArgs>

export const User_messagesCreateManyArgsSchema: z.ZodType<Prisma.User_messagesCreateManyArgs> = z.object({
  data: User_messagesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.User_messagesCreateManyArgs>

export const User_messagesDeleteArgsSchema: z.ZodType<Prisma.User_messagesDeleteArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesDeleteArgs>

export const User_messagesUpdateArgsSchema: z.ZodType<Prisma.User_messagesUpdateArgs> = z.object({
  select: User_messagesSelectSchema.optional(),
  include: User_messagesIncludeSchema.optional(),
  data: z.union([ User_messagesUpdateInputSchema,User_messagesUncheckedUpdateInputSchema ]),
  where: User_messagesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.User_messagesUpdateArgs>

export const User_messagesUpdateManyArgsSchema: z.ZodType<Prisma.User_messagesUpdateManyArgs> = z.object({
  data: z.union([ User_messagesUpdateManyMutationInputSchema,User_messagesUncheckedUpdateManyInputSchema ]),
  where: User_messagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.User_messagesUpdateManyArgs>

export const User_messagesDeleteManyArgsSchema: z.ZodType<Prisma.User_messagesDeleteManyArgs> = z.object({
  where: User_messagesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.User_messagesDeleteManyArgs>

export const UsersCreateArgsSchema: z.ZodType<Prisma.UsersCreateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.UsersCreateArgs>

export const UsersUpsertArgsSchema: z.ZodType<Prisma.UsersUpsertArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
  create: z.union([ UsersCreateInputSchema,UsersUncheckedCreateInputSchema ]),
  update: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.UsersUpsertArgs>

export const UsersCreateManyArgsSchema: z.ZodType<Prisma.UsersCreateManyArgs> = z.object({
  data: UsersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.UsersCreateManyArgs>

export const UsersDeleteArgsSchema: z.ZodType<Prisma.UsersDeleteArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersDeleteArgs>

export const UsersUpdateArgsSchema: z.ZodType<Prisma.UsersUpdateArgs> = z.object({
  select: UsersSelectSchema.optional(),
  include: UsersIncludeSchema.optional(),
  data: z.union([ UsersUpdateInputSchema,UsersUncheckedUpdateInputSchema ]),
  where: UsersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.UsersUpdateArgs>

export const UsersUpdateManyArgsSchema: z.ZodType<Prisma.UsersUpdateManyArgs> = z.object({
  data: z.union([ UsersUpdateManyMutationInputSchema,UsersUncheckedUpdateManyInputSchema ]),
  where: UsersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UsersUpdateManyArgs>

export const UsersDeleteManyArgsSchema: z.ZodType<Prisma.UsersDeleteManyArgs> = z.object({
  where: UsersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.UsersDeleteManyArgs>

export const Vector_layer_displaysCreateArgsSchema: z.ZodType<Prisma.Vector_layer_displaysCreateArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  data: z.union([ Vector_layer_displaysCreateInputSchema,Vector_layer_displaysUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysCreateArgs>

export const Vector_layer_displaysUpsertArgsSchema: z.ZodType<Prisma.Vector_layer_displaysUpsertArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereUniqueInputSchema,
  create: z.union([ Vector_layer_displaysCreateInputSchema,Vector_layer_displaysUncheckedCreateInputSchema ]),
  update: z.union([ Vector_layer_displaysUpdateInputSchema,Vector_layer_displaysUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysUpsertArgs>

export const Vector_layer_displaysCreateManyArgsSchema: z.ZodType<Prisma.Vector_layer_displaysCreateManyArgs> = z.object({
  data: Vector_layer_displaysCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysCreateManyArgs>

export const Vector_layer_displaysDeleteArgsSchema: z.ZodType<Prisma.Vector_layer_displaysDeleteArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  where: Vector_layer_displaysWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_displaysDeleteArgs>

export const Vector_layer_displaysUpdateArgsSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateArgs> = z.object({
  select: Vector_layer_displaysSelectSchema.optional(),
  include: Vector_layer_displaysIncludeSchema.optional(),
  data: z.union([ Vector_layer_displaysUpdateInputSchema,Vector_layer_displaysUncheckedUpdateInputSchema ]),
  where: Vector_layer_displaysWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_displaysUpdateArgs>

export const Vector_layer_displaysUpdateManyArgsSchema: z.ZodType<Prisma.Vector_layer_displaysUpdateManyArgs> = z.object({
  data: z.union([ Vector_layer_displaysUpdateManyMutationInputSchema,Vector_layer_displaysUncheckedUpdateManyInputSchema ]),
  where: Vector_layer_displaysWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysUpdateManyArgs>

export const Vector_layer_displaysDeleteManyArgsSchema: z.ZodType<Prisma.Vector_layer_displaysDeleteManyArgs> = z.object({
  where: Vector_layer_displaysWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_displaysDeleteManyArgs>

export const Vector_layer_geomsCreateArgsSchema: z.ZodType<Prisma.Vector_layer_geomsCreateArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  data: z.union([ Vector_layer_geomsCreateInputSchema,Vector_layer_geomsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsCreateArgs>

export const Vector_layer_geomsUpsertArgsSchema: z.ZodType<Prisma.Vector_layer_geomsUpsertArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereUniqueInputSchema,
  create: z.union([ Vector_layer_geomsCreateInputSchema,Vector_layer_geomsUncheckedCreateInputSchema ]),
  update: z.union([ Vector_layer_geomsUpdateInputSchema,Vector_layer_geomsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsUpsertArgs>

export const Vector_layer_geomsCreateManyArgsSchema: z.ZodType<Prisma.Vector_layer_geomsCreateManyArgs> = z.object({
  data: Vector_layer_geomsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsCreateManyArgs>

export const Vector_layer_geomsDeleteArgsSchema: z.ZodType<Prisma.Vector_layer_geomsDeleteArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  where: Vector_layer_geomsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_geomsDeleteArgs>

export const Vector_layer_geomsUpdateArgsSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateArgs> = z.object({
  select: Vector_layer_geomsSelectSchema.optional(),
  include: Vector_layer_geomsIncludeSchema.optional(),
  data: z.union([ Vector_layer_geomsUpdateInputSchema,Vector_layer_geomsUncheckedUpdateInputSchema ]),
  where: Vector_layer_geomsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layer_geomsUpdateArgs>

export const Vector_layer_geomsUpdateManyArgsSchema: z.ZodType<Prisma.Vector_layer_geomsUpdateManyArgs> = z.object({
  data: z.union([ Vector_layer_geomsUpdateManyMutationInputSchema,Vector_layer_geomsUncheckedUpdateManyInputSchema ]),
  where: Vector_layer_geomsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsUpdateManyArgs>

export const Vector_layer_geomsDeleteManyArgsSchema: z.ZodType<Prisma.Vector_layer_geomsDeleteManyArgs> = z.object({
  where: Vector_layer_geomsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layer_geomsDeleteManyArgs>

export const Vector_layersCreateArgsSchema: z.ZodType<Prisma.Vector_layersCreateArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  data: z.union([ Vector_layersCreateInputSchema,Vector_layersUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layersCreateArgs>

export const Vector_layersUpsertArgsSchema: z.ZodType<Prisma.Vector_layersUpsertArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereUniqueInputSchema,
  create: z.union([ Vector_layersCreateInputSchema,Vector_layersUncheckedCreateInputSchema ]),
  update: z.union([ Vector_layersUpdateInputSchema,Vector_layersUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Vector_layersUpsertArgs>

export const Vector_layersCreateManyArgsSchema: z.ZodType<Prisma.Vector_layersCreateManyArgs> = z.object({
  data: Vector_layersCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Vector_layersCreateManyArgs>

export const Vector_layersDeleteArgsSchema: z.ZodType<Prisma.Vector_layersDeleteArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  where: Vector_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layersDeleteArgs>

export const Vector_layersUpdateArgsSchema: z.ZodType<Prisma.Vector_layersUpdateArgs> = z.object({
  select: Vector_layersSelectSchema.optional(),
  include: Vector_layersIncludeSchema.optional(),
  data: z.union([ Vector_layersUpdateInputSchema,Vector_layersUncheckedUpdateInputSchema ]),
  where: Vector_layersWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Vector_layersUpdateArgs>

export const Vector_layersUpdateManyArgsSchema: z.ZodType<Prisma.Vector_layersUpdateManyArgs> = z.object({
  data: z.union([ Vector_layersUpdateManyMutationInputSchema,Vector_layersUncheckedUpdateManyInputSchema ]),
  where: Vector_layersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layersUpdateManyArgs>

export const Vector_layersDeleteManyArgsSchema: z.ZodType<Prisma.Vector_layersDeleteManyArgs> = z.object({
  where: Vector_layersWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Vector_layersDeleteManyArgs>

export const Widget_typesCreateArgsSchema: z.ZodType<Prisma.Widget_typesCreateArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  data: z.union([ Widget_typesCreateInputSchema,Widget_typesUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widget_typesCreateArgs>

export const Widget_typesUpsertArgsSchema: z.ZodType<Prisma.Widget_typesUpsertArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
  create: z.union([ Widget_typesCreateInputSchema,Widget_typesUncheckedCreateInputSchema ]),
  update: z.union([ Widget_typesUpdateInputSchema,Widget_typesUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widget_typesUpsertArgs>

export const Widget_typesCreateManyArgsSchema: z.ZodType<Prisma.Widget_typesCreateManyArgs> = z.object({
  data: Widget_typesCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Widget_typesCreateManyArgs>

export const Widget_typesDeleteArgsSchema: z.ZodType<Prisma.Widget_typesDeleteArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesDeleteArgs>

export const Widget_typesUpdateArgsSchema: z.ZodType<Prisma.Widget_typesUpdateArgs> = z.object({
  select: Widget_typesSelectSchema.optional(),
  include: Widget_typesIncludeSchema.optional(),
  data: z.union([ Widget_typesUpdateInputSchema,Widget_typesUncheckedUpdateInputSchema ]),
  where: Widget_typesWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widget_typesUpdateArgs>

export const Widget_typesUpdateManyArgsSchema: z.ZodType<Prisma.Widget_typesUpdateManyArgs> = z.object({
  data: z.union([ Widget_typesUpdateManyMutationInputSchema,Widget_typesUncheckedUpdateManyInputSchema ]),
  where: Widget_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widget_typesUpdateManyArgs>

export const Widget_typesDeleteManyArgsSchema: z.ZodType<Prisma.Widget_typesDeleteManyArgs> = z.object({
  where: Widget_typesWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widget_typesDeleteManyArgs>

export const Widgets_for_fieldsCreateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  data: z.union([ Widgets_for_fieldsCreateInputSchema,Widgets_for_fieldsUncheckedCreateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsCreateArgs>

export const Widgets_for_fieldsUpsertArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpsertArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
  create: z.union([ Widgets_for_fieldsCreateInputSchema,Widgets_for_fieldsUncheckedCreateInputSchema ]),
  update: z.union([ Widgets_for_fieldsUpdateInputSchema,Widgets_for_fieldsUncheckedUpdateInputSchema ]),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpsertArgs>

export const Widgets_for_fieldsCreateManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsCreateManyArgs> = z.object({
  data: Widgets_for_fieldsCreateManyInputSchema.array(),
  skipDuplicates: z.boolean().optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsCreateManyArgs>

export const Widgets_for_fieldsDeleteArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsDeleteArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsDeleteArgs>

export const Widgets_for_fieldsUpdateArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateArgs> = z.object({
  select: Widgets_for_fieldsSelectSchema.optional(),
  include: Widgets_for_fieldsIncludeSchema.optional(),
  data: z.union([ Widgets_for_fieldsUpdateInputSchema,Widgets_for_fieldsUncheckedUpdateInputSchema ]),
  where: Widgets_for_fieldsWhereUniqueInputSchema,
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpdateArgs>

export const Widgets_for_fieldsUpdateManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsUpdateManyArgs> = z.object({
  data: z.union([ Widgets_for_fieldsUpdateManyMutationInputSchema,Widgets_for_fieldsUncheckedUpdateManyInputSchema ]),
  where: Widgets_for_fieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsUpdateManyArgs>

export const Widgets_for_fieldsDeleteManyArgsSchema: z.ZodType<Prisma.Widgets_for_fieldsDeleteManyArgs> = z.object({
  where: Widgets_for_fieldsWhereInputSchema.optional(),
}).strict() as z.ZodType<Prisma.Widgets_for_fieldsDeleteManyArgs>

interface AccountsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.AccountsArgs
  readonly type: Prisma.AccountsGetPayload<this['_A']>
}

interface Chart_subjectsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Chart_subjectsArgs
  readonly type: Prisma.Chart_subjectsGetPayload<this['_A']>
}

interface ChartsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ChartsArgs
  readonly type: Prisma.ChartsGetPayload<this['_A']>
}

interface Field_typesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Field_typesArgs
  readonly type: Prisma.Field_typesGetPayload<this['_A']>
}

interface FieldsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.FieldsArgs
  readonly type: Prisma.FieldsGetPayload<this['_A']>
}

interface Gbif_occurrence_downloadsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_occurrence_downloadsArgs
  readonly type: Prisma.Gbif_occurrence_downloadsGetPayload<this['_A']>
}

interface Gbif_occurrencesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_occurrencesArgs
  readonly type: Prisma.Gbif_occurrencesGetPayload<this['_A']>
}

interface Gbif_taxaGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Gbif_taxaArgs
  readonly type: Prisma.Gbif_taxaGetPayload<this['_A']>
}

interface Goal_report_valuesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Goal_report_valuesArgs
  readonly type: Prisma.Goal_report_valuesGetPayload<this['_A']>
}

interface Goal_reportsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Goal_reportsArgs
  readonly type: Prisma.Goal_reportsGetPayload<this['_A']>
}

interface GoalsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.GoalsArgs
  readonly type: Prisma.GoalsGetPayload<this['_A']>
}

interface Layer_optionsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Layer_optionsArgs
  readonly type: Prisma.Layer_optionsGetPayload<this['_A']>
}

interface List_valuesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.List_valuesArgs
  readonly type: Prisma.List_valuesGetPayload<this['_A']>
}

interface ListsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ListsArgs
  readonly type: Prisma.ListsGetPayload<this['_A']>
}

interface MessagesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.MessagesArgs
  readonly type: Prisma.MessagesGetPayload<this['_A']>
}

interface Observation_sourcesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Observation_sourcesArgs
  readonly type: Prisma.Observation_sourcesGetPayload<this['_A']>
}

interface ObservationsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ObservationsArgs
  readonly type: Prisma.ObservationsGetPayload<this['_A']>
}

interface PersonsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.PersonsArgs
  readonly type: Prisma.PersonsGetPayload<this['_A']>
}

interface Place_levelsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Place_levelsArgs
  readonly type: Prisma.Place_levelsGetPayload<this['_A']>
}

interface PlacesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.PlacesArgs
  readonly type: Prisma.PlacesGetPayload<this['_A']>
}

interface Project_reportsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Project_reportsArgs
  readonly type: Prisma.Project_reportsGetPayload<this['_A']>
}

interface Project_usersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Project_usersArgs
  readonly type: Prisma.Project_usersGetPayload<this['_A']>
}

interface ProjectsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.ProjectsArgs
  readonly type: Prisma.ProjectsGetPayload<this['_A']>
}

interface Subproject_reportsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Subproject_reportsArgs
  readonly type: Prisma.Subproject_reportsGetPayload<this['_A']>
}

interface Subproject_taxaGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Subproject_taxaArgs
  readonly type: Prisma.Subproject_taxaGetPayload<this['_A']>
}

interface Subproject_usersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Subproject_usersArgs
  readonly type: Prisma.Subproject_usersGetPayload<this['_A']>
}

interface SubprojectsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.SubprojectsArgs
  readonly type: Prisma.SubprojectsGetPayload<this['_A']>
}

interface TaxaGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaxaArgs
  readonly type: Prisma.TaxaGetPayload<this['_A']>
}

interface TaxonomiesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.TaxonomiesArgs
  readonly type: Prisma.TaxonomiesGetPayload<this['_A']>
}

interface Tile_layersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Tile_layersArgs
  readonly type: Prisma.Tile_layersGetPayload<this['_A']>
}

interface Ui_optionsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Ui_optionsArgs
  readonly type: Prisma.Ui_optionsGetPayload<this['_A']>
}

interface UnitsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.UnitsArgs
  readonly type: Prisma.UnitsGetPayload<this['_A']>
}

interface User_messagesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.User_messagesArgs
  readonly type: Prisma.User_messagesGetPayload<this['_A']>
}

interface UsersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.UsersArgs
  readonly type: Prisma.UsersGetPayload<this['_A']>
}

interface Vector_layer_displaysGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Vector_layer_displaysArgs
  readonly type: Prisma.Vector_layer_displaysGetPayload<this['_A']>
}

interface Vector_layer_geomsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Vector_layer_geomsArgs
  readonly type: Prisma.Vector_layer_geomsGetPayload<this['_A']>
}

interface Vector_layersGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Vector_layersArgs
  readonly type: Prisma.Vector_layersGetPayload<this['_A']>
}

interface Widget_typesGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Widget_typesArgs
  readonly type: Prisma.Widget_typesGetPayload<this['_A']>
}

interface Widgets_for_fieldsGetPayload extends HKT {
  readonly _A?: boolean | null | undefined | Prisma.Widgets_for_fieldsArgs
  readonly type: Prisma.Widgets_for_fieldsGetPayload<this['_A']>
}

export const tableSchemas = {
  accounts: {
    fields: new Map([
      [
        "account_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "period_start",
        "DATE"
      ],
      [
        "period_end",
        "DATE"
      ],
      [
        "projects_label_by",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("users", "user_id", "user_id", "users", "AccountsToUsers", "one"),
      new Relation("chart_subjects", "", "", "chart_subjects", "AccountsToChart_subjects", "many"),
      new Relation("charts", "", "", "charts", "AccountsToCharts", "many"),
      new Relation("fields", "", "", "fields", "AccountsToFields", "many"),
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "AccountsToGbif_occurrence_downloads", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "AccountsToGbif_occurrences", "many"),
      new Relation("gbif_taxa", "", "", "gbif_taxa", "AccountsToGbif_taxa", "many"),
      new Relation("goal_report_values", "", "", "goal_report_values", "AccountsToGoal_report_values", "many"),
      new Relation("goal_reports", "", "", "goal_reports", "AccountsToGoal_reports", "many"),
      new Relation("goals", "", "", "goals", "AccountsToGoals", "many"),
      new Relation("layer_options", "", "", "layer_options", "AccountsToLayer_options", "many"),
      new Relation("list_values", "", "", "list_values", "AccountsToList_values", "many"),
      new Relation("lists", "", "", "lists", "AccountsToLists", "many"),
      new Relation("observation_sources", "", "", "observation_sources", "AccountsToObservation_sources", "many"),
      new Relation("observations", "", "", "observations", "AccountsToObservations", "many"),
      new Relation("persons", "", "", "persons", "AccountsToPersons", "many"),
      new Relation("place_levels", "", "", "place_levels", "AccountsToPlace_levels", "many"),
      new Relation("places", "", "", "places", "AccountsToPlaces", "many"),
      new Relation("project_reports", "", "", "project_reports", "AccountsToProject_reports", "many"),
      new Relation("project_users", "", "", "project_users", "AccountsToProject_users", "many"),
      new Relation("projects", "", "", "projects", "AccountsToProjects", "many"),
      new Relation("subproject_reports", "", "", "subproject_reports", "AccountsToSubproject_reports", "many"),
      new Relation("subproject_taxa", "", "", "subproject_taxa", "AccountsToSubproject_taxa", "many"),
      new Relation("subproject_users", "", "", "subproject_users", "AccountsToSubproject_users", "many"),
      new Relation("subprojects", "", "", "subprojects", "AccountsToSubprojects", "many"),
      new Relation("taxa", "", "", "taxa", "AccountsToTaxa", "many"),
      new Relation("taxonomies", "", "", "taxonomies", "AccountsToTaxonomies", "many"),
      new Relation("tile_layers", "", "", "tile_layers", "AccountsToTile_layers", "many"),
      new Relation("ui_options", "", "", "ui_options", "AccountsToUi_options", "many"),
      new Relation("units", "", "", "units", "AccountsToUnits", "many"),
      new Relation("user_messages", "", "", "user_messages", "AccountsToUser_messages", "many"),
      new Relation("vector_layer_displays", "", "", "vector_layer_displays", "AccountsToVector_layer_displays", "many"),
      new Relation("vector_layer_geoms", "", "", "vector_layer_geoms", "AccountsToVector_layer_geoms", "many"),
      new Relation("vector_layers", "", "", "vector_layers", "AccountsToVector_layers", "many"),
    ],
    modelSchema: (AccountsCreateInputSchema as any)
      .partial()
      .or((AccountsUncheckedCreateInputSchema as any).partial()),
    createSchema: AccountsCreateArgsSchema,
    createManySchema: AccountsCreateManyArgsSchema,
    findUniqueSchema: AccountsFindUniqueArgsSchema,
    findSchema: AccountsFindFirstArgsSchema,
    updateSchema: AccountsUpdateArgsSchema,
    updateManySchema: AccountsUpdateManyArgsSchema,
    upsertSchema: AccountsUpsertArgsSchema,
    deleteSchema: AccountsDeleteArgsSchema,
    deleteManySchema: AccountsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof AccountsCreateInputSchema>,
    Prisma.AccountsCreateArgs['data'],
    Prisma.AccountsUpdateArgs['data'],
    Prisma.AccountsFindFirstArgs['select'],
    Prisma.AccountsFindFirstArgs['where'],
    Prisma.AccountsFindUniqueArgs['where'],
    Omit<Prisma.AccountsInclude, '_count'>,
    Prisma.AccountsFindFirstArgs['orderBy'],
    Prisma.AccountsScalarFieldEnum,
    AccountsGetPayload
  >,
  chart_subjects: {
    fields: new Map([
      [
        "chart_subject_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "chart_id",
        "UUID"
      ],
      [
        "table_name",
        "TEXT"
      ],
      [
        "table_level",
        "INT4"
      ],
      [
        "table_filter",
        "JSONB"
      ],
      [
        "value_source",
        "TEXT"
      ],
      [
        "value_field",
        "TEXT"
      ],
      [
        "value_unit",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "stroke",
        "TEXT"
      ],
      [
        "fill",
        "TEXT"
      ],
      [
        "fill_graded",
        "BOOL"
      ],
      [
        "connect_nulls",
        "BOOL"
      ],
      [
        "sort",
        "INT4"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToChart_subjects", "one"),
      new Relation("charts", "chart_id", "chart_id", "charts", "Chart_subjectsToCharts", "one"),
      new Relation("units", "value_unit", "unit_id", "units", "Chart_subjectsToUnits", "one"),
    ],
    modelSchema: (Chart_subjectsCreateInputSchema as any)
      .partial()
      .or((Chart_subjectsUncheckedCreateInputSchema as any).partial()),
    createSchema: Chart_subjectsCreateArgsSchema,
    createManySchema: Chart_subjectsCreateManyArgsSchema,
    findUniqueSchema: Chart_subjectsFindUniqueArgsSchema,
    findSchema: Chart_subjectsFindFirstArgsSchema,
    updateSchema: Chart_subjectsUpdateArgsSchema,
    updateManySchema: Chart_subjectsUpdateManyArgsSchema,
    upsertSchema: Chart_subjectsUpsertArgsSchema,
    deleteSchema: Chart_subjectsDeleteArgsSchema,
    deleteManySchema: Chart_subjectsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Chart_subjectsCreateInputSchema>,
    Prisma.Chart_subjectsCreateArgs['data'],
    Prisma.Chart_subjectsUpdateArgs['data'],
    Prisma.Chart_subjectsFindFirstArgs['select'],
    Prisma.Chart_subjectsFindFirstArgs['where'],
    Prisma.Chart_subjectsFindUniqueArgs['where'],
    Omit<Prisma.Chart_subjectsInclude, '_count'>,
    Prisma.Chart_subjectsFindFirstArgs['orderBy'],
    Prisma.Chart_subjectsScalarFieldEnum,
    Chart_subjectsGetPayload
  >,
  charts: {
    fields: new Map([
      [
        "chart_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "place_id",
        "UUID"
      ],
      [
        "years_current",
        "BOOL"
      ],
      [
        "years_previous",
        "BOOL"
      ],
      [
        "years_specific",
        "INT4"
      ],
      [
        "years_last_x",
        "INT4"
      ],
      [
        "years_since",
        "INT4"
      ],
      [
        "years_until",
        "INT4"
      ],
      [
        "chart_type",
        "TEXT"
      ],
      [
        "title",
        "TEXT"
      ],
      [
        "subjects_stacked",
        "BOOL"
      ],
      [
        "subjects_single",
        "BOOL"
      ],
      [
        "percent",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("chart_subjects", "", "", "chart_subjects", "Chart_subjectsToCharts", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToCharts", "one"),
      new Relation("places", "place_id", "place_id", "places", "ChartsToPlaces", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ChartsToProjects", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "ChartsToSubprojects", "one"),
    ],
    modelSchema: (ChartsCreateInputSchema as any)
      .partial()
      .or((ChartsUncheckedCreateInputSchema as any).partial()),
    createSchema: ChartsCreateArgsSchema,
    createManySchema: ChartsCreateManyArgsSchema,
    findUniqueSchema: ChartsFindUniqueArgsSchema,
    findSchema: ChartsFindFirstArgsSchema,
    updateSchema: ChartsUpdateArgsSchema,
    updateManySchema: ChartsUpdateManyArgsSchema,
    upsertSchema: ChartsUpsertArgsSchema,
    deleteSchema: ChartsDeleteArgsSchema,
    deleteManySchema: ChartsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ChartsCreateInputSchema>,
    Prisma.ChartsCreateArgs['data'],
    Prisma.ChartsUpdateArgs['data'],
    Prisma.ChartsFindFirstArgs['select'],
    Prisma.ChartsFindFirstArgs['where'],
    Prisma.ChartsFindUniqueArgs['where'],
    Omit<Prisma.ChartsInclude, '_count'>,
    Prisma.ChartsFindFirstArgs['orderBy'],
    Prisma.ChartsScalarFieldEnum,
    ChartsGetPayload
  >,
  field_types: {
    fields: new Map([
      [
        "field_type_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "comment",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("fields", "", "", "fields", "Field_typesToFields", "many"),
      new Relation("widgets_for_fields", "", "", "widgets_for_fields", "Field_typesToWidgets_for_fields", "many"),
    ],
    modelSchema: (Field_typesCreateInputSchema as any)
      .partial()
      .or((Field_typesUncheckedCreateInputSchema as any).partial()),
    createSchema: Field_typesCreateArgsSchema,
    createManySchema: Field_typesCreateManyArgsSchema,
    findUniqueSchema: Field_typesFindUniqueArgsSchema,
    findSchema: Field_typesFindFirstArgsSchema,
    updateSchema: Field_typesUpdateArgsSchema,
    updateManySchema: Field_typesUpdateManyArgsSchema,
    upsertSchema: Field_typesUpsertArgsSchema,
    deleteSchema: Field_typesDeleteArgsSchema,
    deleteManySchema: Field_typesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Field_typesCreateInputSchema>,
    Prisma.Field_typesCreateArgs['data'],
    Prisma.Field_typesUpdateArgs['data'],
    Prisma.Field_typesFindFirstArgs['select'],
    Prisma.Field_typesFindFirstArgs['where'],
    Prisma.Field_typesFindUniqueArgs['where'],
    Omit<Prisma.Field_typesInclude, '_count'>,
    Prisma.Field_typesFindFirstArgs['orderBy'],
    Prisma.Field_typesScalarFieldEnum,
    Field_typesGetPayload
  >,
  fields: {
    fields: new Map([
      [
        "field_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "table_name",
        "TEXT"
      ],
      [
        "level",
        "INT4"
      ],
      [
        "field_type_id",
        "UUID"
      ],
      [
        "widget_type_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "field_label",
        "TEXT"
      ],
      [
        "list_id",
        "UUID"
      ],
      [
        "preset",
        "TEXT"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToFields", "one"),
      new Relation("field_types", "field_type_id", "field_type_id", "field_types", "Field_typesToFields", "one"),
      new Relation("lists", "list_id", "list_id", "lists", "FieldsToLists", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "FieldsToProjects", "one"),
      new Relation("widget_types", "widget_type_id", "widget_type_id", "widget_types", "FieldsToWidget_types", "one"),
    ],
    modelSchema: (FieldsCreateInputSchema as any)
      .partial()
      .or((FieldsUncheckedCreateInputSchema as any).partial()),
    createSchema: FieldsCreateArgsSchema,
    createManySchema: FieldsCreateManyArgsSchema,
    findUniqueSchema: FieldsFindUniqueArgsSchema,
    findSchema: FieldsFindFirstArgsSchema,
    updateSchema: FieldsUpdateArgsSchema,
    updateManySchema: FieldsUpdateManyArgsSchema,
    upsertSchema: FieldsUpsertArgsSchema,
    deleteSchema: FieldsDeleteArgsSchema,
    deleteManySchema: FieldsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof FieldsCreateInputSchema>,
    Prisma.FieldsCreateArgs['data'],
    Prisma.FieldsUpdateArgs['data'],
    Prisma.FieldsFindFirstArgs['select'],
    Prisma.FieldsFindFirstArgs['where'],
    Prisma.FieldsFindUniqueArgs['where'],
    Omit<Prisma.FieldsInclude, '_count'>,
    Prisma.FieldsFindFirstArgs['orderBy'],
    Prisma.FieldsScalarFieldEnum,
    FieldsGetPayload
  >,
  gbif_occurrence_downloads: {
    fields: new Map([
      [
        "gbif_occurrence_download_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "gbif_table",
        "TEXT"
      ],
      [
        "filters",
        "JSONB"
      ],
      [
        "created_time",
        "TIMESTAMPTZ"
      ],
      [
        "download_key",
        "TEXT"
      ],
      [
        "error",
        "TEXT"
      ],
      [
        "inserted_time",
        "TIMESTAMPTZ"
      ],
      [
        "inserted_count",
        "INT4"
      ],
      [
        "attribution",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_occurrence_downloads", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_occurrence_downloadsToProjects", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Gbif_occurrence_downloadsToSubprojects", "one"),
    ],
    modelSchema: (Gbif_occurrence_downloadsCreateInputSchema as any)
      .partial()
      .or((Gbif_occurrence_downloadsUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_occurrence_downloadsCreateArgsSchema,
    createManySchema: Gbif_occurrence_downloadsCreateManyArgsSchema,
    findUniqueSchema: Gbif_occurrence_downloadsFindUniqueArgsSchema,
    findSchema: Gbif_occurrence_downloadsFindFirstArgsSchema,
    updateSchema: Gbif_occurrence_downloadsUpdateArgsSchema,
    updateManySchema: Gbif_occurrence_downloadsUpdateManyArgsSchema,
    upsertSchema: Gbif_occurrence_downloadsUpsertArgsSchema,
    deleteSchema: Gbif_occurrence_downloadsDeleteArgsSchema,
    deleteManySchema: Gbif_occurrence_downloadsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_occurrence_downloadsCreateInputSchema>,
    Prisma.Gbif_occurrence_downloadsCreateArgs['data'],
    Prisma.Gbif_occurrence_downloadsUpdateArgs['data'],
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['select'],
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['where'],
    Prisma.Gbif_occurrence_downloadsFindUniqueArgs['where'],
    Omit<Prisma.Gbif_occurrence_downloadsInclude, '_count'>,
    Prisma.Gbif_occurrence_downloadsFindFirstArgs['orderBy'],
    Prisma.Gbif_occurrence_downloadsScalarFieldEnum,
    Gbif_occurrence_downloadsGetPayload
  >,
  gbif_occurrences: {
    fields: new Map([
      [
        "gbif_occurrence_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "gbif_data",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_occurrences", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_occurrencesToProjects", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Gbif_occurrencesToSubprojects", "one"),
    ],
    modelSchema: (Gbif_occurrencesCreateInputSchema as any)
      .partial()
      .or((Gbif_occurrencesUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_occurrencesCreateArgsSchema,
    createManySchema: Gbif_occurrencesCreateManyArgsSchema,
    findUniqueSchema: Gbif_occurrencesFindUniqueArgsSchema,
    findSchema: Gbif_occurrencesFindFirstArgsSchema,
    updateSchema: Gbif_occurrencesUpdateArgsSchema,
    updateManySchema: Gbif_occurrencesUpdateManyArgsSchema,
    upsertSchema: Gbif_occurrencesUpsertArgsSchema,
    deleteSchema: Gbif_occurrencesDeleteArgsSchema,
    deleteManySchema: Gbif_occurrencesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_occurrencesCreateInputSchema>,
    Prisma.Gbif_occurrencesCreateArgs['data'],
    Prisma.Gbif_occurrencesUpdateArgs['data'],
    Prisma.Gbif_occurrencesFindFirstArgs['select'],
    Prisma.Gbif_occurrencesFindFirstArgs['where'],
    Prisma.Gbif_occurrencesFindUniqueArgs['where'],
    Omit<Prisma.Gbif_occurrencesInclude, '_count'>,
    Prisma.Gbif_occurrencesFindFirstArgs['orderBy'],
    Prisma.Gbif_occurrencesScalarFieldEnum,
    Gbif_occurrencesGetPayload
  >,
  gbif_taxa: {
    fields: new Map([
      [
        "gbif_taxon_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "gbif_data",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGbif_taxa", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Gbif_taxaToProjects", "one"),
    ],
    modelSchema: (Gbif_taxaCreateInputSchema as any)
      .partial()
      .or((Gbif_taxaUncheckedCreateInputSchema as any).partial()),
    createSchema: Gbif_taxaCreateArgsSchema,
    createManySchema: Gbif_taxaCreateManyArgsSchema,
    findUniqueSchema: Gbif_taxaFindUniqueArgsSchema,
    findSchema: Gbif_taxaFindFirstArgsSchema,
    updateSchema: Gbif_taxaUpdateArgsSchema,
    updateManySchema: Gbif_taxaUpdateManyArgsSchema,
    upsertSchema: Gbif_taxaUpsertArgsSchema,
    deleteSchema: Gbif_taxaDeleteArgsSchema,
    deleteManySchema: Gbif_taxaDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Gbif_taxaCreateInputSchema>,
    Prisma.Gbif_taxaCreateArgs['data'],
    Prisma.Gbif_taxaUpdateArgs['data'],
    Prisma.Gbif_taxaFindFirstArgs['select'],
    Prisma.Gbif_taxaFindFirstArgs['where'],
    Prisma.Gbif_taxaFindUniqueArgs['where'],
    Omit<Prisma.Gbif_taxaInclude, '_count'>,
    Prisma.Gbif_taxaFindFirstArgs['orderBy'],
    Prisma.Gbif_taxaScalarFieldEnum,
    Gbif_taxaGetPayload
  >,
  goal_report_values: {
    fields: new Map([
      [
        "goal_report_value_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "goal_report_id",
        "UUID"
      ],
      [
        "unit_id",
        "UUID"
      ],
      [
        "value_integer",
        "INT4"
      ],
      [
        "value_numeric",
        "FLOAT8"
      ],
      [
        "value_text",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGoal_report_values", "one"),
      new Relation("goal_reports", "goal_report_id", "goal_report_id", "goal_reports", "Goal_report_valuesToGoal_reports", "one"),
      new Relation("units", "unit_id", "unit_id", "units", "Goal_report_valuesToUnits", "one"),
    ],
    modelSchema: (Goal_report_valuesCreateInputSchema as any)
      .partial()
      .or((Goal_report_valuesUncheckedCreateInputSchema as any).partial()),
    createSchema: Goal_report_valuesCreateArgsSchema,
    createManySchema: Goal_report_valuesCreateManyArgsSchema,
    findUniqueSchema: Goal_report_valuesFindUniqueArgsSchema,
    findSchema: Goal_report_valuesFindFirstArgsSchema,
    updateSchema: Goal_report_valuesUpdateArgsSchema,
    updateManySchema: Goal_report_valuesUpdateManyArgsSchema,
    upsertSchema: Goal_report_valuesUpsertArgsSchema,
    deleteSchema: Goal_report_valuesDeleteArgsSchema,
    deleteManySchema: Goal_report_valuesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Goal_report_valuesCreateInputSchema>,
    Prisma.Goal_report_valuesCreateArgs['data'],
    Prisma.Goal_report_valuesUpdateArgs['data'],
    Prisma.Goal_report_valuesFindFirstArgs['select'],
    Prisma.Goal_report_valuesFindFirstArgs['where'],
    Prisma.Goal_report_valuesFindUniqueArgs['where'],
    Omit<Prisma.Goal_report_valuesInclude, '_count'>,
    Prisma.Goal_report_valuesFindFirstArgs['orderBy'],
    Prisma.Goal_report_valuesScalarFieldEnum,
    Goal_report_valuesGetPayload
  >,
  goal_reports: {
    fields: new Map([
      [
        "goal_report_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "goal_id",
        "UUID"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("goal_report_values", "", "", "goal_report_values", "Goal_report_valuesToGoal_reports", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGoal_reports", "one"),
      new Relation("goals", "goal_id", "goal_id", "goals", "Goal_reportsToGoals", "one"),
    ],
    modelSchema: (Goal_reportsCreateInputSchema as any)
      .partial()
      .or((Goal_reportsUncheckedCreateInputSchema as any).partial()),
    createSchema: Goal_reportsCreateArgsSchema,
    createManySchema: Goal_reportsCreateManyArgsSchema,
    findUniqueSchema: Goal_reportsFindUniqueArgsSchema,
    findSchema: Goal_reportsFindFirstArgsSchema,
    updateSchema: Goal_reportsUpdateArgsSchema,
    updateManySchema: Goal_reportsUpdateManyArgsSchema,
    upsertSchema: Goal_reportsUpsertArgsSchema,
    deleteSchema: Goal_reportsDeleteArgsSchema,
    deleteManySchema: Goal_reportsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Goal_reportsCreateInputSchema>,
    Prisma.Goal_reportsCreateArgs['data'],
    Prisma.Goal_reportsUpdateArgs['data'],
    Prisma.Goal_reportsFindFirstArgs['select'],
    Prisma.Goal_reportsFindFirstArgs['where'],
    Prisma.Goal_reportsFindUniqueArgs['where'],
    Omit<Prisma.Goal_reportsInclude, '_count'>,
    Prisma.Goal_reportsFindFirstArgs['orderBy'],
    Prisma.Goal_reportsScalarFieldEnum,
    Goal_reportsGetPayload
  >,
  goals: {
    fields: new Map([
      [
        "goal_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "year",
        "INT4"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("goal_reports", "", "", "goal_reports", "Goal_reportsToGoals", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToGoals", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "GoalsToSubprojects", "one"),
    ],
    modelSchema: (GoalsCreateInputSchema as any)
      .partial()
      .or((GoalsUncheckedCreateInputSchema as any).partial()),
    createSchema: GoalsCreateArgsSchema,
    createManySchema: GoalsCreateManyArgsSchema,
    findUniqueSchema: GoalsFindUniqueArgsSchema,
    findSchema: GoalsFindFirstArgsSchema,
    updateSchema: GoalsUpdateArgsSchema,
    updateManySchema: GoalsUpdateManyArgsSchema,
    upsertSchema: GoalsUpsertArgsSchema,
    deleteSchema: GoalsDeleteArgsSchema,
    deleteManySchema: GoalsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof GoalsCreateInputSchema>,
    Prisma.GoalsCreateArgs['data'],
    Prisma.GoalsUpdateArgs['data'],
    Prisma.GoalsFindFirstArgs['select'],
    Prisma.GoalsFindFirstArgs['where'],
    Prisma.GoalsFindUniqueArgs['where'],
    Omit<Prisma.GoalsInclude, '_count'>,
    Prisma.GoalsFindFirstArgs['orderBy'],
    Prisma.GoalsScalarFieldEnum,
    GoalsGetPayload
  >,
  layer_options: {
    fields: new Map([
      [
        "layer_option_id",
        "TEXT"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "tile_layer_id",
        "UUID"
      ],
      [
        "vector_layer_id",
        "UUID"
      ],
      [
        "field",
        "TEXT"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "queryable",
        "BOOL"
      ],
      [
        "legend_url",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToLayer_options", "one"),
      new Relation("tile_layers", "tile_layer_id", "tile_layer_id", "tile_layers", "Layer_optionsToTile_layers", "one"),
      new Relation("vector_layers", "vector_layer_id", "vector_layer_id", "vector_layers", "Layer_optionsToVector_layers", "one"),
    ],
    modelSchema: (Layer_optionsCreateInputSchema as any)
      .partial()
      .or((Layer_optionsUncheckedCreateInputSchema as any).partial()),
    createSchema: Layer_optionsCreateArgsSchema,
    createManySchema: Layer_optionsCreateManyArgsSchema,
    findUniqueSchema: Layer_optionsFindUniqueArgsSchema,
    findSchema: Layer_optionsFindFirstArgsSchema,
    updateSchema: Layer_optionsUpdateArgsSchema,
    updateManySchema: Layer_optionsUpdateManyArgsSchema,
    upsertSchema: Layer_optionsUpsertArgsSchema,
    deleteSchema: Layer_optionsDeleteArgsSchema,
    deleteManySchema: Layer_optionsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Layer_optionsCreateInputSchema>,
    Prisma.Layer_optionsCreateArgs['data'],
    Prisma.Layer_optionsUpdateArgs['data'],
    Prisma.Layer_optionsFindFirstArgs['select'],
    Prisma.Layer_optionsFindFirstArgs['where'],
    Prisma.Layer_optionsFindUniqueArgs['where'],
    Omit<Prisma.Layer_optionsInclude, '_count'>,
    Prisma.Layer_optionsFindFirstArgs['orderBy'],
    Prisma.Layer_optionsScalarFieldEnum,
    Layer_optionsGetPayload
  >,
  list_values: {
    fields: new Map([
      [
        "list_value_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "list_id",
        "UUID"
      ],
      [
        "value",
        "TEXT"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToList_values", "one"),
      new Relation("lists", "list_id", "list_id", "lists", "List_valuesToLists", "one"),
    ],
    modelSchema: (List_valuesCreateInputSchema as any)
      .partial()
      .or((List_valuesUncheckedCreateInputSchema as any).partial()),
    createSchema: List_valuesCreateArgsSchema,
    createManySchema: List_valuesCreateManyArgsSchema,
    findUniqueSchema: List_valuesFindUniqueArgsSchema,
    findSchema: List_valuesFindFirstArgsSchema,
    updateSchema: List_valuesUpdateArgsSchema,
    updateManySchema: List_valuesUpdateManyArgsSchema,
    upsertSchema: List_valuesUpsertArgsSchema,
    deleteSchema: List_valuesDeleteArgsSchema,
    deleteManySchema: List_valuesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof List_valuesCreateInputSchema>,
    Prisma.List_valuesCreateArgs['data'],
    Prisma.List_valuesUpdateArgs['data'],
    Prisma.List_valuesFindFirstArgs['select'],
    Prisma.List_valuesFindFirstArgs['where'],
    Prisma.List_valuesFindUniqueArgs['where'],
    Omit<Prisma.List_valuesInclude, '_count'>,
    Prisma.List_valuesFindFirstArgs['orderBy'],
    Prisma.List_valuesScalarFieldEnum,
    List_valuesGetPayload
  >,
  lists: {
    fields: new Map([
      [
        "list_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("fields", "", "", "fields", "FieldsToLists", "many"),
      new Relation("list_values", "", "", "list_values", "List_valuesToLists", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToLists", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ListsToProjects", "one"),
      new Relation("units", "", "", "units", "ListsToUnits", "many"),
    ],
    modelSchema: (ListsCreateInputSchema as any)
      .partial()
      .or((ListsUncheckedCreateInputSchema as any).partial()),
    createSchema: ListsCreateArgsSchema,
    createManySchema: ListsCreateManyArgsSchema,
    findUniqueSchema: ListsFindUniqueArgsSchema,
    findSchema: ListsFindFirstArgsSchema,
    updateSchema: ListsUpdateArgsSchema,
    updateManySchema: ListsUpdateManyArgsSchema,
    upsertSchema: ListsUpsertArgsSchema,
    deleteSchema: ListsDeleteArgsSchema,
    deleteManySchema: ListsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ListsCreateInputSchema>,
    Prisma.ListsCreateArgs['data'],
    Prisma.ListsUpdateArgs['data'],
    Prisma.ListsFindFirstArgs['select'],
    Prisma.ListsFindFirstArgs['where'],
    Prisma.ListsFindUniqueArgs['where'],
    Omit<Prisma.ListsInclude, '_count'>,
    Prisma.ListsFindFirstArgs['orderBy'],
    Prisma.ListsScalarFieldEnum,
    ListsGetPayload
  >,
  messages: {
    fields: new Map([
      [
        "message_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "date",
        "TIMESTAMP"
      ],
      [
        "message",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("user_messages", "", "", "user_messages", "MessagesToUser_messages", "many"),
    ],
    modelSchema: (MessagesCreateInputSchema as any)
      .partial()
      .or((MessagesUncheckedCreateInputSchema as any).partial()),
    createSchema: MessagesCreateArgsSchema,
    createManySchema: MessagesCreateManyArgsSchema,
    findUniqueSchema: MessagesFindUniqueArgsSchema,
    findSchema: MessagesFindFirstArgsSchema,
    updateSchema: MessagesUpdateArgsSchema,
    updateManySchema: MessagesUpdateManyArgsSchema,
    upsertSchema: MessagesUpsertArgsSchema,
    deleteSchema: MessagesDeleteArgsSchema,
    deleteManySchema: MessagesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof MessagesCreateInputSchema>,
    Prisma.MessagesCreateArgs['data'],
    Prisma.MessagesUpdateArgs['data'],
    Prisma.MessagesFindFirstArgs['select'],
    Prisma.MessagesFindFirstArgs['where'],
    Prisma.MessagesFindUniqueArgs['where'],
    Omit<Prisma.MessagesInclude, '_count'>,
    Prisma.MessagesFindFirstArgs['orderBy'],
    Prisma.MessagesScalarFieldEnum,
    MessagesGetPayload
  >,
  observation_sources: {
    fields: new Map([
      [
        "observation_source_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToObservation_sources", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Observation_sourcesToProjects", "one"),
      new Relation("observations", "", "", "observations", "Observation_sourcesToObservations", "many"),
    ],
    modelSchema: (Observation_sourcesCreateInputSchema as any)
      .partial()
      .or((Observation_sourcesUncheckedCreateInputSchema as any).partial()),
    createSchema: Observation_sourcesCreateArgsSchema,
    createManySchema: Observation_sourcesCreateManyArgsSchema,
    findUniqueSchema: Observation_sourcesFindUniqueArgsSchema,
    findSchema: Observation_sourcesFindFirstArgsSchema,
    updateSchema: Observation_sourcesUpdateArgsSchema,
    updateManySchema: Observation_sourcesUpdateManyArgsSchema,
    upsertSchema: Observation_sourcesUpsertArgsSchema,
    deleteSchema: Observation_sourcesDeleteArgsSchema,
    deleteManySchema: Observation_sourcesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Observation_sourcesCreateInputSchema>,
    Prisma.Observation_sourcesCreateArgs['data'],
    Prisma.Observation_sourcesUpdateArgs['data'],
    Prisma.Observation_sourcesFindFirstArgs['select'],
    Prisma.Observation_sourcesFindFirstArgs['where'],
    Prisma.Observation_sourcesFindUniqueArgs['where'],
    Omit<Prisma.Observation_sourcesInclude, '_count'>,
    Prisma.Observation_sourcesFindFirstArgs['orderBy'],
    Prisma.Observation_sourcesScalarFieldEnum,
    Observation_sourcesGetPayload
  >,
  observations: {
    fields: new Map([
      [
        "observation_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "observation_source_id",
        "UUID"
      ],
      [
        "place_id",
        "UUID"
      ],
      [
        "id_in_source",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "observation_data",
        "JSONB"
      ],
      [
        "date",
        "DATE"
      ],
      [
        "author",
        "TEXT"
      ],
      [
        "geometry",
        "JSONB"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToObservations", "one"),
      new Relation("observation_sources", "observation_source_id", "observation_source_id", "observation_sources", "Observation_sourcesToObservations", "one"),
      new Relation("places", "place_id", "place_id", "places", "ObservationsToPlaces", "one"),
    ],
    modelSchema: (ObservationsCreateInputSchema as any)
      .partial()
      .or((ObservationsUncheckedCreateInputSchema as any).partial()),
    createSchema: ObservationsCreateArgsSchema,
    createManySchema: ObservationsCreateManyArgsSchema,
    findUniqueSchema: ObservationsFindUniqueArgsSchema,
    findSchema: ObservationsFindFirstArgsSchema,
    updateSchema: ObservationsUpdateArgsSchema,
    updateManySchema: ObservationsUpdateManyArgsSchema,
    upsertSchema: ObservationsUpsertArgsSchema,
    deleteSchema: ObservationsDeleteArgsSchema,
    deleteManySchema: ObservationsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ObservationsCreateInputSchema>,
    Prisma.ObservationsCreateArgs['data'],
    Prisma.ObservationsUpdateArgs['data'],
    Prisma.ObservationsFindFirstArgs['select'],
    Prisma.ObservationsFindFirstArgs['where'],
    Prisma.ObservationsFindUniqueArgs['where'],
    Omit<Prisma.ObservationsInclude, '_count'>,
    Prisma.ObservationsFindFirstArgs['orderBy'],
    Prisma.ObservationsScalarFieldEnum,
    ObservationsGetPayload
  >,
  persons: {
    fields: new Map([
      [
        "person_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "email",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToPersons", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "PersonsToProjects", "one"),
    ],
    modelSchema: (PersonsCreateInputSchema as any)
      .partial()
      .or((PersonsUncheckedCreateInputSchema as any).partial()),
    createSchema: PersonsCreateArgsSchema,
    createManySchema: PersonsCreateManyArgsSchema,
    findUniqueSchema: PersonsFindUniqueArgsSchema,
    findSchema: PersonsFindFirstArgsSchema,
    updateSchema: PersonsUpdateArgsSchema,
    updateManySchema: PersonsUpdateManyArgsSchema,
    upsertSchema: PersonsUpsertArgsSchema,
    deleteSchema: PersonsDeleteArgsSchema,
    deleteManySchema: PersonsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof PersonsCreateInputSchema>,
    Prisma.PersonsCreateArgs['data'],
    Prisma.PersonsUpdateArgs['data'],
    Prisma.PersonsFindFirstArgs['select'],
    Prisma.PersonsFindFirstArgs['where'],
    Prisma.PersonsFindUniqueArgs['where'],
    Omit<Prisma.PersonsInclude, '_count'>,
    Prisma.PersonsFindFirstArgs['orderBy'],
    Prisma.PersonsScalarFieldEnum,
    PersonsGetPayload
  >,
  place_levels: {
    fields: new Map([
      [
        "place_level_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "level",
        "INT4"
      ],
      [
        "name_singular",
        "TEXT"
      ],
      [
        "name_plural",
        "TEXT"
      ],
      [
        "name_short",
        "TEXT"
      ],
      [
        "reports",
        "BOOL"
      ],
      [
        "report_values",
        "BOOL"
      ],
      [
        "actions",
        "BOOL"
      ],
      [
        "action_values",
        "BOOL"
      ],
      [
        "action_reports",
        "BOOL"
      ],
      [
        "checks",
        "BOOL"
      ],
      [
        "check_values",
        "BOOL"
      ],
      [
        "check_taxa",
        "BOOL"
      ],
      [
        "observations",
        "BOOL"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToPlace_levels", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Place_levelsToProjects", "one"),
    ],
    modelSchema: (Place_levelsCreateInputSchema as any)
      .partial()
      .or((Place_levelsUncheckedCreateInputSchema as any).partial()),
    createSchema: Place_levelsCreateArgsSchema,
    createManySchema: Place_levelsCreateManyArgsSchema,
    findUniqueSchema: Place_levelsFindUniqueArgsSchema,
    findSchema: Place_levelsFindFirstArgsSchema,
    updateSchema: Place_levelsUpdateArgsSchema,
    updateManySchema: Place_levelsUpdateManyArgsSchema,
    upsertSchema: Place_levelsUpsertArgsSchema,
    deleteSchema: Place_levelsDeleteArgsSchema,
    deleteManySchema: Place_levelsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Place_levelsCreateInputSchema>,
    Prisma.Place_levelsCreateArgs['data'],
    Prisma.Place_levelsUpdateArgs['data'],
    Prisma.Place_levelsFindFirstArgs['select'],
    Prisma.Place_levelsFindFirstArgs['where'],
    Prisma.Place_levelsFindUniqueArgs['where'],
    Omit<Prisma.Place_levelsInclude, '_count'>,
    Prisma.Place_levelsFindFirstArgs['orderBy'],
    Prisma.Place_levelsScalarFieldEnum,
    Place_levelsGetPayload
  >,
  places: {
    fields: new Map([
      [
        "place_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "parent_id",
        "UUID"
      ],
      [
        "level",
        "INT4"
      ],
      [
        "since",
        "INT4"
      ],
      [
        "until",
        "INT4"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "geometry",
        "JSONB"
      ],
      [
        "bbox",
        "JSONB"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "files_active_places",
        "BOOL"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("charts", "", "", "charts", "ChartsToPlaces", "many"),
      new Relation("observations", "", "", "observations", "ObservationsToPlaces", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToPlaces", "one"),
      new Relation("places", "parent_id", "place_id", "places", "placesToplaces", "one"),
      new Relation("other_places", "", "", "places", "placesToplaces", "many"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "PlacesToSubprojects", "one"),
    ],
    modelSchema: (PlacesCreateInputSchema as any)
      .partial()
      .or((PlacesUncheckedCreateInputSchema as any).partial()),
    createSchema: PlacesCreateArgsSchema,
    createManySchema: PlacesCreateManyArgsSchema,
    findUniqueSchema: PlacesFindUniqueArgsSchema,
    findSchema: PlacesFindFirstArgsSchema,
    updateSchema: PlacesUpdateArgsSchema,
    updateManySchema: PlacesUpdateManyArgsSchema,
    upsertSchema: PlacesUpsertArgsSchema,
    deleteSchema: PlacesDeleteArgsSchema,
    deleteManySchema: PlacesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof PlacesCreateInputSchema>,
    Prisma.PlacesCreateArgs['data'],
    Prisma.PlacesUpdateArgs['data'],
    Prisma.PlacesFindFirstArgs['select'],
    Prisma.PlacesFindFirstArgs['where'],
    Prisma.PlacesFindUniqueArgs['where'],
    Omit<Prisma.PlacesInclude, '_count'>,
    Prisma.PlacesFindFirstArgs['orderBy'],
    Prisma.PlacesScalarFieldEnum,
    PlacesGetPayload
  >,
  project_reports: {
    fields: new Map([
      [
        "project_report_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "year",
        "INT4"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToProject_reports", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Project_reportsToProjects", "one"),
    ],
    modelSchema: (Project_reportsCreateInputSchema as any)
      .partial()
      .or((Project_reportsUncheckedCreateInputSchema as any).partial()),
    createSchema: Project_reportsCreateArgsSchema,
    createManySchema: Project_reportsCreateManyArgsSchema,
    findUniqueSchema: Project_reportsFindUniqueArgsSchema,
    findSchema: Project_reportsFindFirstArgsSchema,
    updateSchema: Project_reportsUpdateArgsSchema,
    updateManySchema: Project_reportsUpdateManyArgsSchema,
    upsertSchema: Project_reportsUpsertArgsSchema,
    deleteSchema: Project_reportsDeleteArgsSchema,
    deleteManySchema: Project_reportsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Project_reportsCreateInputSchema>,
    Prisma.Project_reportsCreateArgs['data'],
    Prisma.Project_reportsUpdateArgs['data'],
    Prisma.Project_reportsFindFirstArgs['select'],
    Prisma.Project_reportsFindFirstArgs['where'],
    Prisma.Project_reportsFindUniqueArgs['where'],
    Omit<Prisma.Project_reportsInclude, '_count'>,
    Prisma.Project_reportsFindFirstArgs['orderBy'],
    Prisma.Project_reportsScalarFieldEnum,
    Project_reportsGetPayload
  >,
  project_users: {
    fields: new Map([
      [
        "project_user_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "role",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToProject_users", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "Project_usersToProjects", "one"),
      new Relation("users", "user_id", "user_id", "users", "Project_usersToUsers", "one"),
    ],
    modelSchema: (Project_usersCreateInputSchema as any)
      .partial()
      .or((Project_usersUncheckedCreateInputSchema as any).partial()),
    createSchema: Project_usersCreateArgsSchema,
    createManySchema: Project_usersCreateManyArgsSchema,
    findUniqueSchema: Project_usersFindUniqueArgsSchema,
    findSchema: Project_usersFindFirstArgsSchema,
    updateSchema: Project_usersUpdateArgsSchema,
    updateManySchema: Project_usersUpdateManyArgsSchema,
    upsertSchema: Project_usersUpsertArgsSchema,
    deleteSchema: Project_usersDeleteArgsSchema,
    deleteManySchema: Project_usersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Project_usersCreateInputSchema>,
    Prisma.Project_usersCreateArgs['data'],
    Prisma.Project_usersUpdateArgs['data'],
    Prisma.Project_usersFindFirstArgs['select'],
    Prisma.Project_usersFindFirstArgs['where'],
    Prisma.Project_usersFindUniqueArgs['where'],
    Omit<Prisma.Project_usersInclude, '_count'>,
    Prisma.Project_usersFindFirstArgs['orderBy'],
    Prisma.Project_usersScalarFieldEnum,
    Project_usersGetPayload
  >,
  projects: {
    fields: new Map([
      [
        "project_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "subproject_name_singular",
        "TEXT"
      ],
      [
        "subproject_name_plural",
        "TEXT"
      ],
      [
        "subproject_order_by",
        "TEXT"
      ],
      [
        "places_label_by",
        "TEXT"
      ],
      [
        "places_order_by",
        "JSONB"
      ],
      [
        "persons_label_by",
        "TEXT"
      ],
      [
        "persons_order_by",
        "TEXT"
      ],
      [
        "goal_reports_label_by",
        "TEXT"
      ],
      [
        "goal_reports_order_by",
        "TEXT"
      ],
      [
        "values_on_multiple_levels",
        "TEXT"
      ],
      [
        "multiple_action_values_on_same_level",
        "TEXT"
      ],
      [
        "multiple_check_values_on_same_level",
        "TEXT"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "files_offline",
        "BOOL"
      ],
      [
        "files_active_projects",
        "BOOL"
      ],
      [
        "files_active_subprojects",
        "BOOL"
      ],
      [
        "files_active_places",
        "BOOL"
      ],
      [
        "files_active_actions",
        "BOOL"
      ],
      [
        "files_active_checks",
        "BOOL"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("charts", "", "", "charts", "ChartsToProjects", "many"),
      new Relation("fields", "", "", "fields", "FieldsToProjects", "many"),
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "Gbif_occurrence_downloadsToProjects", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "Gbif_occurrencesToProjects", "many"),
      new Relation("gbif_taxa", "", "", "gbif_taxa", "Gbif_taxaToProjects", "many"),
      new Relation("lists", "", "", "lists", "ListsToProjects", "many"),
      new Relation("observation_sources", "", "", "observation_sources", "Observation_sourcesToProjects", "many"),
      new Relation("persons", "", "", "persons", "PersonsToProjects", "many"),
      new Relation("place_levels", "", "", "place_levels", "Place_levelsToProjects", "many"),
      new Relation("project_reports", "", "", "project_reports", "Project_reportsToProjects", "many"),
      new Relation("project_users", "", "", "project_users", "Project_usersToProjects", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToProjects", "one"),
      new Relation("subprojects", "", "", "subprojects", "ProjectsToSubprojects", "many"),
      new Relation("taxonomies", "", "", "taxonomies", "ProjectsToTaxonomies", "many"),
      new Relation("tile_layers", "", "", "tile_layers", "ProjectsToTile_layers", "many"),
      new Relation("units", "", "", "units", "ProjectsToUnits", "many"),
      new Relation("vector_layers", "", "", "vector_layers", "ProjectsToVector_layers", "many"),
    ],
    modelSchema: (ProjectsCreateInputSchema as any)
      .partial()
      .or((ProjectsUncheckedCreateInputSchema as any).partial()),
    createSchema: ProjectsCreateArgsSchema,
    createManySchema: ProjectsCreateManyArgsSchema,
    findUniqueSchema: ProjectsFindUniqueArgsSchema,
    findSchema: ProjectsFindFirstArgsSchema,
    updateSchema: ProjectsUpdateArgsSchema,
    updateManySchema: ProjectsUpdateManyArgsSchema,
    upsertSchema: ProjectsUpsertArgsSchema,
    deleteSchema: ProjectsDeleteArgsSchema,
    deleteManySchema: ProjectsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof ProjectsCreateInputSchema>,
    Prisma.ProjectsCreateArgs['data'],
    Prisma.ProjectsUpdateArgs['data'],
    Prisma.ProjectsFindFirstArgs['select'],
    Prisma.ProjectsFindFirstArgs['where'],
    Prisma.ProjectsFindUniqueArgs['where'],
    Omit<Prisma.ProjectsInclude, '_count'>,
    Prisma.ProjectsFindFirstArgs['orderBy'],
    Prisma.ProjectsScalarFieldEnum,
    ProjectsGetPayload
  >,
  subproject_reports: {
    fields: new Map([
      [
        "subproject_report_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "year",
        "INT4"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToSubproject_reports", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Subproject_reportsToSubprojects", "one"),
    ],
    modelSchema: (Subproject_reportsCreateInputSchema as any)
      .partial()
      .or((Subproject_reportsUncheckedCreateInputSchema as any).partial()),
    createSchema: Subproject_reportsCreateArgsSchema,
    createManySchema: Subproject_reportsCreateManyArgsSchema,
    findUniqueSchema: Subproject_reportsFindUniqueArgsSchema,
    findSchema: Subproject_reportsFindFirstArgsSchema,
    updateSchema: Subproject_reportsUpdateArgsSchema,
    updateManySchema: Subproject_reportsUpdateManyArgsSchema,
    upsertSchema: Subproject_reportsUpsertArgsSchema,
    deleteSchema: Subproject_reportsDeleteArgsSchema,
    deleteManySchema: Subproject_reportsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Subproject_reportsCreateInputSchema>,
    Prisma.Subproject_reportsCreateArgs['data'],
    Prisma.Subproject_reportsUpdateArgs['data'],
    Prisma.Subproject_reportsFindFirstArgs['select'],
    Prisma.Subproject_reportsFindFirstArgs['where'],
    Prisma.Subproject_reportsFindUniqueArgs['where'],
    Omit<Prisma.Subproject_reportsInclude, '_count'>,
    Prisma.Subproject_reportsFindFirstArgs['orderBy'],
    Prisma.Subproject_reportsScalarFieldEnum,
    Subproject_reportsGetPayload
  >,
  subproject_taxa: {
    fields: new Map([
      [
        "subproject_taxon_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "taxon_id",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToSubproject_taxa", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Subproject_taxaToSubprojects", "one"),
      new Relation("taxa", "taxon_id", "taxon_id", "taxa", "Subproject_taxaToTaxa", "one"),
    ],
    modelSchema: (Subproject_taxaCreateInputSchema as any)
      .partial()
      .or((Subproject_taxaUncheckedCreateInputSchema as any).partial()),
    createSchema: Subproject_taxaCreateArgsSchema,
    createManySchema: Subproject_taxaCreateManyArgsSchema,
    findUniqueSchema: Subproject_taxaFindUniqueArgsSchema,
    findSchema: Subproject_taxaFindFirstArgsSchema,
    updateSchema: Subproject_taxaUpdateArgsSchema,
    updateManySchema: Subproject_taxaUpdateManyArgsSchema,
    upsertSchema: Subproject_taxaUpsertArgsSchema,
    deleteSchema: Subproject_taxaDeleteArgsSchema,
    deleteManySchema: Subproject_taxaDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Subproject_taxaCreateInputSchema>,
    Prisma.Subproject_taxaCreateArgs['data'],
    Prisma.Subproject_taxaUpdateArgs['data'],
    Prisma.Subproject_taxaFindFirstArgs['select'],
    Prisma.Subproject_taxaFindFirstArgs['where'],
    Prisma.Subproject_taxaFindUniqueArgs['where'],
    Omit<Prisma.Subproject_taxaInclude, '_count'>,
    Prisma.Subproject_taxaFindFirstArgs['orderBy'],
    Prisma.Subproject_taxaScalarFieldEnum,
    Subproject_taxaGetPayload
  >,
  subproject_users: {
    fields: new Map([
      [
        "subproject_user_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "subproject_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "role",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToSubproject_users", "one"),
      new Relation("subprojects", "subproject_id", "subproject_id", "subprojects", "Subproject_usersToSubprojects", "one"),
      new Relation("users", "user_id", "user_id", "users", "Subproject_usersToUsers", "one"),
    ],
    modelSchema: (Subproject_usersCreateInputSchema as any)
      .partial()
      .or((Subproject_usersUncheckedCreateInputSchema as any).partial()),
    createSchema: Subproject_usersCreateArgsSchema,
    createManySchema: Subproject_usersCreateManyArgsSchema,
    findUniqueSchema: Subproject_usersFindUniqueArgsSchema,
    findSchema: Subproject_usersFindFirstArgsSchema,
    updateSchema: Subproject_usersUpdateArgsSchema,
    updateManySchema: Subproject_usersUpdateManyArgsSchema,
    upsertSchema: Subproject_usersUpsertArgsSchema,
    deleteSchema: Subproject_usersDeleteArgsSchema,
    deleteManySchema: Subproject_usersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Subproject_usersCreateInputSchema>,
    Prisma.Subproject_usersCreateArgs['data'],
    Prisma.Subproject_usersUpdateArgs['data'],
    Prisma.Subproject_usersFindFirstArgs['select'],
    Prisma.Subproject_usersFindFirstArgs['where'],
    Prisma.Subproject_usersFindUniqueArgs['where'],
    Omit<Prisma.Subproject_usersInclude, '_count'>,
    Prisma.Subproject_usersFindFirstArgs['orderBy'],
    Prisma.Subproject_usersScalarFieldEnum,
    Subproject_usersGetPayload
  >,
  subprojects: {
    fields: new Map([
      [
        "subproject_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "start_year",
        "INT4"
      ],
      [
        "end_year",
        "INT4"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("charts", "", "", "charts", "ChartsToSubprojects", "many"),
      new Relation("gbif_occurrence_downloads", "", "", "gbif_occurrence_downloads", "Gbif_occurrence_downloadsToSubprojects", "many"),
      new Relation("gbif_occurrences", "", "", "gbif_occurrences", "Gbif_occurrencesToSubprojects", "many"),
      new Relation("goals", "", "", "goals", "GoalsToSubprojects", "many"),
      new Relation("places", "", "", "places", "PlacesToSubprojects", "many"),
      new Relation("subproject_reports", "", "", "subproject_reports", "Subproject_reportsToSubprojects", "many"),
      new Relation("subproject_taxa", "", "", "subproject_taxa", "Subproject_taxaToSubprojects", "many"),
      new Relation("subproject_users", "", "", "subproject_users", "Subproject_usersToSubprojects", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToSubprojects", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToSubprojects", "one"),
    ],
    modelSchema: (SubprojectsCreateInputSchema as any)
      .partial()
      .or((SubprojectsUncheckedCreateInputSchema as any).partial()),
    createSchema: SubprojectsCreateArgsSchema,
    createManySchema: SubprojectsCreateManyArgsSchema,
    findUniqueSchema: SubprojectsFindUniqueArgsSchema,
    findSchema: SubprojectsFindFirstArgsSchema,
    updateSchema: SubprojectsUpdateArgsSchema,
    updateManySchema: SubprojectsUpdateManyArgsSchema,
    upsertSchema: SubprojectsUpsertArgsSchema,
    deleteSchema: SubprojectsDeleteArgsSchema,
    deleteManySchema: SubprojectsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof SubprojectsCreateInputSchema>,
    Prisma.SubprojectsCreateArgs['data'],
    Prisma.SubprojectsUpdateArgs['data'],
    Prisma.SubprojectsFindFirstArgs['select'],
    Prisma.SubprojectsFindFirstArgs['where'],
    Prisma.SubprojectsFindUniqueArgs['where'],
    Omit<Prisma.SubprojectsInclude, '_count'>,
    Prisma.SubprojectsFindFirstArgs['orderBy'],
    Prisma.SubprojectsScalarFieldEnum,
    SubprojectsGetPayload
  >,
  taxa: {
    fields: new Map([
      [
        "taxon_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "taxonomy_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "id_in_source",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("subproject_taxa", "", "", "subproject_taxa", "Subproject_taxaToTaxa", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToTaxa", "one"),
      new Relation("taxonomies", "taxonomy_id", "taxonomy_id", "taxonomies", "TaxaToTaxonomies", "one"),
    ],
    modelSchema: (TaxaCreateInputSchema as any)
      .partial()
      .or((TaxaUncheckedCreateInputSchema as any).partial()),
    createSchema: TaxaCreateArgsSchema,
    createManySchema: TaxaCreateManyArgsSchema,
    findUniqueSchema: TaxaFindUniqueArgsSchema,
    findSchema: TaxaFindFirstArgsSchema,
    updateSchema: TaxaUpdateArgsSchema,
    updateManySchema: TaxaUpdateManyArgsSchema,
    upsertSchema: TaxaUpsertArgsSchema,
    deleteSchema: TaxaDeleteArgsSchema,
    deleteManySchema: TaxaDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaxaCreateInputSchema>,
    Prisma.TaxaCreateArgs['data'],
    Prisma.TaxaUpdateArgs['data'],
    Prisma.TaxaFindFirstArgs['select'],
    Prisma.TaxaFindFirstArgs['where'],
    Prisma.TaxaFindUniqueArgs['where'],
    Omit<Prisma.TaxaInclude, '_count'>,
    Prisma.TaxaFindFirstArgs['orderBy'],
    Prisma.TaxaScalarFieldEnum,
    TaxaGetPayload
  >,
  taxonomies: {
    fields: new Map([
      [
        "taxonomy_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "url",
        "TEXT"
      ],
      [
        "obsolete",
        "BOOL"
      ],
      [
        "data",
        "JSONB"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("taxa", "", "", "taxa", "TaxaToTaxonomies", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToTaxonomies", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToTaxonomies", "one"),
    ],
    modelSchema: (TaxonomiesCreateInputSchema as any)
      .partial()
      .or((TaxonomiesUncheckedCreateInputSchema as any).partial()),
    createSchema: TaxonomiesCreateArgsSchema,
    createManySchema: TaxonomiesCreateManyArgsSchema,
    findUniqueSchema: TaxonomiesFindUniqueArgsSchema,
    findSchema: TaxonomiesFindFirstArgsSchema,
    updateSchema: TaxonomiesUpdateArgsSchema,
    updateManySchema: TaxonomiesUpdateManyArgsSchema,
    upsertSchema: TaxonomiesUpsertArgsSchema,
    deleteSchema: TaxonomiesDeleteArgsSchema,
    deleteManySchema: TaxonomiesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof TaxonomiesCreateInputSchema>,
    Prisma.TaxonomiesCreateArgs['data'],
    Prisma.TaxonomiesUpdateArgs['data'],
    Prisma.TaxonomiesFindFirstArgs['select'],
    Prisma.TaxonomiesFindFirstArgs['where'],
    Prisma.TaxonomiesFindUniqueArgs['where'],
    Omit<Prisma.TaxonomiesInclude, '_count'>,
    Prisma.TaxonomiesFindFirstArgs['orderBy'],
    Prisma.TaxonomiesScalarFieldEnum,
    TaxonomiesGetPayload
  >,
  tile_layers: {
    fields: new Map([
      [
        "tile_layer_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "active",
        "BOOL"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "wmts_url_template",
        "TEXT"
      ],
      [
        "wmts_subdomains",
        "JSONB"
      ],
      [
        "wms_base_url",
        "TEXT"
      ],
      [
        "wms_format",
        "JSONB"
      ],
      [
        "wms_layer",
        "JSONB"
      ],
      [
        "wms_parameters",
        "JSONB"
      ],
      [
        "wms_styles",
        "JSONB"
      ],
      [
        "wms_transparent",
        "BOOL"
      ],
      [
        "wms_version",
        "TEXT"
      ],
      [
        "wms_info_format",
        "JSONB"
      ],
      [
        "wms_legend",
        "JSONB"
      ],
      [
        "max_zoom",
        "INT4"
      ],
      [
        "min_zoom",
        "INT4"
      ],
      [
        "opacity_percent",
        "INT4"
      ],
      [
        "grayscale",
        "BOOL"
      ],
      [
        "local_data_size",
        "INT4"
      ],
      [
        "local_data_bounds",
        "JSONB"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("layer_options", "", "", "layer_options", "Layer_optionsToTile_layers", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToTile_layers", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToTile_layers", "one"),
    ],
    modelSchema: (Tile_layersCreateInputSchema as any)
      .partial()
      .or((Tile_layersUncheckedCreateInputSchema as any).partial()),
    createSchema: Tile_layersCreateArgsSchema,
    createManySchema: Tile_layersCreateManyArgsSchema,
    findUniqueSchema: Tile_layersFindUniqueArgsSchema,
    findSchema: Tile_layersFindFirstArgsSchema,
    updateSchema: Tile_layersUpdateArgsSchema,
    updateManySchema: Tile_layersUpdateManyArgsSchema,
    upsertSchema: Tile_layersUpsertArgsSchema,
    deleteSchema: Tile_layersDeleteArgsSchema,
    deleteManySchema: Tile_layersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Tile_layersCreateInputSchema>,
    Prisma.Tile_layersCreateArgs['data'],
    Prisma.Tile_layersUpdateArgs['data'],
    Prisma.Tile_layersFindFirstArgs['select'],
    Prisma.Tile_layersFindFirstArgs['where'],
    Prisma.Tile_layersFindUniqueArgs['where'],
    Omit<Prisma.Tile_layersInclude, '_count'>,
    Prisma.Tile_layersFindFirstArgs['orderBy'],
    Prisma.Tile_layersScalarFieldEnum,
    Tile_layersGetPayload
  >,
  ui_options: {
    fields: new Map([
      [
        "user_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "designing",
        "BOOL"
      ],
      [
        "breadcrumbs_overflowing",
        "BOOL"
      ],
      [
        "navs_overflowing",
        "BOOL"
      ],
      [
        "tabs",
        "JSONB"
      ],
      [
        "show_map",
        "BOOL"
      ],
      [
        "map_bounds",
        "JSONB"
      ],
      [
        "local_map_show",
        "JSONB"
      ],
      [
        "tile_layer_sorter",
        "TEXT"
      ],
      [
        "vector_layer_sorter",
        "TEXT"
      ],
      [
        "editing_place_geometry",
        "UUID"
      ],
      [
        "editing_check_geometry",
        "UUID"
      ],
      [
        "editing_action_geometry",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToUi_options", "one"),
      new Relation("users", "user_id", "user_id", "users", "Ui_optionsToUsers", "one"),
    ],
    modelSchema: (Ui_optionsCreateInputSchema as any)
      .partial()
      .or((Ui_optionsUncheckedCreateInputSchema as any).partial()),
    createSchema: Ui_optionsCreateArgsSchema,
    createManySchema: Ui_optionsCreateManyArgsSchema,
    findUniqueSchema: Ui_optionsFindUniqueArgsSchema,
    findSchema: Ui_optionsFindFirstArgsSchema,
    updateSchema: Ui_optionsUpdateArgsSchema,
    updateManySchema: Ui_optionsUpdateManyArgsSchema,
    upsertSchema: Ui_optionsUpsertArgsSchema,
    deleteSchema: Ui_optionsDeleteArgsSchema,
    deleteManySchema: Ui_optionsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Ui_optionsCreateInputSchema>,
    Prisma.Ui_optionsCreateArgs['data'],
    Prisma.Ui_optionsUpdateArgs['data'],
    Prisma.Ui_optionsFindFirstArgs['select'],
    Prisma.Ui_optionsFindFirstArgs['where'],
    Prisma.Ui_optionsFindUniqueArgs['where'],
    Omit<Prisma.Ui_optionsInclude, '_count'>,
    Prisma.Ui_optionsFindFirstArgs['orderBy'],
    Prisma.Ui_optionsScalarFieldEnum,
    Ui_optionsGetPayload
  >,
  units: {
    fields: new Map([
      [
        "unit_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "use_for_action_values",
        "BOOL"
      ],
      [
        "use_for_action_report_values",
        "BOOL"
      ],
      [
        "use_for_check_values",
        "BOOL"
      ],
      [
        "use_for_place_report_values",
        "BOOL"
      ],
      [
        "use_for_goal_report_values",
        "BOOL"
      ],
      [
        "use_for_subproject_taxa",
        "BOOL"
      ],
      [
        "use_for_check_taxa",
        "BOOL"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "summable",
        "BOOL"
      ],
      [
        "sort",
        "INT4"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "list_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("chart_subjects", "", "", "chart_subjects", "Chart_subjectsToUnits", "many"),
      new Relation("goal_report_values", "", "", "goal_report_values", "Goal_report_valuesToUnits", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToUnits", "one"),
      new Relation("lists", "list_id", "list_id", "lists", "ListsToUnits", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToUnits", "one"),
    ],
    modelSchema: (UnitsCreateInputSchema as any)
      .partial()
      .or((UnitsUncheckedCreateInputSchema as any).partial()),
    createSchema: UnitsCreateArgsSchema,
    createManySchema: UnitsCreateManyArgsSchema,
    findUniqueSchema: UnitsFindUniqueArgsSchema,
    findSchema: UnitsFindFirstArgsSchema,
    updateSchema: UnitsUpdateArgsSchema,
    updateManySchema: UnitsUpdateManyArgsSchema,
    upsertSchema: UnitsUpsertArgsSchema,
    deleteSchema: UnitsDeleteArgsSchema,
    deleteManySchema: UnitsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof UnitsCreateInputSchema>,
    Prisma.UnitsCreateArgs['data'],
    Prisma.UnitsUpdateArgs['data'],
    Prisma.UnitsFindFirstArgs['select'],
    Prisma.UnitsFindFirstArgs['where'],
    Prisma.UnitsFindUniqueArgs['where'],
    Omit<Prisma.UnitsInclude, '_count'>,
    Prisma.UnitsFindFirstArgs['orderBy'],
    Prisma.UnitsScalarFieldEnum,
    UnitsGetPayload
  >,
  user_messages: {
    fields: new Map([
      [
        "user_message_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "user_id",
        "UUID"
      ],
      [
        "message_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "read",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToUser_messages", "one"),
      new Relation("messages", "message_id", "message_id", "messages", "MessagesToUser_messages", "one"),
      new Relation("users", "user_id", "user_id", "users", "User_messagesToUsers", "one"),
    ],
    modelSchema: (User_messagesCreateInputSchema as any)
      .partial()
      .or((User_messagesUncheckedCreateInputSchema as any).partial()),
    createSchema: User_messagesCreateArgsSchema,
    createManySchema: User_messagesCreateManyArgsSchema,
    findUniqueSchema: User_messagesFindUniqueArgsSchema,
    findSchema: User_messagesFindFirstArgsSchema,
    updateSchema: User_messagesUpdateArgsSchema,
    updateManySchema: User_messagesUpdateManyArgsSchema,
    upsertSchema: User_messagesUpsertArgsSchema,
    deleteSchema: User_messagesDeleteArgsSchema,
    deleteManySchema: User_messagesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof User_messagesCreateInputSchema>,
    Prisma.User_messagesCreateArgs['data'],
    Prisma.User_messagesUpdateArgs['data'],
    Prisma.User_messagesFindFirstArgs['select'],
    Prisma.User_messagesFindFirstArgs['where'],
    Prisma.User_messagesFindUniqueArgs['where'],
    Omit<Prisma.User_messagesInclude, '_count'>,
    Prisma.User_messagesFindFirstArgs['orderBy'],
    Prisma.User_messagesScalarFieldEnum,
    User_messagesGetPayload
  >,
  users: {
    fields: new Map([
      [
        "user_id",
        "UUID"
      ],
      [
        "email",
        "TEXT"
      ],
      [
        "auth_id",
        "UUID"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "", "", "accounts", "AccountsToUsers", "many"),
      new Relation("project_users", "", "", "project_users", "Project_usersToUsers", "many"),
      new Relation("subproject_users", "", "", "subproject_users", "Subproject_usersToUsers", "many"),
      new Relation("ui_options", "", "", "ui_options", "Ui_optionsToUsers", "one"),
      new Relation("user_messages", "", "", "user_messages", "User_messagesToUsers", "many"),
    ],
    modelSchema: (UsersCreateInputSchema as any)
      .partial()
      .or((UsersUncheckedCreateInputSchema as any).partial()),
    createSchema: UsersCreateArgsSchema,
    createManySchema: UsersCreateManyArgsSchema,
    findUniqueSchema: UsersFindUniqueArgsSchema,
    findSchema: UsersFindFirstArgsSchema,
    updateSchema: UsersUpdateArgsSchema,
    updateManySchema: UsersUpdateManyArgsSchema,
    upsertSchema: UsersUpsertArgsSchema,
    deleteSchema: UsersDeleteArgsSchema,
    deleteManySchema: UsersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof UsersCreateInputSchema>,
    Prisma.UsersCreateArgs['data'],
    Prisma.UsersUpdateArgs['data'],
    Prisma.UsersFindFirstArgs['select'],
    Prisma.UsersFindFirstArgs['where'],
    Prisma.UsersFindUniqueArgs['where'],
    Omit<Prisma.UsersInclude, '_count'>,
    Prisma.UsersFindFirstArgs['orderBy'],
    Prisma.UsersScalarFieldEnum,
    UsersGetPayload
  >,
  vector_layer_displays: {
    fields: new Map([
      [
        "vector_layer_display_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "vector_layer_id",
        "UUID"
      ],
      [
        "display_property_value",
        "TEXT"
      ],
      [
        "marker_type",
        "TEXT"
      ],
      [
        "circle_marker_radius",
        "INT4"
      ],
      [
        "marker_symbol",
        "TEXT"
      ],
      [
        "marker_size",
        "INT4"
      ],
      [
        "stroke",
        "BOOL"
      ],
      [
        "color",
        "TEXT"
      ],
      [
        "weight",
        "INT4"
      ],
      [
        "opacity_percent",
        "INT4"
      ],
      [
        "line_cap",
        "TEXT"
      ],
      [
        "line_join",
        "TEXT"
      ],
      [
        "dash_array",
        "TEXT"
      ],
      [
        "dash_offset",
        "TEXT"
      ],
      [
        "fill",
        "BOOL"
      ],
      [
        "fill_color",
        "TEXT"
      ],
      [
        "fill_opacity_percent",
        "INT4"
      ],
      [
        "fill_rule",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToVector_layer_displays", "one"),
      new Relation("vector_layers", "vector_layer_id", "vector_layer_id", "vector_layers", "Vector_layer_displaysToVector_layers", "one"),
    ],
    modelSchema: (Vector_layer_displaysCreateInputSchema as any)
      .partial()
      .or((Vector_layer_displaysUncheckedCreateInputSchema as any).partial()),
    createSchema: Vector_layer_displaysCreateArgsSchema,
    createManySchema: Vector_layer_displaysCreateManyArgsSchema,
    findUniqueSchema: Vector_layer_displaysFindUniqueArgsSchema,
    findSchema: Vector_layer_displaysFindFirstArgsSchema,
    updateSchema: Vector_layer_displaysUpdateArgsSchema,
    updateManySchema: Vector_layer_displaysUpdateManyArgsSchema,
    upsertSchema: Vector_layer_displaysUpsertArgsSchema,
    deleteSchema: Vector_layer_displaysDeleteArgsSchema,
    deleteManySchema: Vector_layer_displaysDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Vector_layer_displaysCreateInputSchema>,
    Prisma.Vector_layer_displaysCreateArgs['data'],
    Prisma.Vector_layer_displaysUpdateArgs['data'],
    Prisma.Vector_layer_displaysFindFirstArgs['select'],
    Prisma.Vector_layer_displaysFindFirstArgs['where'],
    Prisma.Vector_layer_displaysFindUniqueArgs['where'],
    Omit<Prisma.Vector_layer_displaysInclude, '_count'>,
    Prisma.Vector_layer_displaysFindFirstArgs['orderBy'],
    Prisma.Vector_layer_displaysScalarFieldEnum,
    Vector_layer_displaysGetPayload
  >,
  vector_layer_geoms: {
    fields: new Map([
      [
        "vector_layer_geom_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "vector_layer_id",
        "UUID"
      ],
      [
        "geometry",
        "JSONB"
      ],
      [
        "properties",
        "JSONB"
      ],
      [
        "bbox_sw_lng",
        "FLOAT4"
      ],
      [
        "bbox_sw_lat",
        "FLOAT4"
      ],
      [
        "bbox_ne_lng",
        "FLOAT4"
      ],
      [
        "bbox_ne_lat",
        "FLOAT4"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToVector_layer_geoms", "one"),
      new Relation("vector_layers", "vector_layer_id", "vector_layer_id", "vector_layers", "Vector_layer_geomsToVector_layers", "one"),
    ],
    modelSchema: (Vector_layer_geomsCreateInputSchema as any)
      .partial()
      .or((Vector_layer_geomsUncheckedCreateInputSchema as any).partial()),
    createSchema: Vector_layer_geomsCreateArgsSchema,
    createManySchema: Vector_layer_geomsCreateManyArgsSchema,
    findUniqueSchema: Vector_layer_geomsFindUniqueArgsSchema,
    findSchema: Vector_layer_geomsFindFirstArgsSchema,
    updateSchema: Vector_layer_geomsUpdateArgsSchema,
    updateManySchema: Vector_layer_geomsUpdateManyArgsSchema,
    upsertSchema: Vector_layer_geomsUpsertArgsSchema,
    deleteSchema: Vector_layer_geomsDeleteArgsSchema,
    deleteManySchema: Vector_layer_geomsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Vector_layer_geomsCreateInputSchema>,
    Prisma.Vector_layer_geomsCreateArgs['data'],
    Prisma.Vector_layer_geomsUpdateArgs['data'],
    Prisma.Vector_layer_geomsFindFirstArgs['select'],
    Prisma.Vector_layer_geomsFindFirstArgs['where'],
    Prisma.Vector_layer_geomsFindUniqueArgs['where'],
    Omit<Prisma.Vector_layer_geomsInclude, '_count'>,
    Prisma.Vector_layer_geomsFindFirstArgs['orderBy'],
    Prisma.Vector_layer_geomsScalarFieldEnum,
    Vector_layer_geomsGetPayload
  >,
  vector_layers: {
    fields: new Map([
      [
        "vector_layer_id",
        "UUID"
      ],
      [
        "account_id",
        "UUID"
      ],
      [
        "project_id",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "type",
        "TEXT"
      ],
      [
        "display_by_property_field",
        "TEXT"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "active",
        "BOOL"
      ],
      [
        "max_zoom",
        "INT4"
      ],
      [
        "min_zoom",
        "INT4"
      ],
      [
        "max_features",
        "INT4"
      ],
      [
        "wfs_url",
        "TEXT"
      ],
      [
        "wfs_layer",
        "JSONB"
      ],
      [
        "wfs_version",
        "TEXT"
      ],
      [
        "wfs_output_format",
        "JSONB"
      ],
      [
        "feature_count",
        "INT4"
      ],
      [
        "point_count",
        "INT4"
      ],
      [
        "line_count",
        "INT4"
      ],
      [
        "polygon_count",
        "INT4"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("layer_options", "", "", "layer_options", "Layer_optionsToVector_layers", "many"),
      new Relation("vector_layer_displays", "", "", "vector_layer_displays", "Vector_layer_displaysToVector_layers", "many"),
      new Relation("vector_layer_geoms", "", "", "vector_layer_geoms", "Vector_layer_geomsToVector_layers", "many"),
      new Relation("accounts", "account_id", "account_id", "accounts", "AccountsToVector_layers", "one"),
      new Relation("projects", "project_id", "project_id", "projects", "ProjectsToVector_layers", "one"),
    ],
    modelSchema: (Vector_layersCreateInputSchema as any)
      .partial()
      .or((Vector_layersUncheckedCreateInputSchema as any).partial()),
    createSchema: Vector_layersCreateArgsSchema,
    createManySchema: Vector_layersCreateManyArgsSchema,
    findUniqueSchema: Vector_layersFindUniqueArgsSchema,
    findSchema: Vector_layersFindFirstArgsSchema,
    updateSchema: Vector_layersUpdateArgsSchema,
    updateManySchema: Vector_layersUpdateManyArgsSchema,
    upsertSchema: Vector_layersUpsertArgsSchema,
    deleteSchema: Vector_layersDeleteArgsSchema,
    deleteManySchema: Vector_layersDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Vector_layersCreateInputSchema>,
    Prisma.Vector_layersCreateArgs['data'],
    Prisma.Vector_layersUpdateArgs['data'],
    Prisma.Vector_layersFindFirstArgs['select'],
    Prisma.Vector_layersFindFirstArgs['where'],
    Prisma.Vector_layersFindUniqueArgs['where'],
    Omit<Prisma.Vector_layersInclude, '_count'>,
    Prisma.Vector_layersFindFirstArgs['orderBy'],
    Prisma.Vector_layersScalarFieldEnum,
    Vector_layersGetPayload
  >,
  widget_types: {
    fields: new Map([
      [
        "widget_type_id",
        "UUID"
      ],
      [
        "name",
        "TEXT"
      ],
      [
        "needs_list",
        "BOOL"
      ],
      [
        "sort",
        "INT2"
      ],
      [
        "comment",
        "TEXT"
      ],
      [
        "label_replace_by_generated_column",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("fields", "", "", "fields", "FieldsToWidget_types", "many"),
      new Relation("widgets_for_fields", "", "", "widgets_for_fields", "Widget_typesToWidgets_for_fields", "many"),
    ],
    modelSchema: (Widget_typesCreateInputSchema as any)
      .partial()
      .or((Widget_typesUncheckedCreateInputSchema as any).partial()),
    createSchema: Widget_typesCreateArgsSchema,
    createManySchema: Widget_typesCreateManyArgsSchema,
    findUniqueSchema: Widget_typesFindUniqueArgsSchema,
    findSchema: Widget_typesFindFirstArgsSchema,
    updateSchema: Widget_typesUpdateArgsSchema,
    updateManySchema: Widget_typesUpdateManyArgsSchema,
    upsertSchema: Widget_typesUpsertArgsSchema,
    deleteSchema: Widget_typesDeleteArgsSchema,
    deleteManySchema: Widget_typesDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Widget_typesCreateInputSchema>,
    Prisma.Widget_typesCreateArgs['data'],
    Prisma.Widget_typesUpdateArgs['data'],
    Prisma.Widget_typesFindFirstArgs['select'],
    Prisma.Widget_typesFindFirstArgs['where'],
    Prisma.Widget_typesFindUniqueArgs['where'],
    Omit<Prisma.Widget_typesInclude, '_count'>,
    Prisma.Widget_typesFindFirstArgs['orderBy'],
    Prisma.Widget_typesScalarFieldEnum,
    Widget_typesGetPayload
  >,
  widgets_for_fields: {
    fields: new Map([
      [
        "widget_for_field_id",
        "UUID"
      ],
      [
        "field_type_id",
        "UUID"
      ],
      [
        "widget_type_id",
        "UUID"
      ],
      [
        "label",
        "TEXT"
      ],
      [
        "deleted",
        "BOOL"
      ]
    ]),
    relations: [
      new Relation("field_types", "field_type_id", "field_type_id", "field_types", "Field_typesToWidgets_for_fields", "one"),
      new Relation("widget_types", "widget_type_id", "widget_type_id", "widget_types", "Widget_typesToWidgets_for_fields", "one"),
    ],
    modelSchema: (Widgets_for_fieldsCreateInputSchema as any)
      .partial()
      .or((Widgets_for_fieldsUncheckedCreateInputSchema as any).partial()),
    createSchema: Widgets_for_fieldsCreateArgsSchema,
    createManySchema: Widgets_for_fieldsCreateManyArgsSchema,
    findUniqueSchema: Widgets_for_fieldsFindUniqueArgsSchema,
    findSchema: Widgets_for_fieldsFindFirstArgsSchema,
    updateSchema: Widgets_for_fieldsUpdateArgsSchema,
    updateManySchema: Widgets_for_fieldsUpdateManyArgsSchema,
    upsertSchema: Widgets_for_fieldsUpsertArgsSchema,
    deleteSchema: Widgets_for_fieldsDeleteArgsSchema,
    deleteManySchema: Widgets_for_fieldsDeleteManyArgsSchema
  } as TableSchema<
    z.infer<typeof Widgets_for_fieldsCreateInputSchema>,
    Prisma.Widgets_for_fieldsCreateArgs['data'],
    Prisma.Widgets_for_fieldsUpdateArgs['data'],
    Prisma.Widgets_for_fieldsFindFirstArgs['select'],
    Prisma.Widgets_for_fieldsFindFirstArgs['where'],
    Prisma.Widgets_for_fieldsFindUniqueArgs['where'],
    Omit<Prisma.Widgets_for_fieldsInclude, '_count'>,
    Prisma.Widgets_for_fieldsFindFirstArgs['orderBy'],
    Prisma.Widgets_for_fieldsScalarFieldEnum,
    Widgets_for_fieldsGetPayload
  >,
}

export const schema = new DbSchema(tableSchemas, migrations)
export type Electric = ElectricClient<typeof schema>
export const JsonNull = { __is_electric_json_null__: true }
