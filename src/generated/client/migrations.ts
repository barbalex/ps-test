export default [
  {
    "statements": [
      "CREATE TABLE \"users\" (\n  \"user_id\" TEXT NOT NULL,\n  \"email\" TEXT,\n  \"auth_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"users_pkey\" PRIMARY KEY (\"user_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"users_email_idx\" ON \"users\" (\"email\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.users', 1);",
      "  /* Triggers for table users */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_users_primarykey;",
      "CREATE TRIGGER update_ensure_main_users_primarykey\n  BEFORE UPDATE ON \"main\".\"users\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_id\" != new.\"user_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_users_into_oplog;",
      "CREATE TRIGGER insert_main_users_into_oplog\n   AFTER INSERT ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'INSERT', json_object('user_id', new.\"user_id\"), json_object('auth_id', new.\"auth_id\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_users_into_oplog;",
      "CREATE TRIGGER update_main_users_into_oplog\n   AFTER UPDATE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'UPDATE', json_object('user_id', new.\"user_id\"), json_object('auth_id', new.\"auth_id\", 'deleted', new.\"deleted\", 'email', new.\"email\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'user_id', new.\"user_id\"), json_object('auth_id', old.\"auth_id\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_users_into_oplog;",
      "CREATE TRIGGER delete_main_users_into_oplog\n   AFTER DELETE ON \"main\".\"users\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'users', 'DELETE', json_object('user_id', old.\"user_id\"), NULL, json_object('auth_id', old.\"auth_id\", 'deleted', old.\"deleted\", 'email', old.\"email\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'user_id', old.\"user_id\"), NULL);\nEND;"
    ],
    "version": "1"
  },
  {
    "statements": [
      "CREATE TABLE \"accounts\" (\n  \"account_id\" TEXT NOT NULL,\n  \"user_id\" TEXT,\n  \"type\" TEXT,\n  \"period_start\" TEXT,\n  \"period_end\" TEXT,\n  \"projects_label_by\" TEXT,\n  \"label\" TEXT,\n  CONSTRAINT \"accounts_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\"),\n  CONSTRAINT \"accounts_pkey\" PRIMARY KEY (\"account_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"accounts_label_idx\" ON \"accounts\" (\"label\" ASC);\n",
      "CREATE INDEX \"accounts_period_end_idx\" ON \"accounts\" (\"period_end\" ASC);\n",
      "CREATE INDEX \"accounts_period_start_idx\" ON \"accounts\" (\"period_start\" ASC);\n",
      "CREATE INDEX \"accounts_user_id_idx\" ON \"accounts\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.accounts', 1);",
      "  /* Triggers for table accounts */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_accounts_primarykey;",
      "CREATE TRIGGER update_ensure_main_accounts_primarykey\n  BEFORE UPDATE ON \"main\".\"accounts\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"account_id\" != new.\"account_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column account_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_accounts_into_oplog;",
      "CREATE TRIGGER insert_main_accounts_into_oplog\n   AFTER INSERT ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'INSERT', json_object('account_id', new.\"account_id\"), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_accounts_into_oplog;",
      "CREATE TRIGGER update_main_accounts_into_oplog\n   AFTER UPDATE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'UPDATE', json_object('account_id', new.\"account_id\"), json_object('account_id', new.\"account_id\", 'label', new.\"label\", 'period_end', new.\"period_end\", 'period_start', new.\"period_start\", 'projects_label_by', new.\"projects_label_by\", 'type', new.\"type\", 'user_id', new.\"user_id\"), json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_accounts_into_oplog;",
      "CREATE TRIGGER delete_main_accounts_into_oplog\n   AFTER DELETE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'accounts', 'DELETE', json_object('account_id', old.\"account_id\"), NULL, json_object('account_id', old.\"account_id\", 'label', old.\"label\", 'period_end', old.\"period_end\", 'period_start', old.\"period_start\", 'projects_label_by', old.\"projects_label_by\", 'type', old.\"type\", 'user_id', old.\"user_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_accounts_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"accounts\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_accounts_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_accounts_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"accounts\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "2"
  },
  {
    "statements": [
      "CREATE TABLE \"messages\" (\n  \"message_id\" TEXT NOT NULL,\n  \"label_replace_by_generated_column\" TEXT,\n  \"date\" TEXT,\n  \"message\" TEXT,\n  CONSTRAINT \"messages_pkey\" PRIMARY KEY (\"message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"messages_date_idx\" ON \"messages\" (\"date\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.messages', 1);",
      "  /* Triggers for table messages */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"message_id\" != new.\"message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column message_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_messages_into_oplog;",
      "CREATE TRIGGER insert_main_messages_into_oplog\n   AFTER INSERT ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'INSERT', json_object('message_id', new.\"message_id\"), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_messages_into_oplog;",
      "CREATE TRIGGER update_main_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'UPDATE', json_object('message_id', new.\"message_id\"), json_object('date', new.\"date\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message', new.\"message\", 'message_id', new.\"message_id\"), json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_messages_into_oplog;",
      "CREATE TRIGGER delete_main_messages_into_oplog\n   AFTER DELETE ON \"main\".\"messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'messages', 'DELETE', json_object('message_id', old.\"message_id\"), NULL, json_object('date', old.\"date\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message', old.\"message\", 'message_id', old.\"message_id\"), NULL);\nEND;"
    ],
    "version": "26"
  },
  {
    "statements": [
      "CREATE TABLE \"user_messages\" (\n  \"user_message_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"user_id\" TEXT,\n  \"message_id\" TEXT,\n  \"label_replace_by_generated_column\" TEXT,\n  \"read\" INTEGER,\n  CONSTRAINT \"user_messages_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_message_id_fkey\" FOREIGN KEY (\"message_id\") REFERENCES \"messages\" (\"message_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_user_id_fkey\" FOREIGN KEY (\"user_id\") REFERENCES \"users\" (\"user_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"user_messages_pkey\" PRIMARY KEY (\"user_message_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"user_messages_message_id_idx\" ON \"user_messages\" (\"message_id\" ASC);\n",
      "CREATE INDEX \"user_messages_user_id_idx\" ON \"user_messages\" (\"user_id\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.user_messages', 1);",
      "  /* Triggers for table user_messages */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_user_messages_primarykey;",
      "CREATE TRIGGER update_ensure_main_user_messages_primarykey\n  BEFORE UPDATE ON \"main\".\"user_messages\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"user_message_id\" != new.\"user_message_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column user_message_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_user_messages_into_oplog;",
      "CREATE TRIGGER insert_main_user_messages_into_oplog\n   AFTER INSERT ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'INSERT', json_object('user_message_id', new.\"user_message_id\"), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_user_messages_into_oplog;",
      "CREATE TRIGGER update_main_user_messages_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'UPDATE', json_object('user_message_id', new.\"user_message_id\"), json_object('account_id', new.\"account_id\", 'label_replace_by_generated_column', new.\"label_replace_by_generated_column\", 'message_id', new.\"message_id\", 'read', new.\"read\", 'user_id', new.\"user_id\", 'user_message_id', new.\"user_message_id\"), json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_user_messages_into_oplog;",
      "CREATE TRIGGER delete_main_user_messages_into_oplog\n   AFTER DELETE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.user_messages')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'user_messages', 'DELETE', json_object('user_message_id', old.\"user_message_id\"), NULL, json_object('account_id', old.\"account_id\", 'label_replace_by_generated_column', old.\"label_replace_by_generated_column\", 'message_id', old.\"message_id\", 'read', old.\"read\", 'user_id', old.\"user_id\", 'user_message_id', old.\"user_message_id\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_user_messages_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_message_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_object('message_id', \"message_id\"), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_message_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_message_id_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.messages') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'messages', 'COMPENSATION', json_object('message_id', \"message_id\"), json_object('message_id', \"message_id\"), NULL, NULL\n  FROM \"main\".\"messages\" WHERE \"message_id\" = new.\"message_id\";\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_user_messages_user_id_into_oplog\n  AFTER INSERT ON \"main\".\"user_messages\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_user_messages_user_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_user_messages_user_id_into_oplog\n   AFTER UPDATE ON \"main\".\"user_messages\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.users') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'users', 'COMPENSATION', json_object('user_id', \"user_id\"), json_object('user_id', \"user_id\"), NULL, NULL\n  FROM \"main\".\"users\" WHERE \"user_id\" = new.\"user_id\";\nEND;"
    ],
    "version": "27"
  },
  {
    "statements": [
      "CREATE TABLE \"projects\" (\n  \"project_id\" TEXT NOT NULL,\n  \"account_id\" TEXT,\n  \"name\" TEXT,\n  \"label\" TEXT,\n  \"type\" TEXT,\n  \"subproject_name_singular\" TEXT,\n  \"subproject_name_plural\" TEXT,\n  \"subproject_order_by\" TEXT,\n  \"places_label_by\" TEXT,\n  \"places_order_by\" TEXT_JSON,\n  \"persons_label_by\" TEXT,\n  \"persons_order_by\" TEXT,\n  \"goal_reports_label_by\" TEXT,\n  \"goal_reports_order_by\" TEXT,\n  \"values_on_multiple_levels\" TEXT,\n  \"multiple_action_values_on_same_level\" TEXT,\n  \"multiple_check_values_on_same_level\" TEXT,\n  \"data\" TEXT_JSON,\n  \"files_offline\" INTEGER,\n  \"files_active_projects\" INTEGER,\n  \"files_active_subprojects\" INTEGER,\n  \"files_active_places\" INTEGER,\n  \"files_active_actions\" INTEGER,\n  \"files_active_checks\" INTEGER,\n  \"deleted\" INTEGER,\n  CONSTRAINT \"projects_account_id_fkey\" FOREIGN KEY (\"account_id\") REFERENCES \"accounts\" (\"account_id\") ON DELETE CASCADE ON UPDATE CASCADE,\n  CONSTRAINT \"projects_pkey\" PRIMARY KEY (\"project_id\")\n) WITHOUT ROWID;\n",
      "CREATE INDEX \"projects_account_id_idx\" ON \"projects\" (\"account_id\" ASC);\n",
      "CREATE INDEX \"projects_label_idx\" ON \"projects\" (\"label\" ASC);\n",
      "CREATE INDEX \"projects_name_idx\" ON \"projects\" (\"name\" ASC);\n",
      "-- Toggles for turning the triggers on and off\nINSERT OR IGNORE INTO _electric_trigger_settings(tablename,flag) VALUES ('main.projects', 1);",
      "  /* Triggers for table projects */\n\n  -- ensures primary key is immutable\n  DROP TRIGGER IF EXISTS update_ensure_main_projects_primarykey;",
      "CREATE TRIGGER update_ensure_main_projects_primarykey\n  BEFORE UPDATE ON \"main\".\"projects\"\nBEGIN\n  SELECT\n    CASE\n      WHEN old.\"project_id\" != new.\"project_id\" THEN\n      \t\tRAISE (ABORT, 'cannot change the value of column project_id as it belongs to the primary key')\n    END;\nEND;",
      "-- Triggers that add INSERT, UPDATE, DELETE operation to the _opslog table\nDROP TRIGGER IF EXISTS insert_main_projects_into_oplog;",
      "CREATE TRIGGER insert_main_projects_into_oplog\n   AFTER INSERT ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'INSERT', json_object('project_id', new.\"project_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_actions', new.\"files_active_actions\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_subprojects', new.\"files_active_subprojects\", 'files_offline', new.\"files_offline\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'label', new.\"label\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), NULL, NULL);\nEND;",
      "DROP TRIGGER IF EXISTS update_main_projects_into_oplog;",
      "CREATE TRIGGER update_main_projects_into_oplog\n   AFTER UPDATE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'UPDATE', json_object('project_id', new.\"project_id\"), json_object('account_id', new.\"account_id\", 'data', new.\"data\", 'deleted', new.\"deleted\", 'files_active_actions', new.\"files_active_actions\", 'files_active_checks', new.\"files_active_checks\", 'files_active_places', new.\"files_active_places\", 'files_active_projects', new.\"files_active_projects\", 'files_active_subprojects', new.\"files_active_subprojects\", 'files_offline', new.\"files_offline\", 'goal_reports_label_by', new.\"goal_reports_label_by\", 'goal_reports_order_by', new.\"goal_reports_order_by\", 'label', new.\"label\", 'multiple_action_values_on_same_level', new.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', new.\"multiple_check_values_on_same_level\", 'name', new.\"name\", 'persons_label_by', new.\"persons_label_by\", 'persons_order_by', new.\"persons_order_by\", 'places_label_by', new.\"places_label_by\", 'places_order_by', new.\"places_order_by\", 'project_id', new.\"project_id\", 'subproject_name_plural', new.\"subproject_name_plural\", 'subproject_name_singular', new.\"subproject_name_singular\", 'subproject_order_by', new.\"subproject_order_by\", 'type', new.\"type\", 'values_on_multiple_levels', new.\"values_on_multiple_levels\"), json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_actions', old.\"files_active_actions\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_subprojects', old.\"files_active_subprojects\", 'files_offline', old.\"files_offline\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'label', old.\"label\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "DROP TRIGGER IF EXISTS delete_main_projects_into_oplog;",
      "CREATE TRIGGER delete_main_projects_into_oplog\n   AFTER DELETE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.projects')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  VALUES ('main', 'projects', 'DELETE', json_object('project_id', old.\"project_id\"), NULL, json_object('account_id', old.\"account_id\", 'data', old.\"data\", 'deleted', old.\"deleted\", 'files_active_actions', old.\"files_active_actions\", 'files_active_checks', old.\"files_active_checks\", 'files_active_places', old.\"files_active_places\", 'files_active_projects', old.\"files_active_projects\", 'files_active_subprojects', old.\"files_active_subprojects\", 'files_offline', old.\"files_offline\", 'goal_reports_label_by', old.\"goal_reports_label_by\", 'goal_reports_order_by', old.\"goal_reports_order_by\", 'label', old.\"label\", 'multiple_action_values_on_same_level', old.\"multiple_action_values_on_same_level\", 'multiple_check_values_on_same_level', old.\"multiple_check_values_on_same_level\", 'name', old.\"name\", 'persons_label_by', old.\"persons_label_by\", 'persons_order_by', old.\"persons_order_by\", 'places_label_by', old.\"places_label_by\", 'places_order_by', old.\"places_order_by\", 'project_id', old.\"project_id\", 'subproject_name_plural', old.\"subproject_name_plural\", 'subproject_name_singular', old.\"subproject_name_singular\", 'subproject_order_by', old.\"subproject_order_by\", 'type', old.\"type\", 'values_on_multiple_levels', old.\"values_on_multiple_levels\"), NULL);\nEND;",
      "-- Triggers for foreign key compensations\nDROP TRIGGER IF EXISTS compensation_insert_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_insert_main_projects_account_id_into_oplog\n  AFTER INSERT ON \"main\".\"projects\"\n  WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n       1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;",
      "DROP TRIGGER IF EXISTS compensation_update_main_projects_account_id_into_oplog;",
      "CREATE TRIGGER compensation_update_main_projects_account_id_into_oplog\n   AFTER UPDATE ON \"main\".\"projects\"\n   WHEN 1 == (SELECT flag from _electric_trigger_settings WHERE tablename == 'main.accounts') AND\n        1 == (SELECT value from _electric_meta WHERE key == 'compensations')\nBEGIN\n  INSERT INTO _electric_oplog (namespace, tablename, optype, primaryKey, newRow, oldRow, timestamp)\n  SELECT 'main', 'accounts', 'COMPENSATION', json_object('account_id', \"account_id\"), json_object('account_id', \"account_id\"), NULL, NULL\n  FROM \"main\".\"accounts\" WHERE \"account_id\" = new.\"account_id\";\nEND;"
    ],
    "version": "3"
  }
]